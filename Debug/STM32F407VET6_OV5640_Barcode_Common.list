
STM32F407VET6_OV5640_Barcode_Common.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a588  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001448  0800a710  0800a710  0001a710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb58  0800bb58  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb58  0800bb58  0001bb58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb60  0800bb60  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb60  0800bb60  0001bb60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb64  0800bb64  0001bb64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800bb68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000116dc  20000184  0800bcec  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20011860  0800bcec  00021860  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019af5  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d61  00000000  00000000  00039ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  0003da10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  0003ea18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000246d4  00000000  00000000  0003f8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001571f  00000000  00000000  00063f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c884b  00000000  00000000  000796ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141ef6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004078  00000000  00000000  00141f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000184 	.word	0x20000184
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a6f8 	.word	0x0800a6f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000188 	.word	0x20000188
 80001c4:	0800a6f8 	.word	0x0800a6f8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f001 f9c3 	bl	8001850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f983 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 fa77 	bl	80009c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d2:	f000 fa4d 	bl	8000970 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004d6:	f000 fa21 	bl	800091c <MX_USART1_UART_Init>
  MX_DCMI_Init();
 80004da:	f000 f9f7 	bl	80008cc <MX_DCMI_Init>
  MX_USB_DEVICE_Init();
 80004de:	f009 fbb9 	bl	8009c54 <MX_USB_DEVICE_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80004e2:	f000 f9e7 	bl	80008b4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_UART_Receive_IT(&huart1, (uint8_t *)&aRxBuffer, 1)!=HAL_OK)
 80004e6:	2201      	movs	r2, #1
 80004e8:	49ac      	ldr	r1, [pc, #688]	; (800079c <main+0x2dc>)
 80004ea:	48ad      	ldr	r0, [pc, #692]	; (80007a0 <main+0x2e0>)
 80004ec:	f005 fd6f 	bl	8005fce <HAL_UART_Receive_IT>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d006      	beq.n	8000504 <main+0x44>
   {
 	  MX_USART1_UART_Init();
 80004f6:	f000 fa11 	bl	800091c <MX_USART1_UART_Init>
 	  HAL_UART_Receive_IT(&huart1, (uint8_t *)&aRxBuffer, 1);
 80004fa:	2201      	movs	r2, #1
 80004fc:	49a7      	ldr	r1, [pc, #668]	; (800079c <main+0x2dc>)
 80004fe:	48a8      	ldr	r0, [pc, #672]	; (80007a0 <main+0x2e0>)
 8000500:	f005 fd65 	bl	8005fce <HAL_UART_Receive_IT>
   }

     HAL_Delay(500); //Await OV5640 running stable
 8000504:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000508:	f001 fa14 	bl	8001934 <HAL_Delay>
     SCCB_Rst();
 800050c:	f000 fdec 	bl	80010e8 <SCCB_Rst>
     HAL_Delay(100);
 8000510:	2064      	movs	r0, #100	; 0x64
 8000512:	f001 fa0f 	bl	8001934 <HAL_Delay>

 	 ov5640_reg1 = SCCB_RD_Reg(OV5640_CHIPIDH);
 8000516:	f243 000a 	movw	r0, #12298	; 0x300a
 800051a:	f000 fd25 	bl	8000f68 <SCCB_RD_Reg>
 800051e:	4603      	mov	r3, r0
 8000520:	461a      	mov	r2, r3
 8000522:	4ba0      	ldr	r3, [pc, #640]	; (80007a4 <main+0x2e4>)
 8000524:	701a      	strb	r2, [r3, #0]
 	 ov5640_reg2 = SCCB_RD_Reg(OV5640_CHIPIDL);
 8000526:	f243 000b 	movw	r0, #12299	; 0x300b
 800052a:	f000 fd1d 	bl	8000f68 <SCCB_RD_Reg>
 800052e:	4603      	mov	r3, r0
 8000530:	461a      	mov	r2, r3
 8000532:	4b9d      	ldr	r3, [pc, #628]	; (80007a8 <main+0x2e8>)
 8000534:	701a      	strb	r2, [r3, #0]
     if((ov5640_reg1==0xff)||(ov5640_reg2==0xff)) while(1);;
 8000536:	4b9b      	ldr	r3, [pc, #620]	; (80007a4 <main+0x2e4>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2bff      	cmp	r3, #255	; 0xff
 800053c:	d003      	beq.n	8000546 <main+0x86>
 800053e:	4b9a      	ldr	r3, [pc, #616]	; (80007a8 <main+0x2e8>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2bff      	cmp	r3, #255	; 0xff
 8000544:	d100      	bne.n	8000548 <main+0x88>
 8000546:	e7fe      	b.n	8000546 <main+0x86>

 	   OV5640_Init(); HAL_Delay(1);
 8000548:	f000 fdec 	bl	8001124 <OV5640_Init>
 800054c:	2001      	movs	r0, #1
 800054e:	f001 f9f1 	bl	8001934 <HAL_Delay>
 	   OV5640_RGB565_Mode(); HAL_Delay(1);
 8000552:	f000 fe09 	bl	8001168 <OV5640_RGB565_Mode>
 8000556:	2001      	movs	r0, #1
 8000558:	f001 f9ec 	bl	8001934 <HAL_Delay>
 	   OV5640_Focus_Init(); HAL_Delay(1);
 800055c:	f000 fe8c 	bl	8001278 <OV5640_Focus_Init>
 8000560:	2001      	movs	r0, #1
 8000562:	f001 f9e7 	bl	8001934 <HAL_Delay>
 	   ov5640_speed_ctrl(); HAL_Delay(1);
 8000566:	f000 ff1a 	bl	800139e <ov5640_speed_ctrl>
 800056a:	2001      	movs	r0, #1
 800056c:	f001 f9e2 	bl	8001934 <HAL_Delay>
 	   OV5640_OutSize_Set(16,4,640,482); HAL_Delay(1);
 8000570:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8000574:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000578:	2104      	movs	r1, #4
 800057a:	2010      	movs	r0, #16
 800057c:	f000 fe18 	bl	80011b0 <OV5640_OutSize_Set>
 8000580:	2001      	movs	r0, #1
 8000582:	f001 f9d7 	bl	8001934 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 	HAL_Delay(1);
 8000586:	2001      	movs	r0, #1
 8000588:	f001 f9d4 	bl	8001934 <HAL_Delay>

	    if (scmd==1)
 800058c:	4b87      	ldr	r3, [pc, #540]	; (80007ac <main+0x2ec>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d17c      	bne.n	800068e <main+0x1ce>
	    {
	    	scmd = 0;
 8000594:	4b85      	ldr	r3, [pc, #532]	; (80007ac <main+0x2ec>)
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]

	    	  OV5640_Focus_Single();
 800059a:	f000 fedb 	bl	8001354 <OV5640_Focus_Single>

	      	  DCMI_DMA_MemInc_En();
 800059e:	f000 faf7 	bl	8000b90 <DCMI_DMA_MemInc_En>
	      	  HAL_DCMI_DisableCrop (&hdcmi);
 80005a2:	4883      	ldr	r0, [pc, #524]	; (80007b0 <main+0x2f0>)
 80005a4:	f001 fcd1 	bl	8001f4a <HAL_DCMI_DisableCrop>
	       	  TxBuff[0]=0x55;
 80005a8:	4b82      	ldr	r3, [pc, #520]	; (80007b4 <main+0x2f4>)
 80005aa:	2255      	movs	r2, #85	; 0x55
 80005ac:	701a      	strb	r2, [r3, #0]
	          TxBuff[1]=0xaa;
 80005ae:	4b81      	ldr	r3, [pc, #516]	; (80007b4 <main+0x2f4>)
 80005b0:	22aa      	movs	r2, #170	; 0xaa
 80005b2:	705a      	strb	r2, [r3, #1]
	          TxBuff[2]=0x03; //OV5640 Label
 80005b4:	4b7f      	ldr	r3, [pc, #508]	; (80007b4 <main+0x2f4>)
 80005b6:	2203      	movs	r2, #3
 80005b8:	709a      	strb	r2, [r3, #2]
	          CDC_Transmit_FS(TxBuff, 3);
 80005ba:	2103      	movs	r1, #3
 80005bc:	487d      	ldr	r0, [pc, #500]	; (80007b4 <main+0x2f4>)
 80005be:	f009 fc0f 	bl	8009de0 <CDC_Transmit_FS>
	          HAL_Delay(100);
 80005c2:	2064      	movs	r0, #100	; 0x64
 80005c4:	f001 f9b6 	bl	8001934 <HAL_Delay>

       	      dcmi_dma_status = HAL_DCMI_Init(&hdcmi);
 80005c8:	4879      	ldr	r0, [pc, #484]	; (80007b0 <main+0x2f0>)
 80005ca:	f001 fdbe 	bl	800214a <HAL_DCMI_Init>
 80005ce:	4603      	mov	r3, r0
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b79      	ldr	r3, [pc, #484]	; (80007b8 <main+0x2f8>)
 80005d4:	701a      	strb	r2, [r3, #0]
	    	  for (uint8_t i=0; i<10;i++)
 80005d6:	2300      	movs	r3, #0
 80005d8:	71fb      	strb	r3, [r7, #7]
 80005da:	e055      	b.n	8000688 <main+0x1c8>
	    	  {
	 		     HAL_DCMI_DisableCrop (&hdcmi);
 80005dc:	4874      	ldr	r0, [pc, #464]	; (80007b0 <main+0x2f0>)
 80005de:	f001 fcb4 	bl	8001f4a <HAL_DCMI_DisableCrop>

	 	    	 DCMI_RN = 48;
 80005e2:	4b76      	ldr	r3, [pc, #472]	; (80007bc <main+0x2fc>)
 80005e4:	2230      	movs	r2, #48	; 0x30
 80005e6:	601a      	str	r2, [r3, #0]
	 	    	 DCMI_CN = 1280;
 80005e8:	4b75      	ldr	r3, [pc, #468]	; (80007c0 <main+0x300>)
 80005ea:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80005ee:	601a      	str	r2, [r3, #0]

	 	    	 DCMI_RS = 48*i;
 80005f0:	79fa      	ldrb	r2, [r7, #7]
 80005f2:	4613      	mov	r3, r2
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	4413      	add	r3, r2
 80005f8:	011b      	lsls	r3, r3, #4
 80005fa:	461a      	mov	r2, r3
 80005fc:	4b71      	ldr	r3, [pc, #452]	; (80007c4 <main+0x304>)
 80005fe:	601a      	str	r2, [r3, #0]
	 	    	 DCMI_CS = 0;
 8000600:	4b71      	ldr	r3, [pc, #452]	; (80007c8 <main+0x308>)
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]

	 	    	 HAL_DCMI_ConfigCrop (&hdcmi, DCMI_CS, DCMI_RS, DCMI_CN, DCMI_RN);
 8000606:	4b70      	ldr	r3, [pc, #448]	; (80007c8 <main+0x308>)
 8000608:	6819      	ldr	r1, [r3, #0]
 800060a:	4b6e      	ldr	r3, [pc, #440]	; (80007c4 <main+0x304>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	4b6c      	ldr	r3, [pc, #432]	; (80007c0 <main+0x300>)
 8000610:	6818      	ldr	r0, [r3, #0]
 8000612:	4b6a      	ldr	r3, [pc, #424]	; (80007bc <main+0x2fc>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	4603      	mov	r3, r0
 800061a:	4865      	ldr	r0, [pc, #404]	; (80007b0 <main+0x2f0>)
 800061c:	f001 fc62 	bl	8001ee4 <HAL_DCMI_ConfigCrop>
	 	    	 HAL_Delay(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f001 f987 	bl	8001934 <HAL_Delay>
	 	    	 HAL_DCMI_EnableCrop (&hdcmi);
 8000626:	4862      	ldr	r0, [pc, #392]	; (80007b0 <main+0x2f0>)
 8000628:	f001 fcb9 	bl	8001f9e <HAL_DCMI_EnableCrop>
	 	    	 HAL_Delay(1);
 800062c:	2001      	movs	r0, #1
 800062e:	f001 f981 	bl	8001934 <HAL_Delay>

	 	    	 dcmi_dma_status = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, dcmi_data_buff, DCMI_CN*DCMI_RN/4);
 8000632:	4966      	ldr	r1, [pc, #408]	; (80007cc <main+0x30c>)
 8000634:	4b62      	ldr	r3, [pc, #392]	; (80007c0 <main+0x300>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a60      	ldr	r2, [pc, #384]	; (80007bc <main+0x2fc>)
 800063a:	6812      	ldr	r2, [r2, #0]
 800063c:	fb02 f303 	mul.w	r3, r2, r3
 8000640:	089b      	lsrs	r3, r3, #2
 8000642:	460a      	mov	r2, r1
 8000644:	2102      	movs	r1, #2
 8000646:	485a      	ldr	r0, [pc, #360]	; (80007b0 <main+0x2f0>)
 8000648:	f001 faaa 	bl	8001ba0 <HAL_DCMI_Start_DMA>
 800064c:	4603      	mov	r3, r0
 800064e:	461a      	mov	r2, r3
 8000650:	4b59      	ldr	r3, [pc, #356]	; (80007b8 <main+0x2f8>)
 8000652:	701a      	strb	r2, [r3, #0]
	 	    	 while(HAL_DMA_GetState(&hdcmi)==HAL_DMA_STATE_BUSY) ;
 8000654:	bf00      	nop
 8000656:	4856      	ldr	r0, [pc, #344]	; (80007b0 <main+0x2f0>)
 8000658:	f002 f964 	bl	8002924 <HAL_DMA_GetState>
 800065c:	4603      	mov	r3, r0
 800065e:	2b02      	cmp	r3, #2
 8000660:	d0f9      	beq.n	8000656 <main+0x196>
	 	    	 HAL_DCMI_Stop(&hdcmi);
 8000662:	4853      	ldr	r0, [pc, #332]	; (80007b0 <main+0x2f0>)
 8000664:	f001 fb3c 	bl	8001ce0 <HAL_DCMI_Stop>

	 	    	 tx_busy = 1;
 8000668:	4b59      	ldr	r3, [pc, #356]	; (80007d0 <main+0x310>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
 		    	 CDC_Transmit_FS((uint8_t *)dcmi_data_buff, 61440);
 800066e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000672:	4856      	ldr	r0, [pc, #344]	; (80007cc <main+0x30c>)
 8000674:	f009 fbb4 	bl	8009de0 <CDC_Transmit_FS>
 		    	 while(tx_busy!=0) ;
 8000678:	bf00      	nop
 800067a:	4b55      	ldr	r3, [pc, #340]	; (80007d0 <main+0x310>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1fb      	bne.n	800067a <main+0x1ba>
	    	  for (uint8_t i=0; i<10;i++)
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	3301      	adds	r3, #1
 8000686:	71fb      	strb	r3, [r7, #7]
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	2b09      	cmp	r3, #9
 800068c:	d9a6      	bls.n	80005dc <main+0x11c>
	    	  }
	    }

	    if (scmd==2)
 800068e:	4b47      	ldr	r3, [pc, #284]	; (80007ac <main+0x2ec>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b02      	cmp	r3, #2
 8000694:	f47f af77 	bne.w	8000586 <main+0xc6>
	    {
	    	scmd = 0;
 8000698:	4b44      	ldr	r3, [pc, #272]	; (80007ac <main+0x2ec>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]

	    	 OV5640_Focus_Single();
 800069e:	f000 fe59 	bl	8001354 <OV5640_Focus_Single>

	      	  DCMI_DMA_MemInc_En();
 80006a2:	f000 fa75 	bl	8000b90 <DCMI_DMA_MemInc_En>
	      	  HAL_DCMI_DisableCrop (&hdcmi);
 80006a6:	4842      	ldr	r0, [pc, #264]	; (80007b0 <main+0x2f0>)
 80006a8:	f001 fc4f 	bl	8001f4a <HAL_DCMI_DisableCrop>
	       	  TxBuff[0]=0x55;
 80006ac:	4b41      	ldr	r3, [pc, #260]	; (80007b4 <main+0x2f4>)
 80006ae:	2255      	movs	r2, #85	; 0x55
 80006b0:	701a      	strb	r2, [r3, #0]
	          TxBuff[1]=0xaa;
 80006b2:	4b40      	ldr	r3, [pc, #256]	; (80007b4 <main+0x2f4>)
 80006b4:	22aa      	movs	r2, #170	; 0xaa
 80006b6:	705a      	strb	r2, [r3, #1]
	          TxBuff[2]=0x03; //OV5640 Label
 80006b8:	4b3e      	ldr	r3, [pc, #248]	; (80007b4 <main+0x2f4>)
 80006ba:	2203      	movs	r2, #3
 80006bc:	709a      	strb	r2, [r3, #2]
	      	  HAL_UART_Transmit(&huart1, TxBuff, 3, 0xFFFFFF);
 80006be:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80006c2:	2203      	movs	r2, #3
 80006c4:	493b      	ldr	r1, [pc, #236]	; (80007b4 <main+0x2f4>)
 80006c6:	4836      	ldr	r0, [pc, #216]	; (80007a0 <main+0x2e0>)
 80006c8:	f005 fbef 	bl	8005eaa <HAL_UART_Transmit>
	          HAL_Delay(100);
 80006cc:	2064      	movs	r0, #100	; 0x64
 80006ce:	f001 f931 	bl	8001934 <HAL_Delay>

       	      dcmi_dma_status = HAL_DCMI_Init(&hdcmi);
 80006d2:	4837      	ldr	r0, [pc, #220]	; (80007b0 <main+0x2f0>)
 80006d4:	f001 fd39 	bl	800214a <HAL_DCMI_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	461a      	mov	r2, r3
 80006dc:	4b36      	ldr	r3, [pc, #216]	; (80007b8 <main+0x2f8>)
 80006de:	701a      	strb	r2, [r3, #0]
	    	  for (uint8_t i=0; i<10;i++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	71bb      	strb	r3, [r7, #6]
 80006e4:	e056      	b.n	8000794 <main+0x2d4>
	    	  {
	 		     HAL_DCMI_DisableCrop (&hdcmi);
 80006e6:	4832      	ldr	r0, [pc, #200]	; (80007b0 <main+0x2f0>)
 80006e8:	f001 fc2f 	bl	8001f4a <HAL_DCMI_DisableCrop>

	 	    	 DCMI_RN = 48;
 80006ec:	4b33      	ldr	r3, [pc, #204]	; (80007bc <main+0x2fc>)
 80006ee:	2230      	movs	r2, #48	; 0x30
 80006f0:	601a      	str	r2, [r3, #0]
	 	    	 DCMI_CN = 1280;
 80006f2:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <main+0x300>)
 80006f4:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80006f8:	601a      	str	r2, [r3, #0]

	 	    	 DCMI_RS = 48*i;
 80006fa:	79ba      	ldrb	r2, [r7, #6]
 80006fc:	4613      	mov	r3, r2
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	4413      	add	r3, r2
 8000702:	011b      	lsls	r3, r3, #4
 8000704:	461a      	mov	r2, r3
 8000706:	4b2f      	ldr	r3, [pc, #188]	; (80007c4 <main+0x304>)
 8000708:	601a      	str	r2, [r3, #0]
	 	    	 DCMI_CS = 0;
 800070a:	4b2f      	ldr	r3, [pc, #188]	; (80007c8 <main+0x308>)
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]

	 	    	 HAL_DCMI_ConfigCrop (&hdcmi, DCMI_CS, DCMI_RS, DCMI_CN, DCMI_RN);
 8000710:	4b2d      	ldr	r3, [pc, #180]	; (80007c8 <main+0x308>)
 8000712:	6819      	ldr	r1, [r3, #0]
 8000714:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <main+0x304>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4b29      	ldr	r3, [pc, #164]	; (80007c0 <main+0x300>)
 800071a:	6818      	ldr	r0, [r3, #0]
 800071c:	4b27      	ldr	r3, [pc, #156]	; (80007bc <main+0x2fc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	4603      	mov	r3, r0
 8000724:	4822      	ldr	r0, [pc, #136]	; (80007b0 <main+0x2f0>)
 8000726:	f001 fbdd 	bl	8001ee4 <HAL_DCMI_ConfigCrop>
	 	    	 HAL_Delay(1);
 800072a:	2001      	movs	r0, #1
 800072c:	f001 f902 	bl	8001934 <HAL_Delay>
	 	    	 HAL_DCMI_EnableCrop (&hdcmi);
 8000730:	481f      	ldr	r0, [pc, #124]	; (80007b0 <main+0x2f0>)
 8000732:	f001 fc34 	bl	8001f9e <HAL_DCMI_EnableCrop>
	 	    	 HAL_Delay(1);
 8000736:	2001      	movs	r0, #1
 8000738:	f001 f8fc 	bl	8001934 <HAL_Delay>

	 	    	 dcmi_dma_status = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, dcmi_data_buff, DCMI_CN*DCMI_RN/4);
 800073c:	4923      	ldr	r1, [pc, #140]	; (80007cc <main+0x30c>)
 800073e:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <main+0x300>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a1e      	ldr	r2, [pc, #120]	; (80007bc <main+0x2fc>)
 8000744:	6812      	ldr	r2, [r2, #0]
 8000746:	fb02 f303 	mul.w	r3, r2, r3
 800074a:	089b      	lsrs	r3, r3, #2
 800074c:	460a      	mov	r2, r1
 800074e:	2102      	movs	r1, #2
 8000750:	4817      	ldr	r0, [pc, #92]	; (80007b0 <main+0x2f0>)
 8000752:	f001 fa25 	bl	8001ba0 <HAL_DCMI_Start_DMA>
 8000756:	4603      	mov	r3, r0
 8000758:	461a      	mov	r2, r3
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <main+0x2f8>)
 800075c:	701a      	strb	r2, [r3, #0]
	 	    	 while(HAL_DMA_GetState(&hdcmi)==HAL_DMA_STATE_BUSY) ;
 800075e:	bf00      	nop
 8000760:	4813      	ldr	r0, [pc, #76]	; (80007b0 <main+0x2f0>)
 8000762:	f002 f8df 	bl	8002924 <HAL_DMA_GetState>
 8000766:	4603      	mov	r3, r0
 8000768:	2b02      	cmp	r3, #2
 800076a:	d0f9      	beq.n	8000760 <main+0x2a0>
	 	    	 HAL_DCMI_Stop(&hdcmi);
 800076c:	4810      	ldr	r0, [pc, #64]	; (80007b0 <main+0x2f0>)
 800076e:	f001 fab7 	bl	8001ce0 <HAL_DCMI_Stop>

	 	    	  tx_busy = 1;
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <main+0x310>)
 8000774:	2201      	movs	r2, #1
 8000776:	701a      	strb	r2, [r3, #0]
	 	    	  HAL_UART_Transmit_DMA(&huart1, (uint8_t *)dcmi_data_buff, 61440);
 8000778:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 800077c:	4913      	ldr	r1, [pc, #76]	; (80007cc <main+0x30c>)
 800077e:	4808      	ldr	r0, [pc, #32]	; (80007a0 <main+0x2e0>)
 8000780:	f005 fc56 	bl	8006030 <HAL_UART_Transmit_DMA>
   		          while(tx_busy!=0) ;
 8000784:	bf00      	nop
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <main+0x310>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d1fb      	bne.n	8000786 <main+0x2c6>
	    	  for (uint8_t i=0; i<10;i++)
 800078e:	79bb      	ldrb	r3, [r7, #6]
 8000790:	3301      	adds	r3, #1
 8000792:	71bb      	strb	r3, [r7, #6]
 8000794:	79bb      	ldrb	r3, [r7, #6]
 8000796:	2b09      	cmp	r3, #9
 8000798:	d9a5      	bls.n	80006e6 <main+0x226>
	 	HAL_Delay(1);
 800079a:	e6f4      	b.n	8000586 <main+0xc6>
 800079c:	200001a0 	.word	0x200001a0
 80007a0:	2000053c 	.word	0x2000053c
 80007a4:	20000000 	.word	0x20000000
 80007a8:	20000001 	.word	0x20000001
 80007ac:	20000218 	.word	0x20000218
 80007b0:	200004fc 	.word	0x200004fc
 80007b4:	200001a4 	.word	0x200001a4
 80007b8:	20000207 	.word	0x20000207
 80007bc:	20000208 	.word	0x20000208
 80007c0:	2000020c 	.word	0x2000020c
 80007c4:	20000210 	.word	0x20000210
 80007c8:	20000214 	.word	0x20000214
 80007cc:	20000580 	.word	0x20000580
 80007d0:	20000219 	.word	0x20000219

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b094      	sub	sp, #80	; 0x50
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0320 	add.w	r3, r7, #32
 80007de:	2230      	movs	r2, #48	; 0x30
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f009 ff80 	bl	800a6e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <SystemClock_Config+0xd8>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	4a2a      	ldr	r2, [pc, #168]	; (80008ac <SystemClock_Config+0xd8>)
 8000802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000806:	6413      	str	r3, [r2, #64]	; 0x40
 8000808:	4b28      	ldr	r3, [pc, #160]	; (80008ac <SystemClock_Config+0xd8>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	4b25      	ldr	r3, [pc, #148]	; (80008b0 <SystemClock_Config+0xdc>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a24      	ldr	r2, [pc, #144]	; (80008b0 <SystemClock_Config+0xdc>)
 800081e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000822:	6013      	str	r3, [r2, #0]
 8000824:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <SystemClock_Config+0xdc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000830:	2301      	movs	r3, #1
 8000832:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000834:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000842:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000844:	2319      	movs	r3, #25
 8000846:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000848:	23c0      	movs	r3, #192	; 0xc0
 800084a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800084c:	2302      	movs	r3, #2
 800084e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000850:	2304      	movs	r3, #4
 8000852:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	4618      	mov	r0, r3
 800085a:	f004 fe29 	bl	80054b0 <HAL_RCC_OscConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000864:	f000 f9aa 	bl	8000bbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000868:	230f      	movs	r3, #15
 800086a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086c:	2302      	movs	r3, #2
 800086e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000874:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000878:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800087a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	2103      	movs	r1, #3
 8000886:	4618      	mov	r0, r3
 8000888:	f005 f88a 	bl	80059a0 <HAL_RCC_ClockConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000892:	f000 f993 	bl	8000bbc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 8000896:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800089a:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 800089e:	2000      	movs	r0, #0
 80008a0:	f005 f964 	bl	8005b6c <HAL_RCC_MCOConfig>
}
 80008a4:	bf00      	nop
 80008a6:	3750      	adds	r7, #80	; 0x50
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40007000 	.word	0x40007000

080008b4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2101      	movs	r1, #1
 80008bc:	2025      	movs	r0, #37	; 0x25
 80008be:	f001 f938 	bl	8001b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008c2:	2025      	movs	r0, #37	; 0x25
 80008c4:	f001 f951 	bl	8001b6a <HAL_NVIC_EnableIRQ>
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}

080008cc <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80008d0:	4b10      	ldr	r3, [pc, #64]	; (8000914 <MX_DCMI_Init+0x48>)
 80008d2:	4a11      	ldr	r2, [pc, #68]	; (8000918 <MX_DCMI_Init+0x4c>)
 80008d4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_DCMI_Init+0x48>)
 80008d8:	2200      	movs	r2, #0
 80008da:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80008dc:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <MX_DCMI_Init+0x48>)
 80008de:	2220      	movs	r2, #32
 80008e0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_DCMI_Init+0x48>)
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <MX_DCMI_Init+0x48>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_DCMI_Init+0x48>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <MX_DCMI_Init+0x48>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_DCMI_Init+0x48>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_DCMI_Init+0x48>)
 8000902:	f001 fc22 	bl	800214a <HAL_DCMI_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 800090c:	f000 f956 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200004fc 	.word	0x200004fc
 8000918:	50050000 	.word	0x50050000

0800091c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_USART1_UART_Init+0x4c>)
 8000922:	4a12      	ldr	r2, [pc, #72]	; (800096c <MX_USART1_UART_Init+0x50>)
 8000924:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MX_USART1_UART_Init+0x4c>)
 8000928:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800092c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_USART1_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_USART1_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_USART1_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_USART1_UART_Init+0x4c>)
 8000942:	220c      	movs	r2, #12
 8000944:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_USART1_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_USART1_UART_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_USART1_UART_Init+0x4c>)
 8000954:	f005 fa5c 	bl	8005e10 <HAL_UART_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800095e:	f000 f92d 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000053c 	.word	0x2000053c
 800096c:	40011000 	.word	0x40011000

08000970 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <MX_DMA_Init+0x4c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a0f      	ldr	r2, [pc, #60]	; (80009bc <MX_DMA_Init+0x4c>)
 8000980:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <MX_DMA_Init+0x4c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	2039      	movs	r0, #57	; 0x39
 8000998:	f001 f8cb 	bl	8001b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800099c:	2039      	movs	r0, #57	; 0x39
 800099e:	f001 f8e4 	bl	8001b6a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	2046      	movs	r0, #70	; 0x46
 80009a8:	f001 f8c3 	bl	8001b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80009ac:	2046      	movs	r0, #70	; 0x46
 80009ae:	f001 f8dc 	bl	8001b6a <HAL_NVIC_EnableIRQ>

}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800

080009c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08c      	sub	sp, #48	; 0x30
 80009c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
 80009da:	4b4a      	ldr	r3, [pc, #296]	; (8000b04 <MX_GPIO_Init+0x144>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a49      	ldr	r2, [pc, #292]	; (8000b04 <MX_GPIO_Init+0x144>)
 80009e0:	f043 0310 	orr.w	r3, r3, #16
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b47      	ldr	r3, [pc, #284]	; (8000b04 <MX_GPIO_Init+0x144>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0310 	and.w	r3, r3, #16
 80009ee:	61bb      	str	r3, [r7, #24]
 80009f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	4b43      	ldr	r3, [pc, #268]	; (8000b04 <MX_GPIO_Init+0x144>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a42      	ldr	r2, [pc, #264]	; (8000b04 <MX_GPIO_Init+0x144>)
 80009fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b40      	ldr	r3, [pc, #256]	; (8000b04 <MX_GPIO_Init+0x144>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	4b3c      	ldr	r3, [pc, #240]	; (8000b04 <MX_GPIO_Init+0x144>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a3b      	ldr	r2, [pc, #236]	; (8000b04 <MX_GPIO_Init+0x144>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b39      	ldr	r3, [pc, #228]	; (8000b04 <MX_GPIO_Init+0x144>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	4b35      	ldr	r3, [pc, #212]	; (8000b04 <MX_GPIO_Init+0x144>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a34      	ldr	r2, [pc, #208]	; (8000b04 <MX_GPIO_Init+0x144>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b32      	ldr	r3, [pc, #200]	; (8000b04 <MX_GPIO_Init+0x144>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	4b2e      	ldr	r3, [pc, #184]	; (8000b04 <MX_GPIO_Init+0x144>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a2d      	ldr	r2, [pc, #180]	; (8000b04 <MX_GPIO_Init+0x144>)
 8000a50:	f043 0308 	orr.w	r3, r3, #8
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b2b      	ldr	r3, [pc, #172]	; (8000b04 <MX_GPIO_Init+0x144>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0308 	and.w	r3, r3, #8
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <MX_GPIO_Init+0x144>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a26      	ldr	r2, [pc, #152]	; (8000b04 <MX_GPIO_Init+0x144>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b24      	ldr	r3, [pc, #144]	; (8000b04 <MX_GPIO_Init+0x144>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2103      	movs	r1, #3
 8000a82:	4821      	ldr	r0, [pc, #132]	; (8000b08 <MX_GPIO_Init+0x148>)
 8000a84:	f003 fb78 	bl	8004178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a8e:	481f      	ldr	r0, [pc, #124]	; (8000b0c <MX_GPIO_Init+0x14c>)
 8000a90:	f003 fb72 	bl	8004178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a9a:	481c      	ldr	r0, [pc, #112]	; (8000b0c <MX_GPIO_Init+0x14c>)
 8000a9c:	f003 fb6c 	bl	8004178 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4814      	ldr	r0, [pc, #80]	; (8000b08 <MX_GPIO_Init+0x148>)
 8000ab8:	f003 f9aa 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000abc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <MX_GPIO_Init+0x14c>)
 8000ad6:	f003 f99b 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ada:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	4806      	ldr	r0, [pc, #24]	; (8000b10 <MX_GPIO_Init+0x150>)
 8000af8:	f003 f98a 	bl	8003e10 <HAL_GPIO_Init>

}
 8000afc:	bf00      	nop
 8000afe:	3730      	adds	r7, #48	; 0x30
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020400 	.word	0x40020400
 8000b0c:	40020c00 	.word	0x40020c00
 8000b10:	40020000 	.word	0x40020000

08000b14 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	if (huart ==  &huart1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <HAL_UART_RxCpltCallback+0x44>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d115      	bne.n	8000b50 <HAL_UART_RxCpltCallback+0x3c>
	{

		if (aRxBuffer==0x01)
 8000b24:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <HAL_UART_RxCpltCallback+0x48>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d10b      	bne.n	8000b44 <HAL_UART_RxCpltCallback+0x30>
		{
			scmd = 0x02;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <HAL_UART_RxCpltCallback+0x4c>)
 8000b2e:	2202      	movs	r2, #2
 8000b30:	701a      	strb	r2, [r3, #0]
			aRxBuffer=0x00;
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_UART_RxCpltCallback+0x48>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]

			HAL_UART_Receive_IT(&huart1, (uint8_t *)&aRxBuffer, 1);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	4908      	ldr	r1, [pc, #32]	; (8000b5c <HAL_UART_RxCpltCallback+0x48>)
 8000b3c:	4806      	ldr	r0, [pc, #24]	; (8000b58 <HAL_UART_RxCpltCallback+0x44>)
 8000b3e:	f005 fa46 	bl	8005fce <HAL_UART_Receive_IT>

		}


	}
      return;
 8000b42:	e005      	b.n	8000b50 <HAL_UART_RxCpltCallback+0x3c>
		HAL_UART_Receive_IT(&huart1, (uint8_t *)&aRxBuffer, 1);
 8000b44:	2201      	movs	r2, #1
 8000b46:	4905      	ldr	r1, [pc, #20]	; (8000b5c <HAL_UART_RxCpltCallback+0x48>)
 8000b48:	4803      	ldr	r0, [pc, #12]	; (8000b58 <HAL_UART_RxCpltCallback+0x44>)
 8000b4a:	f005 fa40 	bl	8005fce <HAL_UART_Receive_IT>
      return;
 8000b4e:	bf00      	nop
 8000b50:	bf00      	nop

}
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	2000053c 	.word	0x2000053c
 8000b5c:	200001a0 	.word	0x200001a0
 8000b60:	20000218 	.word	0x20000218

08000b64 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

	if (huart ==  &huart1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <HAL_UART_TxCpltCallback+0x24>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d102      	bne.n	8000b7a <HAL_UART_TxCpltCallback+0x16>
	{
		tx_busy = 0;
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_UART_TxCpltCallback+0x28>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]
	}

}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	2000053c 	.word	0x2000053c
 8000b8c:	20000219 	.word	0x20000219

08000b90 <DCMI_DMA_MemInc_En>:

void DCMI_DMA_MemInc_En(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
    HAL_DMA_DeInit(&hdma_dcmi);
 8000b94:	4808      	ldr	r0, [pc, #32]	; (8000bb8 <DCMI_DMA_MemInc_En+0x28>)
 8000b96:	f001 fbf3 	bl	8002380 <HAL_DMA_DeInit>

    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <DCMI_DMA_MemInc_En+0x28>)
 8000b9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ba0:	611a      	str	r2, [r3, #16]
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <DCMI_DMA_MemInc_En+0x28>)
 8000ba4:	f001 fb3e 	bl	8002224 <HAL_DMA_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <DCMI_DMA_MemInc_En+0x22>
    {
      Error_Handler();
 8000bae:	f000 f805 	bl	8000bbc <Error_Handler>
    }
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	2000043c 	.word	0x2000043c

08000bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <SCCB_Start>:
#include <ov5640.h>

//for not open-drain iic bus application

void SCCB_Start(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
    SCCB_SDA_H;
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2102      	movs	r1, #2
 8000bd4:	4814      	ldr	r0, [pc, #80]	; (8000c28 <SCCB_Start+0x5c>)
 8000bd6:	f003 facf 	bl	8004178 <HAL_GPIO_WritePin>
    SCCB_SCL_H;
 8000bda:	2201      	movs	r2, #1
 8000bdc:	2101      	movs	r1, #1
 8000bde:	4812      	ldr	r0, [pc, #72]	; (8000c28 <SCCB_Start+0x5c>)
 8000be0:	f003 faca 	bl	8004178 <HAL_GPIO_WritePin>
    tickdelay = ticknumber;while(tickdelay--);
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <SCCB_Start+0x60>)
 8000be6:	223c      	movs	r2, #60	; 0x3c
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	bf00      	nop
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <SCCB_Start+0x60>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	1e5a      	subs	r2, r3, #1
 8000bf2:	490e      	ldr	r1, [pc, #56]	; (8000c2c <SCCB_Start+0x60>)
 8000bf4:	600a      	str	r2, [r1, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1f8      	bne.n	8000bec <SCCB_Start+0x20>
    SCCB_SDA_L;
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	480a      	ldr	r0, [pc, #40]	; (8000c28 <SCCB_Start+0x5c>)
 8000c00:	f003 faba 	bl	8004178 <HAL_GPIO_WritePin>
    tickdelay = ticknumber;while(tickdelay--);
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <SCCB_Start+0x60>)
 8000c06:	223c      	movs	r2, #60	; 0x3c
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	bf00      	nop
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <SCCB_Start+0x60>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	1e5a      	subs	r2, r3, #1
 8000c12:	4906      	ldr	r1, [pc, #24]	; (8000c2c <SCCB_Start+0x60>)
 8000c14:	600a      	str	r2, [r1, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d1f8      	bne.n	8000c0c <SCCB_Start+0x40>
    SCCB_SCL_L;
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	4802      	ldr	r0, [pc, #8]	; (8000c28 <SCCB_Start+0x5c>)
 8000c20:	f003 faaa 	bl	8004178 <HAL_GPIO_WritePin>
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40020400 	.word	0x40020400
 8000c2c:	2000ff80 	.word	0x2000ff80

08000c30 <SCCB_Stop>:


void SCCB_Stop(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
    SCCB_SDA_L;
 8000c34:	2200      	movs	r2, #0
 8000c36:	2102      	movs	r1, #2
 8000c38:	4818      	ldr	r0, [pc, #96]	; (8000c9c <SCCB_Stop+0x6c>)
 8000c3a:	f003 fa9d 	bl	8004178 <HAL_GPIO_WritePin>
    tickdelay = ticknumber;while(tickdelay--);
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <SCCB_Stop+0x70>)
 8000c40:	223c      	movs	r2, #60	; 0x3c
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	bf00      	nop
 8000c46:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <SCCB_Stop+0x70>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	1e5a      	subs	r2, r3, #1
 8000c4c:	4914      	ldr	r1, [pc, #80]	; (8000ca0 <SCCB_Stop+0x70>)
 8000c4e:	600a      	str	r2, [r1, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d1f8      	bne.n	8000c46 <SCCB_Stop+0x16>
    SCCB_SCL_H;
 8000c54:	2201      	movs	r2, #1
 8000c56:	2101      	movs	r1, #1
 8000c58:	4810      	ldr	r0, [pc, #64]	; (8000c9c <SCCB_Stop+0x6c>)
 8000c5a:	f003 fa8d 	bl	8004178 <HAL_GPIO_WritePin>
    tickdelay = ticknumber;while(tickdelay--);
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <SCCB_Stop+0x70>)
 8000c60:	223c      	movs	r2, #60	; 0x3c
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	bf00      	nop
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <SCCB_Stop+0x70>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	1e5a      	subs	r2, r3, #1
 8000c6c:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <SCCB_Stop+0x70>)
 8000c6e:	600a      	str	r2, [r1, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d1f8      	bne.n	8000c66 <SCCB_Stop+0x36>
    SCCB_SDA_H;
 8000c74:	2201      	movs	r2, #1
 8000c76:	2102      	movs	r1, #2
 8000c78:	4808      	ldr	r0, [pc, #32]	; (8000c9c <SCCB_Stop+0x6c>)
 8000c7a:	f003 fa7d 	bl	8004178 <HAL_GPIO_WritePin>
    tickdelay = ticknumber;while(tickdelay--);
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <SCCB_Stop+0x70>)
 8000c80:	223c      	movs	r2, #60	; 0x3c
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	bf00      	nop
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <SCCB_Stop+0x70>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	1e5a      	subs	r2, r3, #1
 8000c8c:	4904      	ldr	r1, [pc, #16]	; (8000ca0 <SCCB_Stop+0x70>)
 8000c8e:	600a      	str	r2, [r1, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1f8      	bne.n	8000c86 <SCCB_Stop+0x56>
}
 8000c94:	bf00      	nop
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40020400 	.word	0x40020400
 8000ca0:	2000ff80 	.word	0x2000ff80

08000ca4 <SCCB_No_Ack>:

void SCCB_No_Ack(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f000 fe43 	bl	8001934 <HAL_Delay>
	SCCB_SDA_H;
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2102      	movs	r1, #2
 8000cb2:	481b      	ldr	r0, [pc, #108]	; (8000d20 <SCCB_No_Ack+0x7c>)
 8000cb4:	f003 fa60 	bl	8004178 <HAL_GPIO_WritePin>
	SCCB_SCL_H;
 8000cb8:	2201      	movs	r2, #1
 8000cba:	2101      	movs	r1, #1
 8000cbc:	4818      	ldr	r0, [pc, #96]	; (8000d20 <SCCB_No_Ack+0x7c>)
 8000cbe:	f003 fa5b 	bl	8004178 <HAL_GPIO_WritePin>
	tickdelay = ticknumber;while(tickdelay--);
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <SCCB_No_Ack+0x80>)
 8000cc4:	223c      	movs	r2, #60	; 0x3c
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	bf00      	nop
 8000cca:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <SCCB_No_Ack+0x80>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	1e5a      	subs	r2, r3, #1
 8000cd0:	4914      	ldr	r1, [pc, #80]	; (8000d24 <SCCB_No_Ack+0x80>)
 8000cd2:	600a      	str	r2, [r1, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d1f8      	bne.n	8000cca <SCCB_No_Ack+0x26>
	SCCB_SCL_L;
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2101      	movs	r1, #1
 8000cdc:	4810      	ldr	r0, [pc, #64]	; (8000d20 <SCCB_No_Ack+0x7c>)
 8000cde:	f003 fa4b 	bl	8004178 <HAL_GPIO_WritePin>
	tickdelay = ticknumber;while(tickdelay--);
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <SCCB_No_Ack+0x80>)
 8000ce4:	223c      	movs	r2, #60	; 0x3c
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	bf00      	nop
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <SCCB_No_Ack+0x80>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	1e5a      	subs	r2, r3, #1
 8000cf0:	490c      	ldr	r1, [pc, #48]	; (8000d24 <SCCB_No_Ack+0x80>)
 8000cf2:	600a      	str	r2, [r1, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d1f8      	bne.n	8000cea <SCCB_No_Ack+0x46>
	SCCB_SDA_L;
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2102      	movs	r1, #2
 8000cfc:	4808      	ldr	r0, [pc, #32]	; (8000d20 <SCCB_No_Ack+0x7c>)
 8000cfe:	f003 fa3b 	bl	8004178 <HAL_GPIO_WritePin>
	tickdelay = ticknumber;while(tickdelay--);
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <SCCB_No_Ack+0x80>)
 8000d04:	223c      	movs	r2, #60	; 0x3c
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	bf00      	nop
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <SCCB_No_Ack+0x80>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	1e5a      	subs	r2, r3, #1
 8000d10:	4904      	ldr	r1, [pc, #16]	; (8000d24 <SCCB_No_Ack+0x80>)
 8000d12:	600a      	str	r2, [r1, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d1f8      	bne.n	8000d0a <SCCB_No_Ack+0x66>
}
 8000d18:	bf00      	nop
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40020400 	.word	0x40020400
 8000d24:	2000ff80 	.word	0x2000ff80

08000d28 <SCCB_WR_Byte>:

uint8_t SCCB_WR_Byte(uint8_t dat)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
	uint8_t j,res;
	for(j=0;j<8;j++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	73fb      	strb	r3, [r7, #15]
 8000d36:	e034      	b.n	8000da2 <SCCB_WR_Byte+0x7a>
	{
		if(dat&0x80)SCCB_SDA_H;
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	da05      	bge.n	8000d4c <SCCB_WR_Byte+0x24>
 8000d40:	2201      	movs	r2, #1
 8000d42:	2102      	movs	r1, #2
 8000d44:	4833      	ldr	r0, [pc, #204]	; (8000e14 <SCCB_WR_Byte+0xec>)
 8000d46:	f003 fa17 	bl	8004178 <HAL_GPIO_WritePin>
 8000d4a:	e004      	b.n	8000d56 <SCCB_WR_Byte+0x2e>
		else SCCB_SDA_L;
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2102      	movs	r1, #2
 8000d50:	4830      	ldr	r0, [pc, #192]	; (8000e14 <SCCB_WR_Byte+0xec>)
 8000d52:	f003 fa11 	bl	8004178 <HAL_GPIO_WritePin>
		dat<<=1;
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	71fb      	strb	r3, [r7, #7]
		tickdelay = ticknumber;while(tickdelay--);
 8000d5c:	4b2e      	ldr	r3, [pc, #184]	; (8000e18 <SCCB_WR_Byte+0xf0>)
 8000d5e:	223c      	movs	r2, #60	; 0x3c
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	bf00      	nop
 8000d64:	4b2c      	ldr	r3, [pc, #176]	; (8000e18 <SCCB_WR_Byte+0xf0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	1e5a      	subs	r2, r3, #1
 8000d6a:	492b      	ldr	r1, [pc, #172]	; (8000e18 <SCCB_WR_Byte+0xf0>)
 8000d6c:	600a      	str	r2, [r1, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d1f8      	bne.n	8000d64 <SCCB_WR_Byte+0x3c>
		SCCB_SCL_H;
 8000d72:	2201      	movs	r2, #1
 8000d74:	2101      	movs	r1, #1
 8000d76:	4827      	ldr	r0, [pc, #156]	; (8000e14 <SCCB_WR_Byte+0xec>)
 8000d78:	f003 f9fe 	bl	8004178 <HAL_GPIO_WritePin>
		tickdelay = ticknumber;while(tickdelay--);
 8000d7c:	4b26      	ldr	r3, [pc, #152]	; (8000e18 <SCCB_WR_Byte+0xf0>)
 8000d7e:	223c      	movs	r2, #60	; 0x3c
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	bf00      	nop
 8000d84:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <SCCB_WR_Byte+0xf0>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	1e5a      	subs	r2, r3, #1
 8000d8a:	4923      	ldr	r1, [pc, #140]	; (8000e18 <SCCB_WR_Byte+0xf0>)
 8000d8c:	600a      	str	r2, [r1, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f8      	bne.n	8000d84 <SCCB_WR_Byte+0x5c>
		SCCB_SCL_L;
 8000d92:	2200      	movs	r2, #0
 8000d94:	2101      	movs	r1, #1
 8000d96:	481f      	ldr	r0, [pc, #124]	; (8000e14 <SCCB_WR_Byte+0xec>)
 8000d98:	f003 f9ee 	bl	8004178 <HAL_GPIO_WritePin>
	for(j=0;j<8;j++)
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	73fb      	strb	r3, [r7, #15]
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	2b07      	cmp	r3, #7
 8000da6:	d9c7      	bls.n	8000d38 <SCCB_WR_Byte+0x10>
	}
	SCCB_SDA_IN();
 8000da8:	f000 f944 	bl	8001034 <SCCB_SDA_IN>
	tickdelay = ticknumber;while(tickdelay--);
 8000dac:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <SCCB_WR_Byte+0xf0>)
 8000dae:	223c      	movs	r2, #60	; 0x3c
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	bf00      	nop
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <SCCB_WR_Byte+0xf0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	1e5a      	subs	r2, r3, #1
 8000dba:	4917      	ldr	r1, [pc, #92]	; (8000e18 <SCCB_WR_Byte+0xf0>)
 8000dbc:	600a      	str	r2, [r1, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f8      	bne.n	8000db4 <SCCB_WR_Byte+0x8c>
	SCCB_SCL_H;
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	4813      	ldr	r0, [pc, #76]	; (8000e14 <SCCB_WR_Byte+0xec>)
 8000dc8:	f003 f9d6 	bl	8004178 <HAL_GPIO_WritePin>
	tickdelay = ticknumber;while(tickdelay--);
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <SCCB_WR_Byte+0xf0>)
 8000dce:	223c      	movs	r2, #60	; 0x3c
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	bf00      	nop
 8000dd4:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <SCCB_WR_Byte+0xf0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	1e5a      	subs	r2, r3, #1
 8000dda:	490f      	ldr	r1, [pc, #60]	; (8000e18 <SCCB_WR_Byte+0xf0>)
 8000ddc:	600a      	str	r2, [r1, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1f8      	bne.n	8000dd4 <SCCB_WR_Byte+0xac>
	if(SCCB_READ_SDA)res=1;
 8000de2:	2102      	movs	r1, #2
 8000de4:	480b      	ldr	r0, [pc, #44]	; (8000e14 <SCCB_WR_Byte+0xec>)
 8000de6:	f003 f9af 	bl	8004148 <HAL_GPIO_ReadPin>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d002      	beq.n	8000df6 <SCCB_WR_Byte+0xce>
 8000df0:	2301      	movs	r3, #1
 8000df2:	73bb      	strb	r3, [r7, #14]
 8000df4:	e001      	b.n	8000dfa <SCCB_WR_Byte+0xd2>
	else res=0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	73bb      	strb	r3, [r7, #14]
	SCCB_SCL_L;
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <SCCB_WR_Byte+0xec>)
 8000e00:	f003 f9ba 	bl	8004178 <HAL_GPIO_WritePin>
	SCCB_SDA_OUT();
 8000e04:	f000 f944 	bl	8001090 <SCCB_SDA_OUT>
	return res;
 8000e08:	7bbb      	ldrb	r3, [r7, #14]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40020400 	.word	0x40020400
 8000e18:	2000ff80 	.word	0x2000ff80

08000e1c <SCCB_RD_Byte>:

uint8_t SCCB_RD_Byte(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
	uint8_t temp=0,j;
 8000e22:	2300      	movs	r3, #0
 8000e24:	71fb      	strb	r3, [r7, #7]
	SCCB_SDA_IN();
 8000e26:	f000 f905 	bl	8001034 <SCCB_SDA_IN>
	for(j=8;j>0;j--)
 8000e2a:	2308      	movs	r3, #8
 8000e2c:	71bb      	strb	r3, [r7, #6]
 8000e2e:	e02f      	b.n	8000e90 <SCCB_RD_Byte+0x74>
	{
		tickdelay = ticknumber;while(tickdelay--);
 8000e30:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <SCCB_RD_Byte+0x88>)
 8000e32:	223c      	movs	r2, #60	; 0x3c
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	bf00      	nop
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <SCCB_RD_Byte+0x88>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	1e5a      	subs	r2, r3, #1
 8000e3e:	4919      	ldr	r1, [pc, #100]	; (8000ea4 <SCCB_RD_Byte+0x88>)
 8000e40:	600a      	str	r2, [r1, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d1f8      	bne.n	8000e38 <SCCB_RD_Byte+0x1c>
	    SCCB_SCL_H;
 8000e46:	2201      	movs	r2, #1
 8000e48:	2101      	movs	r1, #1
 8000e4a:	4817      	ldr	r0, [pc, #92]	; (8000ea8 <SCCB_RD_Byte+0x8c>)
 8000e4c:	f003 f994 	bl	8004178 <HAL_GPIO_WritePin>
		temp=temp<<1;
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	71fb      	strb	r3, [r7, #7]
		if(SCCB_READ_SDA)temp++;
 8000e56:	2102      	movs	r1, #2
 8000e58:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <SCCB_RD_Byte+0x8c>)
 8000e5a:	f003 f975 	bl	8004148 <HAL_GPIO_ReadPin>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d002      	beq.n	8000e6a <SCCB_RD_Byte+0x4e>
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	3301      	adds	r3, #1
 8000e68:	71fb      	strb	r3, [r7, #7]
		tickdelay = ticknumber;while(tickdelay--);
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <SCCB_RD_Byte+0x88>)
 8000e6c:	223c      	movs	r2, #60	; 0x3c
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	bf00      	nop
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <SCCB_RD_Byte+0x88>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	1e5a      	subs	r2, r3, #1
 8000e78:	490a      	ldr	r1, [pc, #40]	; (8000ea4 <SCCB_RD_Byte+0x88>)
 8000e7a:	600a      	str	r2, [r1, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1f8      	bne.n	8000e72 <SCCB_RD_Byte+0x56>
		SCCB_SCL_L;
 8000e80:	2200      	movs	r2, #0
 8000e82:	2101      	movs	r1, #1
 8000e84:	4808      	ldr	r0, [pc, #32]	; (8000ea8 <SCCB_RD_Byte+0x8c>)
 8000e86:	f003 f977 	bl	8004178 <HAL_GPIO_WritePin>
	for(j=8;j>0;j--)
 8000e8a:	79bb      	ldrb	r3, [r7, #6]
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	71bb      	strb	r3, [r7, #6]
 8000e90:	79bb      	ldrb	r3, [r7, #6]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1cc      	bne.n	8000e30 <SCCB_RD_Byte+0x14>
	}
	SCCB_SDA_OUT();
 8000e96:	f000 f8fb 	bl	8001090 <SCCB_SDA_OUT>
	return temp;
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2000ff80 	.word	0x2000ff80
 8000ea8:	40020400 	.word	0x40020400

08000eac <SCCB_WR_Reg>:

uint8_t SCCB_WR_Reg(uint16_t reg,uint8_t data)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	460a      	mov	r2, r1
 8000eb6:	80fb      	strh	r3, [r7, #6]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	717b      	strb	r3, [r7, #5]
	uint8_t res=0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	73fb      	strb	r3, [r7, #15]
	SCCB_Start();
 8000ec0:	f7ff fe84 	bl	8000bcc <SCCB_Start>
	if(SCCB_WR_Byte(SCCB_ID_W))res=1;
 8000ec4:	2078      	movs	r0, #120	; 0x78
 8000ec6:	f7ff ff2f 	bl	8000d28 <SCCB_WR_Byte>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <SCCB_WR_Reg+0x28>
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
	tickdelay = ticknumber;while(tickdelay--);
 8000ed4:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <SCCB_WR_Reg+0xb8>)
 8000ed6:	223c      	movs	r2, #60	; 0x3c
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	bf00      	nop
 8000edc:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <SCCB_WR_Reg+0xb8>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	1e5a      	subs	r2, r3, #1
 8000ee2:	4920      	ldr	r1, [pc, #128]	; (8000f64 <SCCB_WR_Reg+0xb8>)
 8000ee4:	600a      	str	r2, [r1, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1f8      	bne.n	8000edc <SCCB_WR_Reg+0x30>
  	if(SCCB_WR_Byte(reg>>8))res=1;
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff18 	bl	8000d28 <SCCB_WR_Byte>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SCCB_WR_Reg+0x56>
 8000efe:	2301      	movs	r3, #1
 8000f00:	73fb      	strb	r3, [r7, #15]
  	tickdelay = ticknumber;while(tickdelay--);
 8000f02:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <SCCB_WR_Reg+0xb8>)
 8000f04:	223c      	movs	r2, #60	; 0x3c
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	bf00      	nop
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <SCCB_WR_Reg+0xb8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	1e5a      	subs	r2, r3, #1
 8000f10:	4914      	ldr	r1, [pc, #80]	; (8000f64 <SCCB_WR_Reg+0xb8>)
 8000f12:	600a      	str	r2, [r1, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1f8      	bne.n	8000f0a <SCCB_WR_Reg+0x5e>
	if(SCCB_WR_Byte(reg))res=1;
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff03 	bl	8000d28 <SCCB_WR_Byte>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <SCCB_WR_Reg+0x80>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
	tickdelay = ticknumber;while(tickdelay--);
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <SCCB_WR_Reg+0xb8>)
 8000f2e:	223c      	movs	r2, #60	; 0x3c
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	bf00      	nop
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <SCCB_WR_Reg+0xb8>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	1e5a      	subs	r2, r3, #1
 8000f3a:	490a      	ldr	r1, [pc, #40]	; (8000f64 <SCCB_WR_Reg+0xb8>)
 8000f3c:	600a      	str	r2, [r1, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1f8      	bne.n	8000f34 <SCCB_WR_Reg+0x88>
  	if(SCCB_WR_Byte(data))res=1;
 8000f42:	797b      	ldrb	r3, [r7, #5]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff feef 	bl	8000d28 <SCCB_WR_Byte>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SCCB_WR_Reg+0xa8>
 8000f50:	2301      	movs	r3, #1
 8000f52:	73fb      	strb	r3, [r7, #15]
  	SCCB_Stop();
 8000f54:	f7ff fe6c 	bl	8000c30 <SCCB_Stop>
  	return	res;
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000ff80 	.word	0x2000ff80

08000f68 <SCCB_RD_Reg>:

uint8_t SCCB_RD_Reg(uint16_t reg)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80fb      	strh	r3, [r7, #6]
	uint8_t val=0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	73fb      	strb	r3, [r7, #15]
	SCCB_Start();
 8000f76:	f7ff fe29 	bl	8000bcc <SCCB_Start>
	SCCB_WR_Byte(SCCB_ID_W);
 8000f7a:	2078      	movs	r0, #120	; 0x78
 8000f7c:	f7ff fed4 	bl	8000d28 <SCCB_WR_Byte>
	tickdelay = ticknumber;while(tickdelay--);
 8000f80:	4b2b      	ldr	r3, [pc, #172]	; (8001030 <SCCB_RD_Reg+0xc8>)
 8000f82:	223c      	movs	r2, #60	; 0x3c
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	bf00      	nop
 8000f88:	4b29      	ldr	r3, [pc, #164]	; (8001030 <SCCB_RD_Reg+0xc8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	1e5a      	subs	r2, r3, #1
 8000f8e:	4928      	ldr	r1, [pc, #160]	; (8001030 <SCCB_RD_Reg+0xc8>)
 8000f90:	600a      	str	r2, [r1, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1f8      	bne.n	8000f88 <SCCB_RD_Reg+0x20>
  	SCCB_WR_Byte(reg>>8);
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fec2 	bl	8000d28 <SCCB_WR_Byte>
  	tickdelay = ticknumber;while(tickdelay--);
 8000fa4:	4b22      	ldr	r3, [pc, #136]	; (8001030 <SCCB_RD_Reg+0xc8>)
 8000fa6:	223c      	movs	r2, #60	; 0x3c
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	bf00      	nop
 8000fac:	4b20      	ldr	r3, [pc, #128]	; (8001030 <SCCB_RD_Reg+0xc8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	1e5a      	subs	r2, r3, #1
 8000fb2:	491f      	ldr	r1, [pc, #124]	; (8001030 <SCCB_RD_Reg+0xc8>)
 8000fb4:	600a      	str	r2, [r1, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f8      	bne.n	8000fac <SCCB_RD_Reg+0x44>
  	SCCB_WR_Byte(reg);
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff feb2 	bl	8000d28 <SCCB_WR_Byte>
  	tickdelay = ticknumber;while(tickdelay--);
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <SCCB_RD_Reg+0xc8>)
 8000fc6:	223c      	movs	r2, #60	; 0x3c
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	bf00      	nop
 8000fcc:	4b18      	ldr	r3, [pc, #96]	; (8001030 <SCCB_RD_Reg+0xc8>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	1e5a      	subs	r2, r3, #1
 8000fd2:	4917      	ldr	r1, [pc, #92]	; (8001030 <SCCB_RD_Reg+0xc8>)
 8000fd4:	600a      	str	r2, [r1, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1f8      	bne.n	8000fcc <SCCB_RD_Reg+0x64>
	SCCB_Stop();
 8000fda:	f7ff fe29 	bl	8000c30 <SCCB_Stop>
	tickdelay = ticknumber;while(tickdelay--);
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <SCCB_RD_Reg+0xc8>)
 8000fe0:	223c      	movs	r2, #60	; 0x3c
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	bf00      	nop
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <SCCB_RD_Reg+0xc8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	1e5a      	subs	r2, r3, #1
 8000fec:	4910      	ldr	r1, [pc, #64]	; (8001030 <SCCB_RD_Reg+0xc8>)
 8000fee:	600a      	str	r2, [r1, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1f8      	bne.n	8000fe6 <SCCB_RD_Reg+0x7e>

	SCCB_Start();
 8000ff4:	f7ff fdea 	bl	8000bcc <SCCB_Start>
	SCCB_WR_Byte(SCCB_ID_R);
 8000ff8:	2079      	movs	r0, #121	; 0x79
 8000ffa:	f7ff fe95 	bl	8000d28 <SCCB_WR_Byte>
	tickdelay = ticknumber;while(tickdelay--);
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <SCCB_RD_Reg+0xc8>)
 8001000:	223c      	movs	r2, #60	; 0x3c
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	bf00      	nop
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <SCCB_RD_Reg+0xc8>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	1e5a      	subs	r2, r3, #1
 800100c:	4908      	ldr	r1, [pc, #32]	; (8001030 <SCCB_RD_Reg+0xc8>)
 800100e:	600a      	str	r2, [r1, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1f8      	bne.n	8001006 <SCCB_RD_Reg+0x9e>
  	val=SCCB_RD_Byte();
 8001014:	f7ff ff02 	bl	8000e1c <SCCB_RD_Byte>
 8001018:	4603      	mov	r3, r0
 800101a:	73fb      	strb	r3, [r7, #15]
  	SCCB_No_Ack();
 800101c:	f7ff fe42 	bl	8000ca4 <SCCB_No_Ack>
  	SCCB_Stop();
 8001020:	f7ff fe06 	bl	8000c30 <SCCB_Stop>
  	return val;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	2000ff80 	.word	0x2000ff80

08001034 <SCCB_SDA_IN>:

void SCCB_SDA_IN(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <SCCB_SDA_IN+0x54>)
 800104e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001050:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <SCCB_SDA_IN+0x54>)
 8001052:	f043 0302 	orr.w	r3, r3, #2
 8001056:	6313      	str	r3, [r2, #48]	; 0x30
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <SCCB_SDA_IN+0x54>)
 800105a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	683b      	ldr	r3, [r7, #0]
	  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001064:	2302      	movs	r3, #2
 8001066:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800106c:	2301      	movs	r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001070:	2302      	movs	r3, #2
 8001072:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	4619      	mov	r1, r3
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <SCCB_SDA_IN+0x58>)
 800107a:	f002 fec9 	bl	8003e10 <HAL_GPIO_Init>
}
 800107e:	bf00      	nop
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40020400 	.word	0x40020400

08001090 <SCCB_SDA_OUT>:

void SCCB_SDA_OUT(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	2300      	movs	r3, #0
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <SCCB_SDA_OUT+0x50>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <SCCB_SDA_OUT+0x50>)
 80010ae:	f043 0302 	orr.w	r3, r3, #2
 80010b2:	6313      	str	r3, [r2, #48]	; 0x30
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <SCCB_SDA_OUT+0x50>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	683b      	ldr	r3, [r7, #0]
	  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010c0:	2302      	movs	r3, #2
 80010c2:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c8:	2302      	movs	r3, #2
 80010ca:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	4619      	mov	r1, r3
 80010d0:	4804      	ldr	r0, [pc, #16]	; (80010e4 <SCCB_SDA_OUT+0x54>)
 80010d2:	f002 fe9d 	bl	8003e10 <HAL_GPIO_Init>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020400 	.word	0x40020400

080010e8 <SCCB_Rst>:

void SCCB_Rst(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_RESET)	;
 80010ec:	2200      	movs	r2, #0
 80010ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f2:	480b      	ldr	r0, [pc, #44]	; (8001120 <SCCB_Rst+0x38>)
 80010f4:	f003 f840 	bl	8004178 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,GPIO_PIN_RESET)	;
 80010f8:	2200      	movs	r2, #0
 80010fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010fe:	4808      	ldr	r0, [pc, #32]	; (8001120 <SCCB_Rst+0x38>)
 8001100:	f003 f83a 	bl	8004178 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001104:	200a      	movs	r0, #10
 8001106:	f000 fc15 	bl	8001934 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,GPIO_PIN_SET)	;
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001110:	4803      	ldr	r0, [pc, #12]	; (8001120 <SCCB_Rst+0x38>)
 8001112:	f003 f831 	bl	8004178 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001116:	200a      	movs	r0, #10
 8001118:	f000 fc0c 	bl	8001934 <HAL_Delay>
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40020c00 	.word	0x40020c00

08001124 <OV5640_Init>:

	0x4740, 0x20
};

void OV5640_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0

	for(uint32_t i=0;i<sizeof(ov5640_init_reg_tbl)/4;i++)
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	e010      	b.n	8001152 <OV5640_Init+0x2e>
	{
	   	SCCB_WR_Reg(ov5640_init_reg_tbl[i][0],ov5640_init_reg_tbl[i][1]);
 8001130:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <OV5640_Init+0x40>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8001138:	490a      	ldr	r1, [pc, #40]	; (8001164 <OV5640_Init+0x40>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	440b      	add	r3, r1
 8001140:	885b      	ldrh	r3, [r3, #2]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	4619      	mov	r1, r3
 8001146:	4610      	mov	r0, r2
 8001148:	f7ff feb0 	bl	8000eac <SCCB_WR_Reg>
	for(uint32_t i=0;i<sizeof(ov5640_init_reg_tbl)/4;i++)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3301      	adds	r3, #1
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2bce      	cmp	r3, #206	; 0xce
 8001156:	d9eb      	bls.n	8001130 <OV5640_Init+0xc>
 	}

}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	0800a758 	.word	0x0800a758

08001168 <OV5640_RGB565_Mode>:
	0x5001, 0xA3,
	0x3503, 0x00
};

void OV5640_RGB565_Mode(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
	uint16_t i=0;
 800116e:	2300      	movs	r3, #0
 8001170:	80fb      	strh	r3, [r7, #6]
	for(i=0;i<(sizeof(ov5640_rgb565_reg_tbl)/4);i++)
 8001172:	2300      	movs	r3, #0
 8001174:	80fb      	strh	r3, [r7, #6]
 8001176:	e010      	b.n	800119a <OV5640_RGB565_Mode+0x32>
	{
		SCCB_WR_Reg(ov5640_rgb565_reg_tbl[i][0],ov5640_rgb565_reg_tbl[i][1]);
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	4a0c      	ldr	r2, [pc, #48]	; (80011ac <OV5640_RGB565_Mode+0x44>)
 800117c:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	490a      	ldr	r1, [pc, #40]	; (80011ac <OV5640_RGB565_Mode+0x44>)
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	440b      	add	r3, r1
 8001188:	885b      	ldrh	r3, [r3, #2]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	4619      	mov	r1, r3
 800118e:	4610      	mov	r0, r2
 8001190:	f7ff fe8c 	bl	8000eac <SCCB_WR_Reg>
	for(i=0;i<(sizeof(ov5640_rgb565_reg_tbl)/4);i++)
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	3301      	adds	r3, #1
 8001198:	80fb      	strh	r3, [r7, #6]
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	2b2c      	cmp	r3, #44	; 0x2c
 800119e:	d9eb      	bls.n	8001178 <OV5640_RGB565_Mode+0x10>
	}
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	0800aa94 	.word	0x0800aa94

080011b0 <OV5640_OutSize_Set>:
	SCCB_WR_Reg(0x3212,0x13);
	SCCB_WR_Reg(0x3212,0xa3);
}

uint8_t OV5640_OutSize_Set(uint16_t offx,uint16_t offy,uint16_t width,uint16_t height)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4604      	mov	r4, r0
 80011b8:	4608      	mov	r0, r1
 80011ba:	4611      	mov	r1, r2
 80011bc:	461a      	mov	r2, r3
 80011be:	4623      	mov	r3, r4
 80011c0:	80fb      	strh	r3, [r7, #6]
 80011c2:	4603      	mov	r3, r0
 80011c4:	80bb      	strh	r3, [r7, #4]
 80011c6:	460b      	mov	r3, r1
 80011c8:	807b      	strh	r3, [r7, #2]
 80011ca:	4613      	mov	r3, r2
 80011cc:	803b      	strh	r3, [r7, #0]
    SCCB_WR_Reg(0X3212,0X03);
 80011ce:	2103      	movs	r1, #3
 80011d0:	f243 2012 	movw	r0, #12818	; 0x3212
 80011d4:	f7ff fe6a 	bl	8000eac <SCCB_WR_Reg>
    SCCB_WR_Reg(0x3808,width>>8);
 80011d8:	887b      	ldrh	r3, [r7, #2]
 80011da:	0a1b      	lsrs	r3, r3, #8
 80011dc:	b29b      	uxth	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	4619      	mov	r1, r3
 80011e2:	f643 0008 	movw	r0, #14344	; 0x3808
 80011e6:	f7ff fe61 	bl	8000eac <SCCB_WR_Reg>
    SCCB_WR_Reg(0x3809,width&0xff);
 80011ea:	887b      	ldrh	r3, [r7, #2]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	4619      	mov	r1, r3
 80011f0:	f643 0009 	movw	r0, #14345	; 0x3809
 80011f4:	f7ff fe5a 	bl	8000eac <SCCB_WR_Reg>
    SCCB_WR_Reg(0x380a,height>>8);
 80011f8:	883b      	ldrh	r3, [r7, #0]
 80011fa:	0a1b      	lsrs	r3, r3, #8
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	4619      	mov	r1, r3
 8001202:	f643 000a 	movw	r0, #14346	; 0x380a
 8001206:	f7ff fe51 	bl	8000eac <SCCB_WR_Reg>
    SCCB_WR_Reg(0x380b,height&0xff);
 800120a:	883b      	ldrh	r3, [r7, #0]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4619      	mov	r1, r3
 8001210:	f643 000b 	movw	r0, #14347	; 0x380b
 8001214:	f7ff fe4a 	bl	8000eac <SCCB_WR_Reg>

    SCCB_WR_Reg(0x3810,offx>>8);
 8001218:	88fb      	ldrh	r3, [r7, #6]
 800121a:	0a1b      	lsrs	r3, r3, #8
 800121c:	b29b      	uxth	r3, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	4619      	mov	r1, r3
 8001222:	f643 0010 	movw	r0, #14352	; 0x3810
 8001226:	f7ff fe41 	bl	8000eac <SCCB_WR_Reg>
    SCCB_WR_Reg(0x3811,offx&0xff);
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	4619      	mov	r1, r3
 8001230:	f643 0011 	movw	r0, #14353	; 0x3811
 8001234:	f7ff fe3a 	bl	8000eac <SCCB_WR_Reg>

    SCCB_WR_Reg(0x3812,offy>>8);
 8001238:	88bb      	ldrh	r3, [r7, #4]
 800123a:	0a1b      	lsrs	r3, r3, #8
 800123c:	b29b      	uxth	r3, r3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	4619      	mov	r1, r3
 8001242:	f643 0012 	movw	r0, #14354	; 0x3812
 8001246:	f7ff fe31 	bl	8000eac <SCCB_WR_Reg>
    SCCB_WR_Reg(0x3813,offy&0xff);
 800124a:	88bb      	ldrh	r3, [r7, #4]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	4619      	mov	r1, r3
 8001250:	f643 0013 	movw	r0, #14355	; 0x3813
 8001254:	f7ff fe2a 	bl	8000eac <SCCB_WR_Reg>

    SCCB_WR_Reg(0X3212,0X13);
 8001258:	2113      	movs	r1, #19
 800125a:	f243 2012 	movw	r0, #12818	; 0x3212
 800125e:	f7ff fe25 	bl	8000eac <SCCB_WR_Reg>
    SCCB_WR_Reg(0X3212,0Xa3);
 8001262:	21a3      	movs	r1, #163	; 0xa3
 8001264:	f243 2012 	movw	r0, #12818	; 0x3212
 8001268:	f7ff fe20 	bl	8000eac <SCCB_WR_Reg>
	return 0;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	bd90      	pop	{r4, r7, pc}
	...

08001278 <OV5640_Focus_Init>:
	0x93, 0xf5, 0x82, 0x8e, 0x83, 0x22, 0x78, 0x7f, 0xe4, 0xf6, 0xd8, 0xfd, 0x75, 0x81, 0xcd, 0x02, //0x8fd0,
	0x0c, 0x98, 0x8f, 0x82, 0x8e, 0x83, 0x75, 0xf0, 0x04, 0xed, 0x02, 0x06, 0xa5                   //0x8fe0
};
//return 0: ok
uint8_t OV5640_Focus_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
	uint16_t i;
	uint16_t addr=0x8000;
 800127e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001282:	80bb      	strh	r3, [r7, #4]
	uint8_t state=0x8F;
 8001284:	238f      	movs	r3, #143	; 0x8f
 8001286:	70fb      	strb	r3, [r7, #3]
	SCCB_WR_Reg(0x3000, 0x20);
 8001288:	2120      	movs	r1, #32
 800128a:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800128e:	f7ff fe0d 	bl	8000eac <SCCB_WR_Reg>
	for(i=0;i<sizeof(OV5640_AF_Config);i++)
 8001292:	2300      	movs	r3, #0
 8001294:	80fb      	strh	r3, [r7, #6]
 8001296:	e00d      	b.n	80012b4 <OV5640_Focus_Init+0x3c>
	{
		SCCB_WR_Reg(addr,OV5640_AF_Config[i]);
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	4a2d      	ldr	r2, [pc, #180]	; (8001350 <OV5640_Focus_Init+0xd8>)
 800129c:	5cd2      	ldrb	r2, [r2, r3]
 800129e:	88bb      	ldrh	r3, [r7, #4]
 80012a0:	4611      	mov	r1, r2
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fe02 	bl	8000eac <SCCB_WR_Reg>
		addr++;
 80012a8:	88bb      	ldrh	r3, [r7, #4]
 80012aa:	3301      	adds	r3, #1
 80012ac:	80bb      	strh	r3, [r7, #4]
	for(i=0;i<sizeof(OV5640_AF_Config);i++)
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	3301      	adds	r3, #1
 80012b2:	80fb      	strh	r3, [r7, #6]
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	f640 72ec 	movw	r2, #4076	; 0xfec
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d9ec      	bls.n	8001298 <OV5640_Focus_Init+0x20>
	}
	SCCB_WR_Reg(0x3022,0x00);
 80012be:	2100      	movs	r1, #0
 80012c0:	f243 0022 	movw	r0, #12322	; 0x3022
 80012c4:	f7ff fdf2 	bl	8000eac <SCCB_WR_Reg>
	SCCB_WR_Reg(0x3023,0x00);
 80012c8:	2100      	movs	r1, #0
 80012ca:	f243 0023 	movw	r0, #12323	; 0x3023
 80012ce:	f7ff fded 	bl	8000eac <SCCB_WR_Reg>
	SCCB_WR_Reg(0x3024,0x00);
 80012d2:	2100      	movs	r1, #0
 80012d4:	f243 0024 	movw	r0, #12324	; 0x3024
 80012d8:	f7ff fde8 	bl	8000eac <SCCB_WR_Reg>
	SCCB_WR_Reg(0x3025,0x00);
 80012dc:	2100      	movs	r1, #0
 80012de:	f243 0025 	movw	r0, #12325	; 0x3025
 80012e2:	f7ff fde3 	bl	8000eac <SCCB_WR_Reg>
	SCCB_WR_Reg(0x3026,0x00);
 80012e6:	2100      	movs	r1, #0
 80012e8:	f243 0026 	movw	r0, #12326	; 0x3026
 80012ec:	f7ff fdde 	bl	8000eac <SCCB_WR_Reg>
	SCCB_WR_Reg(0x3027,0x00);
 80012f0:	2100      	movs	r1, #0
 80012f2:	f243 0027 	movw	r0, #12327	; 0x3027
 80012f6:	f7ff fdd9 	bl	8000eac <SCCB_WR_Reg>
	SCCB_WR_Reg(0x3028,0x00);
 80012fa:	2100      	movs	r1, #0
 80012fc:	f243 0028 	movw	r0, #12328	; 0x3028
 8001300:	f7ff fdd4 	bl	8000eac <SCCB_WR_Reg>
	SCCB_WR_Reg(0x3029,0x7f);
 8001304:	217f      	movs	r1, #127	; 0x7f
 8001306:	f243 0029 	movw	r0, #12329	; 0x3029
 800130a:	f7ff fdcf 	bl	8000eac <SCCB_WR_Reg>
	SCCB_WR_Reg(0x3000,0x00);
 800130e:	2100      	movs	r1, #0
 8001310:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8001314:	f7ff fdca 	bl	8000eac <SCCB_WR_Reg>
	i=0;
 8001318:	2300      	movs	r3, #0
 800131a:	80fb      	strh	r3, [r7, #6]
	do
	{
		state=SCCB_RD_Reg(0x3029);
 800131c:	f243 0029 	movw	r0, #12329	; 0x3029
 8001320:	f7ff fe22 	bl	8000f68 <SCCB_RD_Reg>
 8001324:	4603      	mov	r3, r0
 8001326:	70fb      	strb	r3, [r7, #3]
		HAL_Delay(5);
 8001328:	2005      	movs	r0, #5
 800132a:	f000 fb03 	bl	8001934 <HAL_Delay>
		i++;
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	3301      	adds	r3, #1
 8001332:	80fb      	strh	r3, [r7, #6]
		if(i>1000)return 1;
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800133a:	d901      	bls.n	8001340 <OV5640_Focus_Init+0xc8>
 800133c:	2301      	movs	r3, #1
 800133e:	e003      	b.n	8001348 <OV5640_Focus_Init+0xd0>
	}while(state!=0x70);
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	2b70      	cmp	r3, #112	; 0x70
 8001344:	d1ea      	bne.n	800131c <OV5640_Focus_Init+0xa4>
	return 0;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	0800ab48 	.word	0x0800ab48

08001354 <OV5640_Focus_Single>:
//Single focus;return 0: ok
uint8_t OV5640_Focus_Single(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
	uint8_t temp;
	uint16_t retry=0;
 800135a:	2300      	movs	r3, #0
 800135c:	80fb      	strh	r3, [r7, #6]
	SCCB_WR_Reg(0x3022,0x03);
 800135e:	2103      	movs	r1, #3
 8001360:	f243 0022 	movw	r0, #12322	; 0x3022
 8001364:	f7ff fda2 	bl	8000eac <SCCB_WR_Reg>
	while(1)
	{
		retry++;
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	3301      	adds	r3, #1
 800136c:	80fb      	strh	r3, [r7, #6]
		temp=SCCB_RD_Reg(0x3029);
 800136e:	f243 0029 	movw	r0, #12329	; 0x3029
 8001372:	f7ff fdf9 	bl	8000f68 <SCCB_RD_Reg>
 8001376:	4603      	mov	r3, r0
 8001378:	717b      	strb	r3, [r7, #5]
		if(temp==0x10)break;
 800137a:	797b      	ldrb	r3, [r7, #5]
 800137c:	2b10      	cmp	r3, #16
 800137e:	d008      	beq.n	8001392 <OV5640_Focus_Single+0x3e>
		HAL_Delay(5);
 8001380:	2005      	movs	r0, #5
 8001382:	f000 fad7 	bl	8001934 <HAL_Delay>
		if(retry>1000)return 1;
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800138c:	d9ec      	bls.n	8001368 <OV5640_Focus_Single+0x14>
 800138e:	2301      	movs	r3, #1
 8001390:	e001      	b.n	8001396 <OV5640_Focus_Single+0x42>
		if(temp==0x10)break;
 8001392:	bf00      	nop
	}
	return 0;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <ov5640_speed_ctrl>:
	}while(temp!=0x00);
	return 0;
}

void ov5640_speed_ctrl(void)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	af00      	add	r7, sp, #0
	SCCB_WR_Reg(0x3035 ,0x81);
 80013a2:	2181      	movs	r1, #129	; 0x81
 80013a4:	f243 0035 	movw	r0, #12341	; 0x3035
 80013a8:	f7ff fd80 	bl	8000eac <SCCB_WR_Reg>
	//SCCB_WR_Reg(0x3037 ,0x02);
	SCCB_WR_Reg(0x3037 ,0x04);
 80013ac:	2104      	movs	r1, #4
 80013ae:	f243 0037 	movw	r0, #12343	; 0x3037
 80013b2:	f7ff fd7b 	bl	8000eac <SCCB_WR_Reg>
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_MspInit+0x4c>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <HAL_MspInit+0x4c>)
 80013cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d0:	6453      	str	r3, [r2, #68]	; 0x44
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <HAL_MspInit+0x4c>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_MspInit+0x4c>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	4a08      	ldr	r2, [pc, #32]	; (8001408 <HAL_MspInit+0x4c>)
 80013e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ec:	6413      	str	r3, [r2, #64]	; 0x40
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_MspInit+0x4c>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800

0800140c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08c      	sub	sp, #48	; 0x30
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a6f      	ldr	r2, [pc, #444]	; (80015e8 <HAL_DCMI_MspInit+0x1dc>)
 800142a:	4293      	cmp	r3, r2
 800142c:	f040 80d7 	bne.w	80015de <HAL_DCMI_MspInit+0x1d2>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001430:	2300      	movs	r3, #0
 8001432:	61bb      	str	r3, [r7, #24]
 8001434:	4b6d      	ldr	r3, [pc, #436]	; (80015ec <HAL_DCMI_MspInit+0x1e0>)
 8001436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001438:	4a6c      	ldr	r2, [pc, #432]	; (80015ec <HAL_DCMI_MspInit+0x1e0>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6353      	str	r3, [r2, #52]	; 0x34
 8001440:	4b6a      	ldr	r3, [pc, #424]	; (80015ec <HAL_DCMI_MspInit+0x1e0>)
 8001442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	4b66      	ldr	r3, [pc, #408]	; (80015ec <HAL_DCMI_MspInit+0x1e0>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	4a65      	ldr	r2, [pc, #404]	; (80015ec <HAL_DCMI_MspInit+0x1e0>)
 8001456:	f043 0310 	orr.w	r3, r3, #16
 800145a:	6313      	str	r3, [r2, #48]	; 0x30
 800145c:	4b63      	ldr	r3, [pc, #396]	; (80015ec <HAL_DCMI_MspInit+0x1e0>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	4b5f      	ldr	r3, [pc, #380]	; (80015ec <HAL_DCMI_MspInit+0x1e0>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	4a5e      	ldr	r2, [pc, #376]	; (80015ec <HAL_DCMI_MspInit+0x1e0>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6313      	str	r3, [r2, #48]	; 0x30
 8001478:	4b5c      	ldr	r3, [pc, #368]	; (80015ec <HAL_DCMI_MspInit+0x1e0>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	4b58      	ldr	r3, [pc, #352]	; (80015ec <HAL_DCMI_MspInit+0x1e0>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	4a57      	ldr	r2, [pc, #348]	; (80015ec <HAL_DCMI_MspInit+0x1e0>)
 800148e:	f043 0304 	orr.w	r3, r3, #4
 8001492:	6313      	str	r3, [r2, #48]	; 0x30
 8001494:	4b55      	ldr	r3, [pc, #340]	; (80015ec <HAL_DCMI_MspInit+0x1e0>)
 8001496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	4b51      	ldr	r3, [pc, #324]	; (80015ec <HAL_DCMI_MspInit+0x1e0>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	4a50      	ldr	r2, [pc, #320]	; (80015ec <HAL_DCMI_MspInit+0x1e0>)
 80014aa:	f043 0302 	orr.w	r3, r3, #2
 80014ae:	6313      	str	r3, [r2, #48]	; 0x30
 80014b0:	4b4e      	ldr	r3, [pc, #312]	; (80015ec <HAL_DCMI_MspInit+0x1e0>)
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 80014bc:	2373      	movs	r3, #115	; 0x73
 80014be:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80014cc:	230d      	movs	r3, #13
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	4619      	mov	r1, r3
 80014d6:	4846      	ldr	r0, [pc, #280]	; (80015f0 <HAL_DCMI_MspInit+0x1e4>)
 80014d8:	f002 fc9a 	bl	8003e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014dc:	2310      	movs	r3, #16
 80014de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80014ec:	230d      	movs	r3, #13
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	4619      	mov	r1, r3
 80014f6:	483f      	ldr	r0, [pc, #252]	; (80015f4 <HAL_DCMI_MspInit+0x1e8>)
 80014f8:	f002 fc8a 	bl	8003e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014fc:	2340      	movs	r3, #64	; 0x40
 80014fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800150c:	230d      	movs	r3, #13
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	4619      	mov	r1, r3
 8001516:	4837      	ldr	r0, [pc, #220]	; (80015f4 <HAL_DCMI_MspInit+0x1e8>)
 8001518:	f002 fc7a 	bl	8003e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800151c:	23c0      	movs	r3, #192	; 0xc0
 800151e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800152c:	230d      	movs	r3, #13
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	4830      	ldr	r0, [pc, #192]	; (80015f8 <HAL_DCMI_MspInit+0x1ec>)
 8001538:	f002 fc6a 	bl	8003e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800153c:	23c0      	movs	r3, #192	; 0xc0
 800153e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800154c:	230d      	movs	r3, #13
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4619      	mov	r1, r3
 8001556:	4829      	ldr	r0, [pc, #164]	; (80015fc <HAL_DCMI_MspInit+0x1f0>)
 8001558:	f002 fc5a 	bl	8003e10 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 800155c:	4b28      	ldr	r3, [pc, #160]	; (8001600 <HAL_DCMI_MspInit+0x1f4>)
 800155e:	4a29      	ldr	r2, [pc, #164]	; (8001604 <HAL_DCMI_MspInit+0x1f8>)
 8001560:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8001562:	4b27      	ldr	r3, [pc, #156]	; (8001600 <HAL_DCMI_MspInit+0x1f4>)
 8001564:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001568:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800156a:	4b25      	ldr	r3, [pc, #148]	; (8001600 <HAL_DCMI_MspInit+0x1f4>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001570:	4b23      	ldr	r3, [pc, #140]	; (8001600 <HAL_DCMI_MspInit+0x1f4>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_DISABLE;
 8001576:	4b22      	ldr	r3, [pc, #136]	; (8001600 <HAL_DCMI_MspInit+0x1f4>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800157c:	4b20      	ldr	r3, [pc, #128]	; (8001600 <HAL_DCMI_MspInit+0x1f4>)
 800157e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001582:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001584:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <HAL_DCMI_MspInit+0x1f4>)
 8001586:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800158a:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 800158c:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <HAL_DCMI_MspInit+0x1f4>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8001592:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_DCMI_MspInit+0x1f4>)
 8001594:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001598:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_DCMI_MspInit+0x1f4>)
 800159c:	2204      	movs	r2, #4
 800159e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80015a0:	4b17      	ldr	r3, [pc, #92]	; (8001600 <HAL_DCMI_MspInit+0x1f4>)
 80015a2:	2203      	movs	r2, #3
 80015a4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <HAL_DCMI_MspInit+0x1f4>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <HAL_DCMI_MspInit+0x1f4>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80015b2:	4813      	ldr	r0, [pc, #76]	; (8001600 <HAL_DCMI_MspInit+0x1f4>)
 80015b4:	f000 fe36 	bl	8002224 <HAL_DMA_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_DCMI_MspInit+0x1b6>
    {
      Error_Handler();
 80015be:	f7ff fafd 	bl	8000bbc <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <HAL_DCMI_MspInit+0x1f4>)
 80015c6:	639a      	str	r2, [r3, #56]	; 0x38
 80015c8:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <HAL_DCMI_MspInit+0x1f4>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	204e      	movs	r0, #78	; 0x4e
 80015d4:	f000 faad 	bl	8001b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80015d8:	204e      	movs	r0, #78	; 0x4e
 80015da:	f000 fac6 	bl	8001b6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80015de:	bf00      	nop
 80015e0:	3730      	adds	r7, #48	; 0x30
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	50050000 	.word	0x50050000
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40020000 	.word	0x40020000
 80015f8:	40020800 	.word	0x40020800
 80015fc:	40020400 	.word	0x40020400
 8001600:	2000043c 	.word	0x2000043c
 8001604:	40026428 	.word	0x40026428

08001608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a35      	ldr	r2, [pc, #212]	; (80016fc <HAL_UART_MspInit+0xf4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d164      	bne.n	80016f4 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	4b34      	ldr	r3, [pc, #208]	; (8001700 <HAL_UART_MspInit+0xf8>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	4a33      	ldr	r2, [pc, #204]	; (8001700 <HAL_UART_MspInit+0xf8>)
 8001634:	f043 0310 	orr.w	r3, r3, #16
 8001638:	6453      	str	r3, [r2, #68]	; 0x44
 800163a:	4b31      	ldr	r3, [pc, #196]	; (8001700 <HAL_UART_MspInit+0xf8>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f003 0310 	and.w	r3, r3, #16
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b2d      	ldr	r3, [pc, #180]	; (8001700 <HAL_UART_MspInit+0xf8>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a2c      	ldr	r2, [pc, #176]	; (8001700 <HAL_UART_MspInit+0xf8>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <HAL_UART_MspInit+0xf8>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001662:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001670:	2302      	movs	r3, #2
 8001672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001674:	2307      	movs	r3, #7
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4619      	mov	r1, r3
 800167e:	4821      	ldr	r0, [pc, #132]	; (8001704 <HAL_UART_MspInit+0xfc>)
 8001680:	f002 fbc6 	bl	8003e10 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001684:	4b20      	ldr	r3, [pc, #128]	; (8001708 <HAL_UART_MspInit+0x100>)
 8001686:	4a21      	ldr	r2, [pc, #132]	; (800170c <HAL_UART_MspInit+0x104>)
 8001688:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800168a:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <HAL_UART_MspInit+0x100>)
 800168c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001690:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001692:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <HAL_UART_MspInit+0x100>)
 8001694:	2240      	movs	r2, #64	; 0x40
 8001696:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_UART_MspInit+0x100>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800169e:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <HAL_UART_MspInit+0x100>)
 80016a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016a4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <HAL_UART_MspInit+0x100>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ac:	4b16      	ldr	r3, [pc, #88]	; (8001708 <HAL_UART_MspInit+0x100>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_UART_MspInit+0x100>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <HAL_UART_MspInit+0x100>)
 80016ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016be:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <HAL_UART_MspInit+0x100>)
 80016c2:	2204      	movs	r2, #4
 80016c4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <HAL_UART_MspInit+0x100>)
 80016c8:	2203      	movs	r2, #3
 80016ca:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80016cc:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <HAL_UART_MspInit+0x100>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80016d2:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <HAL_UART_MspInit+0x100>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80016d8:	480b      	ldr	r0, [pc, #44]	; (8001708 <HAL_UART_MspInit+0x100>)
 80016da:	f000 fda3 	bl	8002224 <HAL_DMA_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 80016e4:	f7ff fa6a 	bl	8000bbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a07      	ldr	r2, [pc, #28]	; (8001708 <HAL_UART_MspInit+0x100>)
 80016ec:	635a      	str	r2, [r3, #52]	; 0x34
 80016ee:	4a06      	ldr	r2, [pc, #24]	; (8001708 <HAL_UART_MspInit+0x100>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016f4:	bf00      	nop
 80016f6:	3728      	adds	r7, #40	; 0x28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40011000 	.word	0x40011000
 8001700:	40023800 	.word	0x40023800
 8001704:	40020000 	.word	0x40020000
 8001708:	2000049c 	.word	0x2000049c
 800170c:	400264b8 	.word	0x400264b8

08001710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <MemManage_Handler+0x4>

0800172a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <BusFault_Handler+0x4>

08001730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <UsageFault_Handler+0x4>

08001736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001764:	f000 f8c6 	bl	80018f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}

0800176c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <USART1_IRQHandler+0x10>)
 8001772:	f004 fcc9 	bl	8006108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	2000053c 	.word	0x2000053c

08001780 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <DMA2_Stream1_IRQHandler+0x10>)
 8001786:	f000 ff43 	bl	8002610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	2000043c 	.word	0x2000043c

08001794 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <OTG_FS_IRQHandler+0x10>)
 800179a:	f002 fe56 	bl	800444a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20011458 	.word	0x20011458

080017a8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <DMA2_Stream7_IRQHandler+0x10>)
 80017ae:	f000 ff2f 	bl	8002610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000049c 	.word	0x2000049c

080017bc <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <DCMI_IRQHandler+0x10>)
 80017c2:	f000 fae9 	bl	8001d98 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200004fc 	.word	0x200004fc

080017d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <SystemInit+0x28>)
 80017d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017da:	4a07      	ldr	r2, [pc, #28]	; (80017f8 <SystemInit+0x28>)
 80017dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <SystemInit+0x28>)
 80017e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017ea:	609a      	str	r2, [r3, #8]
#endif
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001834 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001800:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001802:	e003      	b.n	800180c <LoopCopyDataInit>

08001804 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001806:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001808:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800180a:	3104      	adds	r1, #4

0800180c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800180c:	480b      	ldr	r0, [pc, #44]	; (800183c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001810:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001812:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001814:	d3f6      	bcc.n	8001804 <CopyDataInit>
  ldr  r2, =_sbss
 8001816:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001818:	e002      	b.n	8001820 <LoopFillZerobss>

0800181a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800181a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800181c:	f842 3b04 	str.w	r3, [r2], #4

08001820 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001822:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001824:	d3f9      	bcc.n	800181a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001826:	f7ff ffd3 	bl	80017d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800182a:	f008 ff39 	bl	800a6a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182e:	f7fe fe47 	bl	80004c0 <main>
  bx  lr    
 8001832:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001834:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001838:	0800bb68 	.word	0x0800bb68
  ldr  r0, =_sdata
 800183c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001840:	20000184 	.word	0x20000184
  ldr  r2, =_sbss
 8001844:	20000184 	.word	0x20000184
  ldr  r3, = _ebss
 8001848:	20011860 	.word	0x20011860

0800184c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800184c:	e7fe      	b.n	800184c <ADC_IRQHandler>
	...

08001850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001854:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0d      	ldr	r2, [pc, #52]	; (8001890 <HAL_Init+0x40>)
 800185a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800185e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <HAL_Init+0x40>)
 8001866:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800186a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <HAL_Init+0x40>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a07      	ldr	r2, [pc, #28]	; (8001890 <HAL_Init+0x40>)
 8001872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001876:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001878:	2003      	movs	r0, #3
 800187a:	f000 f94f 	bl	8001b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800187e:	2000      	movs	r0, #0
 8001880:	f000 f808 	bl	8001894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001884:	f7ff fd9a 	bl	80013bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40023c00 	.word	0x40023c00

08001894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_InitTick+0x54>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_InitTick+0x58>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	4619      	mov	r1, r3
 80018a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 f967 	bl	8001b86 <HAL_SYSTICK_Config>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e00e      	b.n	80018e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b0f      	cmp	r3, #15
 80018c6:	d80a      	bhi.n	80018de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c8:	2200      	movs	r2, #0
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	f000 f92f 	bl	8001b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d4:	4a06      	ldr	r2, [pc, #24]	; (80018f0 <HAL_InitTick+0x5c>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	e000      	b.n	80018e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000004 	.word	0x20000004
 80018ec:	2000000c 	.word	0x2000000c
 80018f0:	20000008 	.word	0x20000008

080018f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_IncTick+0x20>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_IncTick+0x24>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4413      	add	r3, r2
 8001904:	4a04      	ldr	r2, [pc, #16]	; (8001918 <HAL_IncTick+0x24>)
 8001906:	6013      	str	r3, [r2, #0]
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	2000000c 	.word	0x2000000c
 8001918:	2000ff84 	.word	0x2000ff84

0800191c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return uwTick;
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <HAL_GetTick+0x14>)
 8001922:	681b      	ldr	r3, [r3, #0]
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	2000ff84 	.word	0x2000ff84

08001934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800193c:	f7ff ffee 	bl	800191c <HAL_GetTick>
 8001940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194c:	d005      	beq.n	800195a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800194e:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <HAL_Delay+0x44>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800195a:	bf00      	nop
 800195c:	f7ff ffde 	bl	800191c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	429a      	cmp	r2, r3
 800196a:	d8f7      	bhi.n	800195c <HAL_Delay+0x28>
  {
  }
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	2000000c 	.word	0x2000000c

0800197c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001998:	4013      	ands	r3, r2
 800199a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ae:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	60d3      	str	r3, [r2, #12]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <__NVIC_GetPriorityGrouping+0x18>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	f003 0307 	and.w	r3, r3, #7
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	db0b      	blt.n	8001a0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	f003 021f 	and.w	r2, r3, #31
 80019f8:	4907      	ldr	r1, [pc, #28]	; (8001a18 <__NVIC_EnableIRQ+0x38>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	095b      	lsrs	r3, r3, #5
 8001a00:	2001      	movs	r0, #1
 8001a02:	fa00 f202 	lsl.w	r2, r0, r2
 8001a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000e100 	.word	0xe000e100

08001a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	6039      	str	r1, [r7, #0]
 8001a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	db0a      	blt.n	8001a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	490c      	ldr	r1, [pc, #48]	; (8001a68 <__NVIC_SetPriority+0x4c>)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	0112      	lsls	r2, r2, #4
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	440b      	add	r3, r1
 8001a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a44:	e00a      	b.n	8001a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4908      	ldr	r1, [pc, #32]	; (8001a6c <__NVIC_SetPriority+0x50>)
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	3b04      	subs	r3, #4
 8001a54:	0112      	lsls	r2, r2, #4
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	440b      	add	r3, r1
 8001a5a:	761a      	strb	r2, [r3, #24]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000e100 	.word	0xe000e100
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	; 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f1c3 0307 	rsb	r3, r3, #7
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	bf28      	it	cs
 8001a8e:	2304      	movcs	r3, #4
 8001a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3304      	adds	r3, #4
 8001a96:	2b06      	cmp	r3, #6
 8001a98:	d902      	bls.n	8001aa0 <NVIC_EncodePriority+0x30>
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3b03      	subs	r3, #3
 8001a9e:	e000      	b.n	8001aa2 <NVIC_EncodePriority+0x32>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43da      	mvns	r2, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac2:	43d9      	mvns	r1, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	4313      	orrs	r3, r2
         );
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3724      	adds	r7, #36	; 0x24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae8:	d301      	bcc.n	8001aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aea:	2301      	movs	r3, #1
 8001aec:	e00f      	b.n	8001b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aee:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <SysTick_Config+0x40>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001af6:	210f      	movs	r1, #15
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295
 8001afc:	f7ff ff8e 	bl	8001a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <SysTick_Config+0x40>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b06:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <SysTick_Config+0x40>)
 8001b08:	2207      	movs	r2, #7
 8001b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	e000e010 	.word	0xe000e010

08001b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ff29 	bl	800197c <__NVIC_SetPriorityGrouping>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	4603      	mov	r3, r0
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b44:	f7ff ff3e 	bl	80019c4 <__NVIC_GetPriorityGrouping>
 8001b48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	6978      	ldr	r0, [r7, #20]
 8001b50:	f7ff ff8e 	bl	8001a70 <NVIC_EncodePriority>
 8001b54:	4602      	mov	r2, r0
 8001b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff5d 	bl	8001a1c <__NVIC_SetPriority>
}
 8001b62:	bf00      	nop
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff31 	bl	80019e0 <__NVIC_EnableIRQ>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ffa2 	bl	8001ad8 <SysTick_Config>
 8001b94:	4603      	mov	r3, r0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af02      	add	r7, sp, #8
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_DCMI_Start_DMA+0x20>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e086      	b.n	8001cce <HAL_DCMI_Start_DMA+0x12e>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bde:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0202 	bic.w	r2, r2, #2
 8001bee:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6819      	ldr	r1, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c04:	4a34      	ldr	r2, [pc, #208]	; (8001cd8 <HAL_DCMI_Start_DMA+0x138>)
 8001c06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0c:	4a33      	ldr	r2, [pc, #204]	; (8001cdc <HAL_DCMI_Start_DMA+0x13c>)
 8001c0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c14:	2200      	movs	r2, #0
 8001c16:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c2a:	d20a      	bcs.n	8001c42 <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	3328      	adds	r3, #40	; 0x28
 8001c36:	4619      	mov	r1, r3
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	f000 fbfe 	bl	800243c <HAL_DMA_Start_IT>
 8001c40:	e038      	b.n	8001cb4 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c46:	4a24      	ldr	r2, [pc, #144]	; (8001cd8 <HAL_DCMI_Start_DMA+0x138>)
 8001c48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8001c5c:	e009      	b.n	8001c72 <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c62:	085a      	lsrs	r2, r3, #1
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	005a      	lsls	r2, r3, #1
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c7a:	d2f0      	bcs.n	8001c5e <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c80:	1e9a      	subs	r2, r3, #2
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	4413      	add	r3, r2
 8001c98:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	3328      	adds	r3, #40	; 0x28
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	f000 ff26 	bl	8002b00 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	08001ff3 	.word	0x08001ff3
 8001cdc:	0800211d 	.word	0x0800211d

08001ce0 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8001ce8:	4b29      	ldr	r3, [pc, #164]	; (8001d90 <HAL_DCMI_Stop+0xb0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	085b      	lsrs	r3, r3, #1
 8001cee:	4a29      	ldr	r2, [pc, #164]	; (8001d94 <HAL_DCMI_Stop+0xb4>)
 8001cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf4:	089b      	lsrs	r3, r3, #2
 8001cf6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_DCMI_Stop+0x2a>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e03e      	b.n	8001d88 <HAL_DCMI_Stop+0xa8>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2202      	movs	r2, #2
 8001d16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0201 	bic.w	r2, r2, #1
 8001d28:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	1e5a      	subs	r2, r3, #1
 8001d2e:	60ba      	str	r2, [r7, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d108      	bne.n	8001d46 <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d38:	f043 0220 	orr.w	r2, r3, #32
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	63da      	str	r2, [r3, #60]	; 0x3c

      status = HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	73fb      	strb	r3, [r7, #15]
      break;
 8001d44:	e006      	b.n	8001d54 <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1ea      	bne.n	8001d2a <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d62:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 fbbf 	bl	80024ec <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return status;
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000004 	.word	0x20000004
 8001d94:	92492493 	.word	0x92492493

08001d98 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d016      	beq.n	8001de0 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2204      	movs	r2, #4
 8001db8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dbe:	f043 0202 	orr.w	r2, r3, #2
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2204      	movs	r2, #4
 8001dca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd2:	4a2f      	ldr	r2, [pc, #188]	; (8001e90 <HAL_DCMI_IRQHandler+0xf8>)
 8001dd4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 fbf6 	bl	80025cc <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d016      	beq.n	8001e18 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2202      	movs	r2, #2
 8001df0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df6:	f043 0201 	orr.w	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2204      	movs	r2, #4
 8001e02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0a:	4a21      	ldr	r2, [pc, #132]	; (8001e90 <HAL_DCMI_IRQHandler+0xf8>)
 8001e0c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 fbda 	bl	80025cc <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d006      	beq.n	8001e30 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2210      	movs	r2, #16
 8001e28:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f83c 	bl	8001ea8 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d006      	beq.n	8001e48 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2208      	movs	r2, #8
 8001e40:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f83a 	bl	8001ebc <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d019      	beq.n	8001e86 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d107      	bne.n	8001e70 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 021e 	bic.w	r2, r2, #30
 8001e6e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0201 	bic.w	r2, r2, #1
 8001e7e:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f825 	bl	8001ed0 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	0800211d 	.word	0x0800211d

08001e94 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_DCMI_ConfigCrop>:
  * @param  XSize DCMI Pixel per line
  * @param  YSize DCMI Line number
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_ConfigCrop(DCMI_HandleTypeDef *hdcmi, uint32_t X0, uint32_t Y0, uint32_t XSize, uint32_t YSize)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_DCMI_ConfigCrop+0x1c>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e01e      	b.n	8001f3e <HAL_DCMI_ConfigCrop+0x5a>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  assert_param(IS_DCMI_WINDOW_COORDINATE(YSize));
  assert_param(IS_DCMI_WINDOW_COORDINATE(XSize));
  assert_param(IS_DCMI_WINDOW_HEIGHT(Y0));

  /* Configure CROP */
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_POSITION_CWSIZE_VLINE));
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	0419      	lsls	r1, r3, #16
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_POSITION_CWSTRT_VST));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	0419      	lsls	r1, r3, #16
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	621a      	str	r2, [r3, #32]

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <HAL_DCMI_DisableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_DisableCrop(DCMI_HandleTypeDef *hdcmi)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_DCMI_DisableCrop+0x16>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e018      	b.n	8001f92 <HAL_DCMI_DisableCrop+0x48>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable DCMI Crop feature */
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0204 	bic.w	r2, r2, #4
 8001f7e:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <HAL_DCMI_EnableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_EnableCrop(DCMI_HandleTypeDef *hdcmi)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_DCMI_EnableCrop+0x16>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e018      	b.n	8001fe6 <HAL_DCMI_EnableCrop+0x48>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Enable DCMI Crop feature */
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0204 	orr.w	r2, r2, #4
 8001fd2:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b084      	sub	sp, #16
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002002:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	2b00      	cmp	r3, #0
 800200a:	d043      	beq.n	8002094 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002018:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d118      	bne.n	8002058 <DCMI_DMAXferCplt+0x66>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d015      	beq.n	8002058 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	00da      	lsls	r2, r3, #3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	2200      	movs	r2, #0
 8002046:	4619      	mov	r1, r3
 8002048:	f001 fea2 	bl	8003d90 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002050:	1e5a      	subs	r2, r3, #1
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	629a      	str	r2, [r3, #40]	; 0x28
 8002056:	e044      	b.n	80020e2 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d13c      	bne.n	80020e2 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207a:	00da      	lsls	r2, r3, #3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4413      	add	r3, r2
 8002080:	2201      	movs	r2, #1
 8002082:	4619      	mov	r1, r3
 8002084:	f001 fe84 	bl	8003d90 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	1e5a      	subs	r2, r3, #1
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	629a      	str	r2, [r3, #40]	; 0x28
 8002092:	e026      	b.n	80020e2 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d006      	beq.n	80020b2 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020ae:	60da      	str	r2, [r3, #12]
 80020b0:	e017      	b.n	80020e2 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10f      	bne.n	80020e2 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c6:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	0099      	lsls	r1, r3, #2
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	440a      	add	r2, r1
 80020d8:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d112      	bne.n	8002114 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f042 0201 	orr.w	r2, r2, #1
 80020fc:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b02      	cmp	r3, #2
 800210a:	d103      	bne.n	8002114 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 8002114:	bf00      	nop
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002128:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002130:	2b02      	cmp	r3, #2
 8002132:	d003      	beq.n	800213c <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f7ff fea9 	bl	8001e94 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e05f      	b.n	800221c <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d109      	bne.n	800217c <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff f94b 	bl	800140c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff f948 	bl	800140c <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2202      	movs	r2, #2
 8002180:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002192:	f023 0308 	bic.w	r3, r3, #8
 8002196:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6819      	ldr	r1, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80021ac:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80021b8:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80021c4:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b10      	cmp	r3, #16
 80021d4:	d112      	bne.n	80021fc <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	7f1b      	ldrb	r3, [r3, #28]
 80021da:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7f5b      	ldrb	r3, [r3, #29]
 80021e0:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80021e2:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	7f9b      	ldrb	r3, [r3, #30]
 80021e8:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80021ea:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	7fdb      	ldrb	r3, [r3, #31]
 80021f2:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80021f8:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80021fa:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 021e 	orr.w	r2, r2, #30
 800220a:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002230:	f7ff fb74 	bl	800191c <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e099      	b.n	8002374 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2202      	movs	r2, #2
 800224c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0201 	bic.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002260:	e00f      	b.n	8002282 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002262:	f7ff fb5b 	bl	800191c <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b05      	cmp	r3, #5
 800226e:	d908      	bls.n	8002282 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2220      	movs	r2, #32
 8002274:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2203      	movs	r2, #3
 800227a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e078      	b.n	8002374 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1e8      	bne.n	8002262 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	4b38      	ldr	r3, [pc, #224]	; (800237c <HAL_DMA_Init+0x158>)
 800229c:	4013      	ands	r3, r2
 800229e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d107      	bne.n	80022ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	4313      	orrs	r3, r2
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f023 0307 	bic.w	r3, r3, #7
 8002302:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	4313      	orrs	r3, r2
 800230c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	2b04      	cmp	r3, #4
 8002314:	d117      	bne.n	8002346 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	4313      	orrs	r3, r2
 800231e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00e      	beq.n	8002346 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 fb6d 	bl	8002a08 <DMA_CheckFifoParam>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2240      	movs	r2, #64	; 0x40
 8002338:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002342:	2301      	movs	r3, #1
 8002344:	e016      	b.n	8002374 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 fb24 	bl	800299c <DMA_CalcBaseAndBitshift>
 8002354:	4603      	mov	r3, r0
 8002356:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235c:	223f      	movs	r2, #63	; 0x3f
 800235e:	409a      	lsls	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	f010803f 	.word	0xf010803f

08002380 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e050      	b.n	8002434 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d101      	bne.n	80023a2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800239e:	2302      	movs	r3, #2
 80023a0:	e048      	b.n	8002434 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0201 	bic.w	r2, r2, #1
 80023b0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2200      	movs	r2, #0
 80023c0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2200      	movs	r2, #0
 80023d0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2221      	movs	r2, #33	; 0x21
 80023e0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 fada 	bl	800299c <DMA_CalcBaseAndBitshift>
 80023e8:	4603      	mov	r3, r0
 80023ea:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002414:	223f      	movs	r2, #63	; 0x3f
 8002416:	409a      	lsls	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002452:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_DMA_Start_IT+0x26>
 800245e:	2302      	movs	r3, #2
 8002460:	e040      	b.n	80024e4 <HAL_DMA_Start_IT+0xa8>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b01      	cmp	r3, #1
 8002474:	d12f      	bne.n	80024d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2202      	movs	r2, #2
 800247a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 fa58 	bl	8002940 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002494:	223f      	movs	r2, #63	; 0x3f
 8002496:	409a      	lsls	r2, r3
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0216 	orr.w	r2, r2, #22
 80024aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d007      	beq.n	80024c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0208 	orr.w	r2, r2, #8
 80024c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0201 	orr.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	e005      	b.n	80024e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024de:	2302      	movs	r3, #2
 80024e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024fa:	f7ff fa0f 	bl	800191c <HAL_GetTick>
 80024fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d008      	beq.n	800251e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2280      	movs	r2, #128	; 0x80
 8002510:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e052      	b.n	80025c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0216 	bic.w	r2, r2, #22
 800252c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695a      	ldr	r2, [r3, #20]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800253c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d103      	bne.n	800254e <HAL_DMA_Abort+0x62>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800254a:	2b00      	cmp	r3, #0
 800254c:	d007      	beq.n	800255e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0208 	bic.w	r2, r2, #8
 800255c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0201 	bic.w	r2, r2, #1
 800256c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800256e:	e013      	b.n	8002598 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002570:	f7ff f9d4 	bl	800191c <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b05      	cmp	r3, #5
 800257c:	d90c      	bls.n	8002598 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2220      	movs	r2, #32
 8002582:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2203      	movs	r2, #3
 8002590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e015      	b.n	80025c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1e4      	bne.n	8002570 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025aa:	223f      	movs	r2, #63	; 0x3f
 80025ac:	409a      	lsls	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d004      	beq.n	80025ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2280      	movs	r2, #128	; 0x80
 80025e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e00c      	b.n	8002604 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2205      	movs	r2, #5
 80025ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0201 	bic.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800261c:	4b92      	ldr	r3, [pc, #584]	; (8002868 <HAL_DMA_IRQHandler+0x258>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a92      	ldr	r2, [pc, #584]	; (800286c <HAL_DMA_IRQHandler+0x25c>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	0a9b      	lsrs	r3, r3, #10
 8002628:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263a:	2208      	movs	r2, #8
 800263c:	409a      	lsls	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4013      	ands	r3, r2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d01a      	beq.n	800267c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d013      	beq.n	800267c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0204 	bic.w	r2, r2, #4
 8002662:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002668:	2208      	movs	r2, #8
 800266a:	409a      	lsls	r2, r3
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002674:	f043 0201 	orr.w	r2, r3, #1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002680:	2201      	movs	r2, #1
 8002682:	409a      	lsls	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4013      	ands	r3, r2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d012      	beq.n	80026b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00b      	beq.n	80026b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269e:	2201      	movs	r2, #1
 80026a0:	409a      	lsls	r2, r3
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026aa:	f043 0202 	orr.w	r2, r3, #2
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b6:	2204      	movs	r2, #4
 80026b8:	409a      	lsls	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4013      	ands	r3, r2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d012      	beq.n	80026e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00b      	beq.n	80026e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d4:	2204      	movs	r2, #4
 80026d6:	409a      	lsls	r2, r3
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e0:	f043 0204 	orr.w	r2, r3, #4
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ec:	2210      	movs	r2, #16
 80026ee:	409a      	lsls	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d043      	beq.n	8002780 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b00      	cmp	r3, #0
 8002704:	d03c      	beq.n	8002780 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270a:	2210      	movs	r2, #16
 800270c:	409a      	lsls	r2, r3
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d018      	beq.n	8002752 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d108      	bne.n	8002740 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	2b00      	cmp	r3, #0
 8002734:	d024      	beq.n	8002780 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	4798      	blx	r3
 800273e:	e01f      	b.n	8002780 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002744:	2b00      	cmp	r3, #0
 8002746:	d01b      	beq.n	8002780 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	4798      	blx	r3
 8002750:	e016      	b.n	8002780 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d107      	bne.n	8002770 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0208 	bic.w	r2, r2, #8
 800276e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	2220      	movs	r2, #32
 8002786:	409a      	lsls	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4013      	ands	r3, r2
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 808e 	beq.w	80028ae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 8086 	beq.w	80028ae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a6:	2220      	movs	r2, #32
 80027a8:	409a      	lsls	r2, r3
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b05      	cmp	r3, #5
 80027b8:	d136      	bne.n	8002828 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0216 	bic.w	r2, r2, #22
 80027c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695a      	ldr	r2, [r3, #20]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d103      	bne.n	80027ea <HAL_DMA_IRQHandler+0x1da>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d007      	beq.n	80027fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0208 	bic.w	r2, r2, #8
 80027f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fe:	223f      	movs	r2, #63	; 0x3f
 8002800:	409a      	lsls	r2, r3
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800281a:	2b00      	cmp	r3, #0
 800281c:	d07d      	beq.n	800291a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	4798      	blx	r3
        }
        return;
 8002826:	e078      	b.n	800291a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d01c      	beq.n	8002870 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d108      	bne.n	8002856 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002848:	2b00      	cmp	r3, #0
 800284a:	d030      	beq.n	80028ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	4798      	blx	r3
 8002854:	e02b      	b.n	80028ae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285a:	2b00      	cmp	r3, #0
 800285c:	d027      	beq.n	80028ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	4798      	blx	r3
 8002866:	e022      	b.n	80028ae <HAL_DMA_IRQHandler+0x29e>
 8002868:	20000004 	.word	0x20000004
 800286c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10f      	bne.n	800289e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0210 	bic.w	r2, r2, #16
 800288c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d032      	beq.n	800291c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d022      	beq.n	8002908 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2205      	movs	r2, #5
 80028c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0201 	bic.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	3301      	adds	r3, #1
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d307      	bcc.n	80028f6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1f2      	bne.n	80028da <HAL_DMA_IRQHandler+0x2ca>
 80028f4:	e000      	b.n	80028f8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80028f6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290c:	2b00      	cmp	r3, #0
 800290e:	d005      	beq.n	800291c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	4798      	blx	r3
 8002918:	e000      	b.n	800291c <HAL_DMA_IRQHandler+0x30c>
        return;
 800291a:	bf00      	nop
    }
  }
}
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop

08002924 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002932:	b2db      	uxtb	r3, r3
}
 8002934:	4618      	mov	r0, r3
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800295c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2b40      	cmp	r3, #64	; 0x40
 800296c:	d108      	bne.n	8002980 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800297e:	e007      	b.n	8002990 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	60da      	str	r2, [r3, #12]
}
 8002990:	bf00      	nop
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	3b10      	subs	r3, #16
 80029ac:	4a14      	ldr	r2, [pc, #80]	; (8002a00 <DMA_CalcBaseAndBitshift+0x64>)
 80029ae:	fba2 2303 	umull	r2, r3, r2, r3
 80029b2:	091b      	lsrs	r3, r3, #4
 80029b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029b6:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <DMA_CalcBaseAndBitshift+0x68>)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4413      	add	r3, r2
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d909      	bls.n	80029de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029d2:	f023 0303 	bic.w	r3, r3, #3
 80029d6:	1d1a      	adds	r2, r3, #4
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	659a      	str	r2, [r3, #88]	; 0x58
 80029dc:	e007      	b.n	80029ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029e6:	f023 0303 	bic.w	r3, r3, #3
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	aaaaaaab 	.word	0xaaaaaaab
 8002a04:	0800bb50 	.word	0x0800bb50

08002a08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d11f      	bne.n	8002a62 <DMA_CheckFifoParam+0x5a>
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d856      	bhi.n	8002ad6 <DMA_CheckFifoParam+0xce>
 8002a28:	a201      	add	r2, pc, #4	; (adr r2, 8002a30 <DMA_CheckFifoParam+0x28>)
 8002a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2e:	bf00      	nop
 8002a30:	08002a41 	.word	0x08002a41
 8002a34:	08002a53 	.word	0x08002a53
 8002a38:	08002a41 	.word	0x08002a41
 8002a3c:	08002ad7 	.word	0x08002ad7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d046      	beq.n	8002ada <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a50:	e043      	b.n	8002ada <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a5a:	d140      	bne.n	8002ade <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a60:	e03d      	b.n	8002ade <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a6a:	d121      	bne.n	8002ab0 <DMA_CheckFifoParam+0xa8>
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	d837      	bhi.n	8002ae2 <DMA_CheckFifoParam+0xda>
 8002a72:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <DMA_CheckFifoParam+0x70>)
 8002a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a78:	08002a89 	.word	0x08002a89
 8002a7c:	08002a8f 	.word	0x08002a8f
 8002a80:	08002a89 	.word	0x08002a89
 8002a84:	08002aa1 	.word	0x08002aa1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a8c:	e030      	b.n	8002af0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d025      	beq.n	8002ae6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a9e:	e022      	b.n	8002ae6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002aa8:	d11f      	bne.n	8002aea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002aae:	e01c      	b.n	8002aea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d903      	bls.n	8002abe <DMA_CheckFifoParam+0xb6>
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d003      	beq.n	8002ac4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002abc:	e018      	b.n	8002af0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac2:	e015      	b.n	8002af0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00e      	beq.n	8002aee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad4:	e00b      	b.n	8002aee <DMA_CheckFifoParam+0xe6>
      break;
 8002ad6:	bf00      	nop
 8002ad8:	e00a      	b.n	8002af0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ada:	bf00      	nop
 8002adc:	e008      	b.n	8002af0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ade:	bf00      	nop
 8002ae0:	e006      	b.n	8002af0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ae2:	bf00      	nop
 8002ae4:	e004      	b.n	8002af0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ae6:	bf00      	nop
 8002ae8:	e002      	b.n	8002af0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002aea:	bf00      	nop
 8002aec:	e000      	b.n	8002af0 <DMA_CheckFifoParam+0xe8>
      break;
 8002aee:	bf00      	nop
    }
  } 
  
  return status; 
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop

08002b00 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
 8002b0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b80      	cmp	r3, #128	; 0x80
 8002b18:	d106      	bne.n	8002b28 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	f001 b913 	b.w	8003d4e <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d007      	beq.n	8002b40 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d105      	bne.n	8002b4c <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2240      	movs	r2, #64	; 0x40
 8002b44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	f001 b901 	b.w	8003d4e <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d102      	bne.n	8002b5c <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002b56:	2302      	movs	r3, #2
 8002b58:	f001 b8f9 	b.w	8003d4e <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	f041 80e7 	bne.w	8003d40 <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2202      	movs	r2, #2
 8002b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002b8e:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f001 f910 	bl	8003dc4 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b99      	ldr	r3, [pc, #612]	; (8002e10 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d960      	bls.n	8002c72 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a97      	ldr	r2, [pc, #604]	; (8002e14 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d057      	beq.n	8002c6a <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a96      	ldr	r2, [pc, #600]	; (8002e18 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d050      	beq.n	8002c66 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a94      	ldr	r2, [pc, #592]	; (8002e1c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d049      	beq.n	8002c62 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a93      	ldr	r2, [pc, #588]	; (8002e20 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d042      	beq.n	8002c5e <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a91      	ldr	r2, [pc, #580]	; (8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d03a      	beq.n	8002c58 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a90      	ldr	r2, [pc, #576]	; (8002e28 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d032      	beq.n	8002c52 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a8e      	ldr	r2, [pc, #568]	; (8002e2c <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d02a      	beq.n	8002c4c <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a8d      	ldr	r2, [pc, #564]	; (8002e30 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d022      	beq.n	8002c46 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a8b      	ldr	r2, [pc, #556]	; (8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d01a      	beq.n	8002c40 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a8a      	ldr	r2, [pc, #552]	; (8002e38 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d012      	beq.n	8002c3a <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a88      	ldr	r2, [pc, #544]	; (8002e3c <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00a      	beq.n	8002c34 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a87      	ldr	r2, [pc, #540]	; (8002e40 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d102      	bne.n	8002c2e <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002c28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c2c:	e01e      	b.n	8002c6c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002c2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002c32:	e01b      	b.n	8002c6c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002c34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c38:	e018      	b.n	8002c6c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002c3a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c3e:	e015      	b.n	8002c6c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002c40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c44:	e012      	b.n	8002c6c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002c46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c4a:	e00f      	b.n	8002c6c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002c4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c50:	e00c      	b.n	8002c6c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002c52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c56:	e009      	b.n	8002c6c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002c58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c5c:	e006      	b.n	8002c6c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002c5e:	2320      	movs	r3, #32
 8002c60:	e004      	b.n	8002c6c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002c62:	2320      	movs	r3, #32
 8002c64:	e002      	b.n	8002c6c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002c66:	2320      	movs	r3, #32
 8002c68:	e000      	b.n	8002c6c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002c6a:	2320      	movs	r3, #32
 8002c6c:	4a75      	ldr	r2, [pc, #468]	; (8002e44 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8002c6e:	60d3      	str	r3, [r2, #12]
 8002c70:	e150      	b.n	8002f14 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	4b73      	ldr	r3, [pc, #460]	; (8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d960      	bls.n	8002d40 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a64      	ldr	r2, [pc, #400]	; (8002e14 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d057      	beq.n	8002d38 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a62      	ldr	r2, [pc, #392]	; (8002e18 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d050      	beq.n	8002d34 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a61      	ldr	r2, [pc, #388]	; (8002e1c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d049      	beq.n	8002d30 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a5f      	ldr	r2, [pc, #380]	; (8002e20 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d042      	beq.n	8002d2c <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a5e      	ldr	r2, [pc, #376]	; (8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d03a      	beq.n	8002d26 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a5c      	ldr	r2, [pc, #368]	; (8002e28 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d032      	beq.n	8002d20 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a5b      	ldr	r2, [pc, #364]	; (8002e2c <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d02a      	beq.n	8002d1a <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a59      	ldr	r2, [pc, #356]	; (8002e30 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d022      	beq.n	8002d14 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a58      	ldr	r2, [pc, #352]	; (8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d01a      	beq.n	8002d0e <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a56      	ldr	r2, [pc, #344]	; (8002e38 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d012      	beq.n	8002d08 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a55      	ldr	r2, [pc, #340]	; (8002e3c <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d00a      	beq.n	8002d02 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a53      	ldr	r2, [pc, #332]	; (8002e40 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d102      	bne.n	8002cfc <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002cf6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cfa:	e01e      	b.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002cfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d00:	e01b      	b.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d02:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d06:	e018      	b.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d0c:	e015      	b.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d0e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d12:	e012      	b.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d18:	e00f      	b.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d1e:	e00c      	b.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d24:	e009      	b.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d2a:	e006      	b.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d2c:	2320      	movs	r3, #32
 8002d2e:	e004      	b.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d30:	2320      	movs	r3, #32
 8002d32:	e002      	b.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d34:	2320      	movs	r3, #32
 8002d36:	e000      	b.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d38:	2320      	movs	r3, #32
 8002d3a:	4a42      	ldr	r2, [pc, #264]	; (8002e44 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8002d3c:	6093      	str	r3, [r2, #8]
 8002d3e:	e0e9      	b.n	8002f14 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	461a      	mov	r2, r3
 8002d46:	4b41      	ldr	r3, [pc, #260]	; (8002e4c <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	f240 8083 	bls.w	8002e54 <HAL_DMAEx_MultiBufferStart_IT+0x354>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a30      	ldr	r2, [pc, #192]	; (8002e14 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d057      	beq.n	8002e08 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a2e      	ldr	r2, [pc, #184]	; (8002e18 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d050      	beq.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0x304>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a2d      	ldr	r2, [pc, #180]	; (8002e1c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d049      	beq.n	8002e00 <HAL_DMAEx_MultiBufferStart_IT+0x300>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a2b      	ldr	r2, [pc, #172]	; (8002e20 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d042      	beq.n	8002dfc <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a2a      	ldr	r2, [pc, #168]	; (8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d03a      	beq.n	8002df6 <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a28      	ldr	r2, [pc, #160]	; (8002e28 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d032      	beq.n	8002df0 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a27      	ldr	r2, [pc, #156]	; (8002e2c <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d02a      	beq.n	8002dea <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a25      	ldr	r2, [pc, #148]	; (8002e30 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d022      	beq.n	8002de4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a24      	ldr	r2, [pc, #144]	; (8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d01a      	beq.n	8002dde <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a22      	ldr	r2, [pc, #136]	; (8002e38 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d012      	beq.n	8002dd8 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a21      	ldr	r2, [pc, #132]	; (8002e3c <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d00a      	beq.n	8002dd2 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a1f      	ldr	r2, [pc, #124]	; (8002e40 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d102      	bne.n	8002dcc <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8002dc6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002dca:	e01e      	b.n	8002e0a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002dcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002dd0:	e01b      	b.n	8002e0a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002dd2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002dd6:	e018      	b.n	8002e0a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002dd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ddc:	e015      	b.n	8002e0a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002dde:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002de2:	e012      	b.n	8002e0a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002de4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002de8:	e00f      	b.n	8002e0a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002dea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dee:	e00c      	b.n	8002e0a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002df0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002df4:	e009      	b.n	8002e0a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002df6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dfa:	e006      	b.n	8002e0a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002dfc:	2320      	movs	r3, #32
 8002dfe:	e004      	b.n	8002e0a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002e00:	2320      	movs	r3, #32
 8002e02:	e002      	b.n	8002e0a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002e04:	2320      	movs	r3, #32
 8002e06:	e000      	b.n	8002e0a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002e08:	2320      	movs	r3, #32
 8002e0a:	4a11      	ldr	r2, [pc, #68]	; (8002e50 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8002e0c:	60d3      	str	r3, [r2, #12]
 8002e0e:	e081      	b.n	8002f14 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002e10:	40026458 	.word	0x40026458
 8002e14:	40026010 	.word	0x40026010
 8002e18:	40026410 	.word	0x40026410
 8002e1c:	40026070 	.word	0x40026070
 8002e20:	40026470 	.word	0x40026470
 8002e24:	40026028 	.word	0x40026028
 8002e28:	40026428 	.word	0x40026428
 8002e2c:	40026088 	.word	0x40026088
 8002e30:	40026488 	.word	0x40026488
 8002e34:	40026040 	.word	0x40026040
 8002e38:	40026440 	.word	0x40026440
 8002e3c:	400260a0 	.word	0x400260a0
 8002e40:	400264a0 	.word	0x400264a0
 8002e44:	40026400 	.word	0x40026400
 8002e48:	400260b8 	.word	0x400260b8
 8002e4c:	40026058 	.word	0x40026058
 8002e50:	40026000 	.word	0x40026000
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a96      	ldr	r2, [pc, #600]	; (80030b4 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d057      	beq.n	8002f0e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a95      	ldr	r2, [pc, #596]	; (80030b8 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d050      	beq.n	8002f0a <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a93      	ldr	r2, [pc, #588]	; (80030bc <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d049      	beq.n	8002f06 <HAL_DMAEx_MultiBufferStart_IT+0x406>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a92      	ldr	r2, [pc, #584]	; (80030c0 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d042      	beq.n	8002f02 <HAL_DMAEx_MultiBufferStart_IT+0x402>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a90      	ldr	r2, [pc, #576]	; (80030c4 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d03a      	beq.n	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a8f      	ldr	r2, [pc, #572]	; (80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d032      	beq.n	8002ef6 <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a8d      	ldr	r2, [pc, #564]	; (80030cc <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d02a      	beq.n	8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a8c      	ldr	r2, [pc, #560]	; (80030d0 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d022      	beq.n	8002eea <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a8a      	ldr	r2, [pc, #552]	; (80030d4 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d01a      	beq.n	8002ee4 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a89      	ldr	r2, [pc, #548]	; (80030d8 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d012      	beq.n	8002ede <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a87      	ldr	r2, [pc, #540]	; (80030dc <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00a      	beq.n	8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a86      	ldr	r2, [pc, #536]	; (80030e0 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d102      	bne.n	8002ed2 <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8002ecc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ed0:	e01e      	b.n	8002f10 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002ed2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ed6:	e01b      	b.n	8002f10 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002ed8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002edc:	e018      	b.n	8002f10 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002ede:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ee2:	e015      	b.n	8002f10 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002ee4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ee8:	e012      	b.n	8002f10 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002eea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002eee:	e00f      	b.n	8002f10 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002ef0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ef4:	e00c      	b.n	8002f10 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002ef6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002efa:	e009      	b.n	8002f10 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002efc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f00:	e006      	b.n	8002f10 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002f02:	2320      	movs	r3, #32
 8002f04:	e004      	b.n	8002f10 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002f06:	2320      	movs	r3, #32
 8002f08:	e002      	b.n	8002f10 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002f0a:	2320      	movs	r3, #32
 8002f0c:	e000      	b.n	8002f10 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002f0e:	2320      	movs	r3, #32
 8002f10:	4a74      	ldr	r2, [pc, #464]	; (80030e4 <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 8002f12:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4b73      	ldr	r3, [pc, #460]	; (80030e8 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d960      	bls.n	8002fe2 <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a63      	ldr	r2, [pc, #396]	; (80030b4 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d057      	beq.n	8002fda <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a62      	ldr	r2, [pc, #392]	; (80030b8 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d050      	beq.n	8002fd6 <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a60      	ldr	r2, [pc, #384]	; (80030bc <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d049      	beq.n	8002fd2 <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a5f      	ldr	r2, [pc, #380]	; (80030c0 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d042      	beq.n	8002fce <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a5d      	ldr	r2, [pc, #372]	; (80030c4 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d03a      	beq.n	8002fc8 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a5c      	ldr	r2, [pc, #368]	; (80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d032      	beq.n	8002fc2 <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a5a      	ldr	r2, [pc, #360]	; (80030cc <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d02a      	beq.n	8002fbc <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a59      	ldr	r2, [pc, #356]	; (80030d0 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d022      	beq.n	8002fb6 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a57      	ldr	r2, [pc, #348]	; (80030d4 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d01a      	beq.n	8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a56      	ldr	r2, [pc, #344]	; (80030d8 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d012      	beq.n	8002faa <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a54      	ldr	r2, [pc, #336]	; (80030dc <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00a      	beq.n	8002fa4 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a53      	ldr	r2, [pc, #332]	; (80030e0 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d102      	bne.n	8002f9e <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8002f98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f9c:	e01e      	b.n	8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002f9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002fa2:	e01b      	b.n	8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002fa4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fa8:	e018      	b.n	8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002faa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fae:	e015      	b.n	8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002fb0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fb4:	e012      	b.n	8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fba:	e00f      	b.n	8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fc0:	e00c      	b.n	8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fc6:	e009      	b.n	8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fcc:	e006      	b.n	8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002fce:	2310      	movs	r3, #16
 8002fd0:	e004      	b.n	8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002fd2:	2310      	movs	r3, #16
 8002fd4:	e002      	b.n	8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002fd6:	2310      	movs	r3, #16
 8002fd8:	e000      	b.n	8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002fda:	2310      	movs	r3, #16
 8002fdc:	4a43      	ldr	r2, [pc, #268]	; (80030ec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8002fde:	60d3      	str	r3, [r2, #12]
 8002fe0:	e14f      	b.n	8003282 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4b41      	ldr	r3, [pc, #260]	; (80030f0 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 8002fea:	429a      	cmp	r2, r3
 8002fec:	f240 8082 	bls.w	80030f4 <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a2f      	ldr	r2, [pc, #188]	; (80030b4 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d057      	beq.n	80030aa <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a2e      	ldr	r2, [pc, #184]	; (80030b8 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d050      	beq.n	80030a6 <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a2c      	ldr	r2, [pc, #176]	; (80030bc <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d049      	beq.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a2b      	ldr	r2, [pc, #172]	; (80030c0 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d042      	beq.n	800309e <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a29      	ldr	r2, [pc, #164]	; (80030c4 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d03a      	beq.n	8003098 <HAL_DMAEx_MultiBufferStart_IT+0x598>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a28      	ldr	r2, [pc, #160]	; (80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d032      	beq.n	8003092 <HAL_DMAEx_MultiBufferStart_IT+0x592>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a26      	ldr	r2, [pc, #152]	; (80030cc <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d02a      	beq.n	800308c <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a25      	ldr	r2, [pc, #148]	; (80030d0 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d022      	beq.n	8003086 <HAL_DMAEx_MultiBufferStart_IT+0x586>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a23      	ldr	r2, [pc, #140]	; (80030d4 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d01a      	beq.n	8003080 <HAL_DMAEx_MultiBufferStart_IT+0x580>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a22      	ldr	r2, [pc, #136]	; (80030d8 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d012      	beq.n	800307a <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a20      	ldr	r2, [pc, #128]	; (80030dc <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00a      	beq.n	8003074 <HAL_DMAEx_MultiBufferStart_IT+0x574>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1f      	ldr	r2, [pc, #124]	; (80030e0 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d102      	bne.n	800306e <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 8003068:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800306c:	e01e      	b.n	80030ac <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800306e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003072:	e01b      	b.n	80030ac <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003074:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003078:	e018      	b.n	80030ac <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800307a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800307e:	e015      	b.n	80030ac <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003080:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003084:	e012      	b.n	80030ac <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800308a:	e00f      	b.n	80030ac <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800308c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003090:	e00c      	b.n	80030ac <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003096:	e009      	b.n	80030ac <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800309c:	e006      	b.n	80030ac <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800309e:	2310      	movs	r3, #16
 80030a0:	e004      	b.n	80030ac <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80030a2:	2310      	movs	r3, #16
 80030a4:	e002      	b.n	80030ac <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80030a6:	2310      	movs	r3, #16
 80030a8:	e000      	b.n	80030ac <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80030aa:	2310      	movs	r3, #16
 80030ac:	4a0f      	ldr	r2, [pc, #60]	; (80030ec <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 80030ae:	6093      	str	r3, [r2, #8]
 80030b0:	e0e7      	b.n	8003282 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 80030b2:	bf00      	nop
 80030b4:	40026010 	.word	0x40026010
 80030b8:	40026410 	.word	0x40026410
 80030bc:	40026070 	.word	0x40026070
 80030c0:	40026470 	.word	0x40026470
 80030c4:	40026028 	.word	0x40026028
 80030c8:	40026428 	.word	0x40026428
 80030cc:	40026088 	.word	0x40026088
 80030d0:	40026488 	.word	0x40026488
 80030d4:	40026040 	.word	0x40026040
 80030d8:	40026440 	.word	0x40026440
 80030dc:	400260a0 	.word	0x400260a0
 80030e0:	400264a0 	.word	0x400264a0
 80030e4:	40026000 	.word	0x40026000
 80030e8:	40026458 	.word	0x40026458
 80030ec:	40026400 	.word	0x40026400
 80030f0:	400260b8 	.word	0x400260b8
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	4b96      	ldr	r3, [pc, #600]	; (8003354 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d960      	bls.n	80031c2 <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a94      	ldr	r2, [pc, #592]	; (8003358 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d057      	beq.n	80031ba <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a93      	ldr	r2, [pc, #588]	; (800335c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d050      	beq.n	80031b6 <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a91      	ldr	r2, [pc, #580]	; (8003360 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d049      	beq.n	80031b2 <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a90      	ldr	r2, [pc, #576]	; (8003364 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d042      	beq.n	80031ae <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a8e      	ldr	r2, [pc, #568]	; (8003368 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d03a      	beq.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a8d      	ldr	r2, [pc, #564]	; (800336c <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d032      	beq.n	80031a2 <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a8b      	ldr	r2, [pc, #556]	; (8003370 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d02a      	beq.n	800319c <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a8a      	ldr	r2, [pc, #552]	; (8003374 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d022      	beq.n	8003196 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a88      	ldr	r2, [pc, #544]	; (8003378 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d01a      	beq.n	8003190 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a87      	ldr	r2, [pc, #540]	; (800337c <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d012      	beq.n	800318a <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a85      	ldr	r2, [pc, #532]	; (8003380 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00a      	beq.n	8003184 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a84      	ldr	r2, [pc, #528]	; (8003384 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d102      	bne.n	800317e <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8003178:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800317c:	e01e      	b.n	80031bc <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800317e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003182:	e01b      	b.n	80031bc <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003184:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003188:	e018      	b.n	80031bc <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800318a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800318e:	e015      	b.n	80031bc <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003190:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003194:	e012      	b.n	80031bc <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800319a:	e00f      	b.n	80031bc <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800319c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031a0:	e00c      	b.n	80031bc <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80031a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031a6:	e009      	b.n	80031bc <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80031a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ac:	e006      	b.n	80031bc <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80031ae:	2310      	movs	r3, #16
 80031b0:	e004      	b.n	80031bc <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80031b2:	2310      	movs	r3, #16
 80031b4:	e002      	b.n	80031bc <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80031b6:	2310      	movs	r3, #16
 80031b8:	e000      	b.n	80031bc <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80031ba:	2310      	movs	r3, #16
 80031bc:	4a72      	ldr	r2, [pc, #456]	; (8003388 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 80031be:	60d3      	str	r3, [r2, #12]
 80031c0:	e05f      	b.n	8003282 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a64      	ldr	r2, [pc, #400]	; (8003358 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d057      	beq.n	800327c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a62      	ldr	r2, [pc, #392]	; (800335c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d050      	beq.n	8003278 <HAL_DMAEx_MultiBufferStart_IT+0x778>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a61      	ldr	r2, [pc, #388]	; (8003360 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d049      	beq.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a5f      	ldr	r2, [pc, #380]	; (8003364 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d042      	beq.n	8003270 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a5e      	ldr	r2, [pc, #376]	; (8003368 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d03a      	beq.n	800326a <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a5c      	ldr	r2, [pc, #368]	; (800336c <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d032      	beq.n	8003264 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a5b      	ldr	r2, [pc, #364]	; (8003370 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d02a      	beq.n	800325e <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a59      	ldr	r2, [pc, #356]	; (8003374 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d022      	beq.n	8003258 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a58      	ldr	r2, [pc, #352]	; (8003378 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d01a      	beq.n	8003252 <HAL_DMAEx_MultiBufferStart_IT+0x752>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a56      	ldr	r2, [pc, #344]	; (800337c <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d012      	beq.n	800324c <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a55      	ldr	r2, [pc, #340]	; (8003380 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00a      	beq.n	8003246 <HAL_DMAEx_MultiBufferStart_IT+0x746>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a53      	ldr	r2, [pc, #332]	; (8003384 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d102      	bne.n	8003240 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 800323a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800323e:	e01e      	b.n	800327e <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003240:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003244:	e01b      	b.n	800327e <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003246:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800324a:	e018      	b.n	800327e <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800324c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003250:	e015      	b.n	800327e <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003252:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003256:	e012      	b.n	800327e <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800325c:	e00f      	b.n	800327e <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800325e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003262:	e00c      	b.n	800327e <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003268:	e009      	b.n	800327e <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800326a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800326e:	e006      	b.n	800327e <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003270:	2310      	movs	r3, #16
 8003272:	e004      	b.n	800327e <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003274:	2310      	movs	r3, #16
 8003276:	e002      	b.n	800327e <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003278:	2310      	movs	r3, #16
 800327a:	e000      	b.n	800327e <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800327c:	2310      	movs	r3, #16
 800327e:	4a42      	ldr	r2, [pc, #264]	; (8003388 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8003280:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	4b40      	ldr	r3, [pc, #256]	; (800338c <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 800328a:	429a      	cmp	r2, r3
 800328c:	f240 8082 	bls.w	8003394 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a30      	ldr	r2, [pc, #192]	; (8003358 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d057      	beq.n	800334a <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a2f      	ldr	r2, [pc, #188]	; (800335c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d050      	beq.n	8003346 <HAL_DMAEx_MultiBufferStart_IT+0x846>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a2d      	ldr	r2, [pc, #180]	; (8003360 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d049      	beq.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0x842>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a2c      	ldr	r2, [pc, #176]	; (8003364 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d042      	beq.n	800333e <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a2a      	ldr	r2, [pc, #168]	; (8003368 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d03a      	beq.n	8003338 <HAL_DMAEx_MultiBufferStart_IT+0x838>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a29      	ldr	r2, [pc, #164]	; (800336c <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d032      	beq.n	8003332 <HAL_DMAEx_MultiBufferStart_IT+0x832>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a27      	ldr	r2, [pc, #156]	; (8003370 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d02a      	beq.n	800332c <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a26      	ldr	r2, [pc, #152]	; (8003374 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d022      	beq.n	8003326 <HAL_DMAEx_MultiBufferStart_IT+0x826>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a24      	ldr	r2, [pc, #144]	; (8003378 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d01a      	beq.n	8003320 <HAL_DMAEx_MultiBufferStart_IT+0x820>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a23      	ldr	r2, [pc, #140]	; (800337c <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d012      	beq.n	800331a <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a21      	ldr	r2, [pc, #132]	; (8003380 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00a      	beq.n	8003314 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a20      	ldr	r2, [pc, #128]	; (8003384 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d102      	bne.n	800330e <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 8003308:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800330c:	e01e      	b.n	800334c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800330e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003312:	e01b      	b.n	800334c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003314:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003318:	e018      	b.n	800334c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800331a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800331e:	e015      	b.n	800334c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003320:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003324:	e012      	b.n	800334c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003326:	f44f 7300 	mov.w	r3, #512	; 0x200
 800332a:	e00f      	b.n	800334c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800332c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003330:	e00c      	b.n	800334c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003332:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003336:	e009      	b.n	800334c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800333c:	e006      	b.n	800334c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800333e:	2308      	movs	r3, #8
 8003340:	e004      	b.n	800334c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003342:	2308      	movs	r3, #8
 8003344:	e002      	b.n	800334c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003346:	2308      	movs	r3, #8
 8003348:	e000      	b.n	800334c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800334a:	2308      	movs	r3, #8
 800334c:	4a10      	ldr	r2, [pc, #64]	; (8003390 <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 800334e:	60d3      	str	r3, [r2, #12]
 8003350:	e16f      	b.n	8003632 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8003352:	bf00      	nop
 8003354:	40026058 	.word	0x40026058
 8003358:	40026010 	.word	0x40026010
 800335c:	40026410 	.word	0x40026410
 8003360:	40026070 	.word	0x40026070
 8003364:	40026470 	.word	0x40026470
 8003368:	40026028 	.word	0x40026028
 800336c:	40026428 	.word	0x40026428
 8003370:	40026088 	.word	0x40026088
 8003374:	40026488 	.word	0x40026488
 8003378:	40026040 	.word	0x40026040
 800337c:	40026440 	.word	0x40026440
 8003380:	400260a0 	.word	0x400260a0
 8003384:	400264a0 	.word	0x400264a0
 8003388:	40026000 	.word	0x40026000
 800338c:	40026458 	.word	0x40026458
 8003390:	40026400 	.word	0x40026400
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	4b94      	ldr	r3, [pc, #592]	; (80035ec <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800339c:	429a      	cmp	r2, r3
 800339e:	d960      	bls.n	8003462 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a92      	ldr	r2, [pc, #584]	; (80035f0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d057      	beq.n	800345a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a91      	ldr	r2, [pc, #580]	; (80035f4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d050      	beq.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a8f      	ldr	r2, [pc, #572]	; (80035f8 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d049      	beq.n	8003452 <HAL_DMAEx_MultiBufferStart_IT+0x952>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a8e      	ldr	r2, [pc, #568]	; (80035fc <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d042      	beq.n	800344e <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a8c      	ldr	r2, [pc, #560]	; (8003600 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d03a      	beq.n	8003448 <HAL_DMAEx_MultiBufferStart_IT+0x948>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a8b      	ldr	r2, [pc, #556]	; (8003604 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d032      	beq.n	8003442 <HAL_DMAEx_MultiBufferStart_IT+0x942>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a89      	ldr	r2, [pc, #548]	; (8003608 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d02a      	beq.n	800343c <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a88      	ldr	r2, [pc, #544]	; (800360c <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d022      	beq.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a86      	ldr	r2, [pc, #536]	; (8003610 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d01a      	beq.n	8003430 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a85      	ldr	r2, [pc, #532]	; (8003614 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d012      	beq.n	800342a <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a83      	ldr	r2, [pc, #524]	; (8003618 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00a      	beq.n	8003424 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a82      	ldr	r2, [pc, #520]	; (800361c <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d102      	bne.n	800341e <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 8003418:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800341c:	e01e      	b.n	800345c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800341e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003422:	e01b      	b.n	800345c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003424:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003428:	e018      	b.n	800345c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800342a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800342e:	e015      	b.n	800345c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003430:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003434:	e012      	b.n	800345c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003436:	f44f 7300 	mov.w	r3, #512	; 0x200
 800343a:	e00f      	b.n	800345c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800343c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003440:	e00c      	b.n	800345c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003442:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003446:	e009      	b.n	800345c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003448:	f44f 7300 	mov.w	r3, #512	; 0x200
 800344c:	e006      	b.n	800345c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800344e:	2308      	movs	r3, #8
 8003450:	e004      	b.n	800345c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003452:	2308      	movs	r3, #8
 8003454:	e002      	b.n	800345c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003456:	2308      	movs	r3, #8
 8003458:	e000      	b.n	800345c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800345a:	2308      	movs	r3, #8
 800345c:	4a70      	ldr	r2, [pc, #448]	; (8003620 <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 800345e:	6093      	str	r3, [r2, #8]
 8003460:	e0e7      	b.n	8003632 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	4b6e      	ldr	r3, [pc, #440]	; (8003624 <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 800346a:	429a      	cmp	r2, r3
 800346c:	d960      	bls.n	8003530 <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a5f      	ldr	r2, [pc, #380]	; (80035f0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d057      	beq.n	8003528 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a5d      	ldr	r2, [pc, #372]	; (80035f4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d050      	beq.n	8003524 <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a5c      	ldr	r2, [pc, #368]	; (80035f8 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d049      	beq.n	8003520 <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a5a      	ldr	r2, [pc, #360]	; (80035fc <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d042      	beq.n	800351c <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a59      	ldr	r2, [pc, #356]	; (8003600 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d03a      	beq.n	8003516 <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a57      	ldr	r2, [pc, #348]	; (8003604 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d032      	beq.n	8003510 <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a56      	ldr	r2, [pc, #344]	; (8003608 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d02a      	beq.n	800350a <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a54      	ldr	r2, [pc, #336]	; (800360c <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d022      	beq.n	8003504 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a53      	ldr	r2, [pc, #332]	; (8003610 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d01a      	beq.n	80034fe <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a51      	ldr	r2, [pc, #324]	; (8003614 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d012      	beq.n	80034f8 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a50      	ldr	r2, [pc, #320]	; (8003618 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00a      	beq.n	80034f2 <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a4e      	ldr	r2, [pc, #312]	; (800361c <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d102      	bne.n	80034ec <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 80034e6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034ea:	e01e      	b.n	800352a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80034ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034f0:	e01b      	b.n	800352a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80034f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034f6:	e018      	b.n	800352a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80034f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034fc:	e015      	b.n	800352a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80034fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003502:	e012      	b.n	800352a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003508:	e00f      	b.n	800352a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800350a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800350e:	e00c      	b.n	800352a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003514:	e009      	b.n	800352a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800351a:	e006      	b.n	800352a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800351c:	2308      	movs	r3, #8
 800351e:	e004      	b.n	800352a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003520:	2308      	movs	r3, #8
 8003522:	e002      	b.n	800352a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003524:	2308      	movs	r3, #8
 8003526:	e000      	b.n	800352a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003528:	2308      	movs	r3, #8
 800352a:	4a3f      	ldr	r2, [pc, #252]	; (8003628 <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 800352c:	60d3      	str	r3, [r2, #12]
 800352e:	e080      	b.n	8003632 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a2e      	ldr	r2, [pc, #184]	; (80035f0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d078      	beq.n	800362c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a2d      	ldr	r2, [pc, #180]	; (80035f4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d050      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a2b      	ldr	r2, [pc, #172]	; (80035f8 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d049      	beq.n	80035e2 <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a2a      	ldr	r2, [pc, #168]	; (80035fc <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d042      	beq.n	80035de <HAL_DMAEx_MultiBufferStart_IT+0xade>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a28      	ldr	r2, [pc, #160]	; (8003600 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d03a      	beq.n	80035d8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a27      	ldr	r2, [pc, #156]	; (8003604 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d032      	beq.n	80035d2 <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a25      	ldr	r2, [pc, #148]	; (8003608 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d02a      	beq.n	80035cc <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a24      	ldr	r2, [pc, #144]	; (800360c <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d022      	beq.n	80035c6 <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a22      	ldr	r2, [pc, #136]	; (8003610 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d01a      	beq.n	80035c0 <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a21      	ldr	r2, [pc, #132]	; (8003614 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d012      	beq.n	80035ba <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a1f      	ldr	r2, [pc, #124]	; (8003618 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00a      	beq.n	80035b4 <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a1e      	ldr	r2, [pc, #120]	; (800361c <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d102      	bne.n	80035ae <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 80035a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80035ac:	e03f      	b.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80035ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035b2:	e03c      	b.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80035b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80035b8:	e039      	b.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80035ba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80035be:	e036      	b.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80035c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80035c4:	e033      	b.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80035c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035ca:	e030      	b.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80035cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035d0:	e02d      	b.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80035d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035d6:	e02a      	b.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80035d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035dc:	e027      	b.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80035de:	2308      	movs	r3, #8
 80035e0:	e025      	b.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80035e2:	2308      	movs	r3, #8
 80035e4:	e023      	b.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80035e6:	2308      	movs	r3, #8
 80035e8:	e021      	b.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80035ea:	bf00      	nop
 80035ec:	400260b8 	.word	0x400260b8
 80035f0:	40026010 	.word	0x40026010
 80035f4:	40026410 	.word	0x40026410
 80035f8:	40026070 	.word	0x40026070
 80035fc:	40026470 	.word	0x40026470
 8003600:	40026028 	.word	0x40026028
 8003604:	40026428 	.word	0x40026428
 8003608:	40026088 	.word	0x40026088
 800360c:	40026488 	.word	0x40026488
 8003610:	40026040 	.word	0x40026040
 8003614:	40026440 	.word	0x40026440
 8003618:	400260a0 	.word	0x400260a0
 800361c:	400264a0 	.word	0x400264a0
 8003620:	40026400 	.word	0x40026400
 8003624:	40026058 	.word	0x40026058
 8003628:	40026000 	.word	0x40026000
 800362c:	2308      	movs	r3, #8
 800362e:	4a9a      	ldr	r2, [pc, #616]	; (8003898 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8003630:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	4b98      	ldr	r3, [pc, #608]	; (800389c <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 800363a:	429a      	cmp	r2, r3
 800363c:	d960      	bls.n	8003700 <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a97      	ldr	r2, [pc, #604]	; (80038a0 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d057      	beq.n	80036f8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a95      	ldr	r2, [pc, #596]	; (80038a4 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d050      	beq.n	80036f4 <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a94      	ldr	r2, [pc, #592]	; (80038a8 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d049      	beq.n	80036f0 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a92      	ldr	r2, [pc, #584]	; (80038ac <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d042      	beq.n	80036ec <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a91      	ldr	r2, [pc, #580]	; (80038b0 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d03a      	beq.n	80036e6 <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a8f      	ldr	r2, [pc, #572]	; (80038b4 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d032      	beq.n	80036e0 <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a8e      	ldr	r2, [pc, #568]	; (80038b8 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d02a      	beq.n	80036da <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a8c      	ldr	r2, [pc, #560]	; (80038bc <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d022      	beq.n	80036d4 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a8b      	ldr	r2, [pc, #556]	; (80038c0 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d01a      	beq.n	80036ce <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a89      	ldr	r2, [pc, #548]	; (80038c4 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d012      	beq.n	80036c8 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a88      	ldr	r2, [pc, #544]	; (80038c8 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d00a      	beq.n	80036c2 <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a86      	ldr	r2, [pc, #536]	; (80038cc <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d102      	bne.n	80036bc <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 80036b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036ba:	e01e      	b.n	80036fa <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80036bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036c0:	e01b      	b.n	80036fa <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80036c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036c6:	e018      	b.n	80036fa <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80036c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036cc:	e015      	b.n	80036fa <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80036ce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036d2:	e012      	b.n	80036fa <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80036d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036d8:	e00f      	b.n	80036fa <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80036da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036de:	e00c      	b.n	80036fa <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80036e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036e4:	e009      	b.n	80036fa <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80036e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036ea:	e006      	b.n	80036fa <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80036ec:	2304      	movs	r3, #4
 80036ee:	e004      	b.n	80036fa <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80036f0:	2304      	movs	r3, #4
 80036f2:	e002      	b.n	80036fa <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80036f4:	2304      	movs	r3, #4
 80036f6:	e000      	b.n	80036fa <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80036f8:	2304      	movs	r3, #4
 80036fa:	4a75      	ldr	r2, [pc, #468]	; (80038d0 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 80036fc:	60d3      	str	r3, [r2, #12]
 80036fe:	e151      	b.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	461a      	mov	r2, r3
 8003706:	4b73      	ldr	r3, [pc, #460]	; (80038d4 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 8003708:	429a      	cmp	r2, r3
 800370a:	d960      	bls.n	80037ce <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a63      	ldr	r2, [pc, #396]	; (80038a0 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d057      	beq.n	80037c6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a62      	ldr	r2, [pc, #392]	; (80038a4 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d050      	beq.n	80037c2 <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a60      	ldr	r2, [pc, #384]	; (80038a8 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d049      	beq.n	80037be <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a5f      	ldr	r2, [pc, #380]	; (80038ac <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d042      	beq.n	80037ba <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a5d      	ldr	r2, [pc, #372]	; (80038b0 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d03a      	beq.n	80037b4 <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a5c      	ldr	r2, [pc, #368]	; (80038b4 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d032      	beq.n	80037ae <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a5a      	ldr	r2, [pc, #360]	; (80038b8 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d02a      	beq.n	80037a8 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a59      	ldr	r2, [pc, #356]	; (80038bc <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d022      	beq.n	80037a2 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a57      	ldr	r2, [pc, #348]	; (80038c0 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d01a      	beq.n	800379c <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a56      	ldr	r2, [pc, #344]	; (80038c4 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d012      	beq.n	8003796 <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a54      	ldr	r2, [pc, #336]	; (80038c8 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00a      	beq.n	8003790 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a53      	ldr	r2, [pc, #332]	; (80038cc <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d102      	bne.n	800378a <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 8003784:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003788:	e01e      	b.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800378a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800378e:	e01b      	b.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003790:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003794:	e018      	b.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003796:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800379a:	e015      	b.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800379c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037a0:	e012      	b.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80037a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037a6:	e00f      	b.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80037a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037ac:	e00c      	b.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80037ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037b2:	e009      	b.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80037b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037b8:	e006      	b.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80037ba:	2304      	movs	r3, #4
 80037bc:	e004      	b.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80037be:	2304      	movs	r3, #4
 80037c0:	e002      	b.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80037c2:	2304      	movs	r3, #4
 80037c4:	e000      	b.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80037c6:	2304      	movs	r3, #4
 80037c8:	4a41      	ldr	r2, [pc, #260]	; (80038d0 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 80037ca:	6093      	str	r3, [r2, #8]
 80037cc:	e0ea      	b.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	4b40      	ldr	r3, [pc, #256]	; (80038d8 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 80037d6:	429a      	cmp	r2, r3
 80037d8:	f240 8084 	bls.w	80038e4 <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a2f      	ldr	r2, [pc, #188]	; (80038a0 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d07a      	beq.n	80038dc <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a2e      	ldr	r2, [pc, #184]	; (80038a4 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d050      	beq.n	8003892 <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a2c      	ldr	r2, [pc, #176]	; (80038a8 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d049      	beq.n	800388e <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a2b      	ldr	r2, [pc, #172]	; (80038ac <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d042      	beq.n	800388a <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a29      	ldr	r2, [pc, #164]	; (80038b0 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d03a      	beq.n	8003884 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a28      	ldr	r2, [pc, #160]	; (80038b4 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d032      	beq.n	800387e <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a26      	ldr	r2, [pc, #152]	; (80038b8 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d02a      	beq.n	8003878 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a25      	ldr	r2, [pc, #148]	; (80038bc <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d022      	beq.n	8003872 <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a23      	ldr	r2, [pc, #140]	; (80038c0 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d01a      	beq.n	800386c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a22      	ldr	r2, [pc, #136]	; (80038c4 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d012      	beq.n	8003866 <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a20      	ldr	r2, [pc, #128]	; (80038c8 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00a      	beq.n	8003860 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a1f      	ldr	r2, [pc, #124]	; (80038cc <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d102      	bne.n	800385a <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8003854:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003858:	e041      	b.n	80038de <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800385a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800385e:	e03e      	b.n	80038de <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003860:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003864:	e03b      	b.n	80038de <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003866:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800386a:	e038      	b.n	80038de <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800386c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003870:	e035      	b.n	80038de <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003872:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003876:	e032      	b.n	80038de <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003878:	f44f 7380 	mov.w	r3, #256	; 0x100
 800387c:	e02f      	b.n	80038de <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800387e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003882:	e02c      	b.n	80038de <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003884:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003888:	e029      	b.n	80038de <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800388a:	2304      	movs	r3, #4
 800388c:	e027      	b.n	80038de <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800388e:	2304      	movs	r3, #4
 8003890:	e025      	b.n	80038de <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003892:	2304      	movs	r3, #4
 8003894:	e023      	b.n	80038de <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003896:	bf00      	nop
 8003898:	40026000 	.word	0x40026000
 800389c:	40026458 	.word	0x40026458
 80038a0:	40026010 	.word	0x40026010
 80038a4:	40026410 	.word	0x40026410
 80038a8:	40026070 	.word	0x40026070
 80038ac:	40026470 	.word	0x40026470
 80038b0:	40026028 	.word	0x40026028
 80038b4:	40026428 	.word	0x40026428
 80038b8:	40026088 	.word	0x40026088
 80038bc:	40026488 	.word	0x40026488
 80038c0:	40026040 	.word	0x40026040
 80038c4:	40026440 	.word	0x40026440
 80038c8:	400260a0 	.word	0x400260a0
 80038cc:	400264a0 	.word	0x400264a0
 80038d0:	40026400 	.word	0x40026400
 80038d4:	400260b8 	.word	0x400260b8
 80038d8:	40026058 	.word	0x40026058
 80038dc:	2304      	movs	r3, #4
 80038de:	4a94      	ldr	r2, [pc, #592]	; (8003b30 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80038e0:	60d3      	str	r3, [r2, #12]
 80038e2:	e05f      	b.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a92      	ldr	r2, [pc, #584]	; (8003b34 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d057      	beq.n	800399e <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a91      	ldr	r2, [pc, #580]	; (8003b38 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d050      	beq.n	800399a <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a8f      	ldr	r2, [pc, #572]	; (8003b3c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d049      	beq.n	8003996 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a8e      	ldr	r2, [pc, #568]	; (8003b40 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d042      	beq.n	8003992 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a8c      	ldr	r2, [pc, #560]	; (8003b44 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d03a      	beq.n	800398c <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a8b      	ldr	r2, [pc, #556]	; (8003b48 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d032      	beq.n	8003986 <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a89      	ldr	r2, [pc, #548]	; (8003b4c <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d02a      	beq.n	8003980 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a88      	ldr	r2, [pc, #544]	; (8003b50 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d022      	beq.n	800397a <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a86      	ldr	r2, [pc, #536]	; (8003b54 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d01a      	beq.n	8003974 <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a85      	ldr	r2, [pc, #532]	; (8003b58 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d012      	beq.n	800396e <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a83      	ldr	r2, [pc, #524]	; (8003b5c <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00a      	beq.n	8003968 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a82      	ldr	r2, [pc, #520]	; (8003b60 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d102      	bne.n	8003962 <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 800395c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003960:	e01e      	b.n	80039a0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003962:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003966:	e01b      	b.n	80039a0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003968:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800396c:	e018      	b.n	80039a0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800396e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003972:	e015      	b.n	80039a0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003974:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003978:	e012      	b.n	80039a0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800397a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800397e:	e00f      	b.n	80039a0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003984:	e00c      	b.n	80039a0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003986:	f44f 7380 	mov.w	r3, #256	; 0x100
 800398a:	e009      	b.n	80039a0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800398c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003990:	e006      	b.n	80039a0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003992:	2304      	movs	r3, #4
 8003994:	e004      	b.n	80039a0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003996:	2304      	movs	r3, #4
 8003998:	e002      	b.n	80039a0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800399a:	2304      	movs	r3, #4
 800399c:	e000      	b.n	80039a0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800399e:	2304      	movs	r3, #4
 80039a0:	4a63      	ldr	r2, [pc, #396]	; (8003b30 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80039a2:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	461a      	mov	r2, r3
 80039aa:	4b6e      	ldr	r3, [pc, #440]	; (8003b64 <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d95c      	bls.n	8003a6a <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a5f      	ldr	r2, [pc, #380]	; (8003b34 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d053      	beq.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a5e      	ldr	r2, [pc, #376]	; (8003b38 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d04c      	beq.n	8003a5e <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a5c      	ldr	r2, [pc, #368]	; (8003b3c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d045      	beq.n	8003a5a <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a5b      	ldr	r2, [pc, #364]	; (8003b40 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d03e      	beq.n	8003a56 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a59      	ldr	r2, [pc, #356]	; (8003b44 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d037      	beq.n	8003a52 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a58      	ldr	r2, [pc, #352]	; (8003b48 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d030      	beq.n	8003a4e <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a56      	ldr	r2, [pc, #344]	; (8003b4c <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d029      	beq.n	8003a4a <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a55      	ldr	r2, [pc, #340]	; (8003b50 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d022      	beq.n	8003a46 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a53      	ldr	r2, [pc, #332]	; (8003b54 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d01a      	beq.n	8003a40 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a52      	ldr	r2, [pc, #328]	; (8003b58 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d012      	beq.n	8003a3a <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a50      	ldr	r2, [pc, #320]	; (8003b5c <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00a      	beq.n	8003a34 <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a4f      	ldr	r2, [pc, #316]	; (8003b60 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d102      	bne.n	8003a2e <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8003a28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a2c:	e01a      	b.n	8003a64 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003a2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a32:	e017      	b.n	8003a64 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003a34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a38:	e014      	b.n	8003a64 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003a3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a3e:	e011      	b.n	8003a64 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003a40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a44:	e00e      	b.n	8003a64 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003a46:	2340      	movs	r3, #64	; 0x40
 8003a48:	e00c      	b.n	8003a64 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003a4a:	2340      	movs	r3, #64	; 0x40
 8003a4c:	e00a      	b.n	8003a64 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003a4e:	2340      	movs	r3, #64	; 0x40
 8003a50:	e008      	b.n	8003a64 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003a52:	2340      	movs	r3, #64	; 0x40
 8003a54:	e006      	b.n	8003a64 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e004      	b.n	8003a64 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e002      	b.n	8003a64 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003a62:	2301      	movs	r3, #1
 8003a64:	4a40      	ldr	r2, [pc, #256]	; (8003b68 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8003a66:	60d3      	str	r3, [r2, #12]
 8003a68:	e141      	b.n	8003cee <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	4b3e      	ldr	r3, [pc, #248]	; (8003b6c <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d97c      	bls.n	8003b70 <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a2e      	ldr	r2, [pc, #184]	; (8003b34 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d053      	beq.n	8003b28 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a2c      	ldr	r2, [pc, #176]	; (8003b38 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d04c      	beq.n	8003b24 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a2b      	ldr	r2, [pc, #172]	; (8003b3c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d045      	beq.n	8003b20 <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a29      	ldr	r2, [pc, #164]	; (8003b40 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d03e      	beq.n	8003b1c <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a28      	ldr	r2, [pc, #160]	; (8003b44 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d037      	beq.n	8003b18 <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a26      	ldr	r2, [pc, #152]	; (8003b48 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d030      	beq.n	8003b14 <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a25      	ldr	r2, [pc, #148]	; (8003b4c <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d029      	beq.n	8003b10 <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a23      	ldr	r2, [pc, #140]	; (8003b50 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d022      	beq.n	8003b0c <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a22      	ldr	r2, [pc, #136]	; (8003b54 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d01a      	beq.n	8003b06 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a20      	ldr	r2, [pc, #128]	; (8003b58 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d012      	beq.n	8003b00 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a1f      	ldr	r2, [pc, #124]	; (8003b5c <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d00a      	beq.n	8003afa <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a1d      	ldr	r2, [pc, #116]	; (8003b60 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d102      	bne.n	8003af4 <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8003aee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003af2:	e01a      	b.n	8003b2a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003af4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003af8:	e017      	b.n	8003b2a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003afa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003afe:	e014      	b.n	8003b2a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003b00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b04:	e011      	b.n	8003b2a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b0a:	e00e      	b.n	8003b2a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003b0c:	2340      	movs	r3, #64	; 0x40
 8003b0e:	e00c      	b.n	8003b2a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003b10:	2340      	movs	r3, #64	; 0x40
 8003b12:	e00a      	b.n	8003b2a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003b14:	2340      	movs	r3, #64	; 0x40
 8003b16:	e008      	b.n	8003b2a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003b18:	2340      	movs	r3, #64	; 0x40
 8003b1a:	e006      	b.n	8003b2a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e004      	b.n	8003b2a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003b20:	2301      	movs	r3, #1
 8003b22:	e002      	b.n	8003b2a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	4a0f      	ldr	r2, [pc, #60]	; (8003b68 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8003b2c:	6093      	str	r3, [r2, #8]
 8003b2e:	e0de      	b.n	8003cee <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003b30:	40026000 	.word	0x40026000
 8003b34:	40026010 	.word	0x40026010
 8003b38:	40026410 	.word	0x40026410
 8003b3c:	40026070 	.word	0x40026070
 8003b40:	40026470 	.word	0x40026470
 8003b44:	40026028 	.word	0x40026028
 8003b48:	40026428 	.word	0x40026428
 8003b4c:	40026088 	.word	0x40026088
 8003b50:	40026488 	.word	0x40026488
 8003b54:	40026040 	.word	0x40026040
 8003b58:	40026440 	.word	0x40026440
 8003b5c:	400260a0 	.word	0x400260a0
 8003b60:	400264a0 	.word	0x400264a0
 8003b64:	40026458 	.word	0x40026458
 8003b68:	40026400 	.word	0x40026400
 8003b6c:	400260b8 	.word	0x400260b8
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	461a      	mov	r2, r3
 8003b76:	4b78      	ldr	r3, [pc, #480]	; (8003d58 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d95c      	bls.n	8003c36 <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a76      	ldr	r2, [pc, #472]	; (8003d5c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d053      	beq.n	8003c2e <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a75      	ldr	r2, [pc, #468]	; (8003d60 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d04c      	beq.n	8003c2a <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a73      	ldr	r2, [pc, #460]	; (8003d64 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d045      	beq.n	8003c26 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a72      	ldr	r2, [pc, #456]	; (8003d68 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d03e      	beq.n	8003c22 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a70      	ldr	r2, [pc, #448]	; (8003d6c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d037      	beq.n	8003c1e <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a6f      	ldr	r2, [pc, #444]	; (8003d70 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d030      	beq.n	8003c1a <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a6d      	ldr	r2, [pc, #436]	; (8003d74 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d029      	beq.n	8003c16 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a6c      	ldr	r2, [pc, #432]	; (8003d78 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d022      	beq.n	8003c12 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a6a      	ldr	r2, [pc, #424]	; (8003d7c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d01a      	beq.n	8003c0c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a69      	ldr	r2, [pc, #420]	; (8003d80 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d012      	beq.n	8003c06 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a67      	ldr	r2, [pc, #412]	; (8003d84 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00a      	beq.n	8003c00 <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a66      	ldr	r2, [pc, #408]	; (8003d88 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d102      	bne.n	8003bfa <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8003bf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bf8:	e01a      	b.n	8003c30 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003bfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003bfe:	e017      	b.n	8003c30 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003c00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c04:	e014      	b.n	8003c30 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003c06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c0a:	e011      	b.n	8003c30 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003c0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c10:	e00e      	b.n	8003c30 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003c12:	2340      	movs	r3, #64	; 0x40
 8003c14:	e00c      	b.n	8003c30 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003c16:	2340      	movs	r3, #64	; 0x40
 8003c18:	e00a      	b.n	8003c30 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003c1a:	2340      	movs	r3, #64	; 0x40
 8003c1c:	e008      	b.n	8003c30 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003c1e:	2340      	movs	r3, #64	; 0x40
 8003c20:	e006      	b.n	8003c30 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e004      	b.n	8003c30 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003c26:	2301      	movs	r3, #1
 8003c28:	e002      	b.n	8003c30 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e000      	b.n	8003c30 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	4a56      	ldr	r2, [pc, #344]	; (8003d8c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003c32:	60d3      	str	r3, [r2, #12]
 8003c34:	e05b      	b.n	8003cee <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a48      	ldr	r2, [pc, #288]	; (8003d5c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d053      	beq.n	8003ce8 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a46      	ldr	r2, [pc, #280]	; (8003d60 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d04c      	beq.n	8003ce4 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a45      	ldr	r2, [pc, #276]	; (8003d64 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d045      	beq.n	8003ce0 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a43      	ldr	r2, [pc, #268]	; (8003d68 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d03e      	beq.n	8003cdc <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a42      	ldr	r2, [pc, #264]	; (8003d6c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d037      	beq.n	8003cd8 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a40      	ldr	r2, [pc, #256]	; (8003d70 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d030      	beq.n	8003cd4 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a3f      	ldr	r2, [pc, #252]	; (8003d74 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d029      	beq.n	8003cd0 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a3d      	ldr	r2, [pc, #244]	; (8003d78 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d022      	beq.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a3c      	ldr	r2, [pc, #240]	; (8003d7c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d01a      	beq.n	8003cc6 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a3a      	ldr	r2, [pc, #232]	; (8003d80 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d012      	beq.n	8003cc0 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a39      	ldr	r2, [pc, #228]	; (8003d84 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d00a      	beq.n	8003cba <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a37      	ldr	r2, [pc, #220]	; (8003d88 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d102      	bne.n	8003cb4 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 8003cae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cb2:	e01a      	b.n	8003cea <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003cb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cb8:	e017      	b.n	8003cea <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003cba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cbe:	e014      	b.n	8003cea <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003cc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cc4:	e011      	b.n	8003cea <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003cc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cca:	e00e      	b.n	8003cea <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003ccc:	2340      	movs	r3, #64	; 0x40
 8003cce:	e00c      	b.n	8003cea <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003cd0:	2340      	movs	r3, #64	; 0x40
 8003cd2:	e00a      	b.n	8003cea <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003cd4:	2340      	movs	r3, #64	; 0x40
 8003cd6:	e008      	b.n	8003cea <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003cd8:	2340      	movs	r3, #64	; 0x40
 8003cda:	e006      	b.n	8003cea <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e004      	b.n	8003cea <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e002      	b.n	8003cea <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e000      	b.n	8003cea <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	4a28      	ldr	r2, [pc, #160]	; (8003d8c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003cec:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 0216 	orr.w	r2, r2, #22
 8003cfc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d103      	bne.n	8003d1e <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d007      	beq.n	8003d2e <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f042 0208 	orr.w	r2, r2, #8
 8003d2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0201 	orr.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	e005      	b.n	8003d4c <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40026058 	.word	0x40026058
 8003d5c:	40026010 	.word	0x40026010
 8003d60:	40026410 	.word	0x40026410
 8003d64:	40026070 	.word	0x40026070
 8003d68:	40026470 	.word	0x40026470
 8003d6c:	40026028 	.word	0x40026028
 8003d70:	40026428 	.word	0x40026428
 8003d74:	40026088 	.word	0x40026088
 8003d78:	40026488 	.word	0x40026488
 8003d7c:	40026040 	.word	0x40026040
 8003d80:	40026440 	.word	0x40026440
 8003d84:	400260a0 	.word	0x400260a0
 8003d88:	400264a0 	.word	0x400264a0
 8003d8c:	40026000 	.word	0x40026000

08003d90 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8003d9e:	79fb      	ldrb	r3, [r7, #7]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d104      	bne.n	8003dae <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	60da      	str	r2, [r3, #12]
 8003dac:	e003      	b.n	8003db6 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2b40      	cmp	r3, #64	; 0x40
 8003de0:	d108      	bne.n	8003df4 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003df2:	e007      	b.n	8003e04 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	60da      	str	r2, [r3, #12]
}
 8003e04:	bf00      	nop
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b089      	sub	sp, #36	; 0x24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e26:	2300      	movs	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]
 8003e2a:	e16b      	b.n	8004104 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	f040 815a 	bne.w	80040fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d005      	beq.n	8003e62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d130      	bne.n	8003ec4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	2203      	movs	r2, #3
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	43db      	mvns	r3, r3
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	4013      	ands	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e98:	2201      	movs	r2, #1
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	091b      	lsrs	r3, r3, #4
 8003eae:	f003 0201 	and.w	r2, r3, #1
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 0303 	and.w	r3, r3, #3
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d017      	beq.n	8003f00 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	2203      	movs	r2, #3
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d123      	bne.n	8003f54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	08da      	lsrs	r2, r3, #3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3208      	adds	r2, #8
 8003f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	220f      	movs	r2, #15
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	691a      	ldr	r2, [r3, #16]
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	08da      	lsrs	r2, r3, #3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	3208      	adds	r2, #8
 8003f4e:	69b9      	ldr	r1, [r7, #24]
 8003f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	2203      	movs	r2, #3
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 0203 	and.w	r2, r3, #3
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 80b4 	beq.w	80040fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	4b60      	ldr	r3, [pc, #384]	; (800411c <HAL_GPIO_Init+0x30c>)
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9e:	4a5f      	ldr	r2, [pc, #380]	; (800411c <HAL_GPIO_Init+0x30c>)
 8003fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8003fa6:	4b5d      	ldr	r3, [pc, #372]	; (800411c <HAL_GPIO_Init+0x30c>)
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fb2:	4a5b      	ldr	r2, [pc, #364]	; (8004120 <HAL_GPIO_Init+0x310>)
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	089b      	lsrs	r3, r3, #2
 8003fb8:	3302      	adds	r3, #2
 8003fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	220f      	movs	r2, #15
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a52      	ldr	r2, [pc, #328]	; (8004124 <HAL_GPIO_Init+0x314>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d02b      	beq.n	8004036 <HAL_GPIO_Init+0x226>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a51      	ldr	r2, [pc, #324]	; (8004128 <HAL_GPIO_Init+0x318>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d025      	beq.n	8004032 <HAL_GPIO_Init+0x222>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a50      	ldr	r2, [pc, #320]	; (800412c <HAL_GPIO_Init+0x31c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d01f      	beq.n	800402e <HAL_GPIO_Init+0x21e>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a4f      	ldr	r2, [pc, #316]	; (8004130 <HAL_GPIO_Init+0x320>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d019      	beq.n	800402a <HAL_GPIO_Init+0x21a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a4e      	ldr	r2, [pc, #312]	; (8004134 <HAL_GPIO_Init+0x324>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d013      	beq.n	8004026 <HAL_GPIO_Init+0x216>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a4d      	ldr	r2, [pc, #308]	; (8004138 <HAL_GPIO_Init+0x328>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00d      	beq.n	8004022 <HAL_GPIO_Init+0x212>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a4c      	ldr	r2, [pc, #304]	; (800413c <HAL_GPIO_Init+0x32c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d007      	beq.n	800401e <HAL_GPIO_Init+0x20e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a4b      	ldr	r2, [pc, #300]	; (8004140 <HAL_GPIO_Init+0x330>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d101      	bne.n	800401a <HAL_GPIO_Init+0x20a>
 8004016:	2307      	movs	r3, #7
 8004018:	e00e      	b.n	8004038 <HAL_GPIO_Init+0x228>
 800401a:	2308      	movs	r3, #8
 800401c:	e00c      	b.n	8004038 <HAL_GPIO_Init+0x228>
 800401e:	2306      	movs	r3, #6
 8004020:	e00a      	b.n	8004038 <HAL_GPIO_Init+0x228>
 8004022:	2305      	movs	r3, #5
 8004024:	e008      	b.n	8004038 <HAL_GPIO_Init+0x228>
 8004026:	2304      	movs	r3, #4
 8004028:	e006      	b.n	8004038 <HAL_GPIO_Init+0x228>
 800402a:	2303      	movs	r3, #3
 800402c:	e004      	b.n	8004038 <HAL_GPIO_Init+0x228>
 800402e:	2302      	movs	r3, #2
 8004030:	e002      	b.n	8004038 <HAL_GPIO_Init+0x228>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <HAL_GPIO_Init+0x228>
 8004036:	2300      	movs	r3, #0
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	f002 0203 	and.w	r2, r2, #3
 800403e:	0092      	lsls	r2, r2, #2
 8004040:	4093      	lsls	r3, r2
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4313      	orrs	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004048:	4935      	ldr	r1, [pc, #212]	; (8004120 <HAL_GPIO_Init+0x310>)
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	089b      	lsrs	r3, r3, #2
 800404e:	3302      	adds	r3, #2
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004056:	4b3b      	ldr	r3, [pc, #236]	; (8004144 <HAL_GPIO_Init+0x334>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	43db      	mvns	r3, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4013      	ands	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800407a:	4a32      	ldr	r2, [pc, #200]	; (8004144 <HAL_GPIO_Init+0x334>)
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004080:	4b30      	ldr	r3, [pc, #192]	; (8004144 <HAL_GPIO_Init+0x334>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	43db      	mvns	r3, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4013      	ands	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040a4:	4a27      	ldr	r2, [pc, #156]	; (8004144 <HAL_GPIO_Init+0x334>)
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040aa:	4b26      	ldr	r3, [pc, #152]	; (8004144 <HAL_GPIO_Init+0x334>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	43db      	mvns	r3, r3
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4013      	ands	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040ce:	4a1d      	ldr	r2, [pc, #116]	; (8004144 <HAL_GPIO_Init+0x334>)
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040d4:	4b1b      	ldr	r3, [pc, #108]	; (8004144 <HAL_GPIO_Init+0x334>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	43db      	mvns	r3, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4013      	ands	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040f8:	4a12      	ldr	r2, [pc, #72]	; (8004144 <HAL_GPIO_Init+0x334>)
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	3301      	adds	r3, #1
 8004102:	61fb      	str	r3, [r7, #28]
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	2b0f      	cmp	r3, #15
 8004108:	f67f ae90 	bls.w	8003e2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800410c:	bf00      	nop
 800410e:	bf00      	nop
 8004110:	3724      	adds	r7, #36	; 0x24
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800
 8004120:	40013800 	.word	0x40013800
 8004124:	40020000 	.word	0x40020000
 8004128:	40020400 	.word	0x40020400
 800412c:	40020800 	.word	0x40020800
 8004130:	40020c00 	.word	0x40020c00
 8004134:	40021000 	.word	0x40021000
 8004138:	40021400 	.word	0x40021400
 800413c:	40021800 	.word	0x40021800
 8004140:	40021c00 	.word	0x40021c00
 8004144:	40013c00 	.word	0x40013c00

08004148 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691a      	ldr	r2, [r3, #16]
 8004158:	887b      	ldrh	r3, [r7, #2]
 800415a:	4013      	ands	r3, r2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004160:	2301      	movs	r3, #1
 8004162:	73fb      	strb	r3, [r7, #15]
 8004164:	e001      	b.n	800416a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004166:	2300      	movs	r3, #0
 8004168:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800416a:	7bfb      	ldrb	r3, [r7, #15]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	807b      	strh	r3, [r7, #2]
 8004184:	4613      	mov	r3, r2
 8004186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004188:	787b      	ldrb	r3, [r7, #1]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800418e:	887a      	ldrh	r2, [r7, #2]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004194:	e003      	b.n	800419e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004196:	887b      	ldrh	r3, [r7, #2]
 8004198:	041a      	lsls	r2, r3, #16
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	619a      	str	r2, [r3, #24]
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80041aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ac:	b08f      	sub	sp, #60	; 0x3c
 80041ae:	af0a      	add	r7, sp, #40	; 0x28
 80041b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e10f      	b.n	80043dc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d106      	bne.n	80041dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f005 ff4e 	bl	800a078 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2203      	movs	r2, #3
 80041e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d102      	bne.n	80041f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f002 fe89 	bl	8006f12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	603b      	str	r3, [r7, #0]
 8004206:	687e      	ldr	r6, [r7, #4]
 8004208:	466d      	mov	r5, sp
 800420a:	f106 0410 	add.w	r4, r6, #16
 800420e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004216:	e894 0003 	ldmia.w	r4, {r0, r1}
 800421a:	e885 0003 	stmia.w	r5, {r0, r1}
 800421e:	1d33      	adds	r3, r6, #4
 8004220:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004222:	6838      	ldr	r0, [r7, #0]
 8004224:	f002 fd60 	bl	8006ce8 <USB_CoreInit>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d005      	beq.n	800423a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2202      	movs	r2, #2
 8004232:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e0d0      	b.n	80043dc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2100      	movs	r1, #0
 8004240:	4618      	mov	r0, r3
 8004242:	f002 fe77 	bl	8006f34 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004246:	2300      	movs	r3, #0
 8004248:	73fb      	strb	r3, [r7, #15]
 800424a:	e04a      	b.n	80042e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800424c:	7bfa      	ldrb	r2, [r7, #15]
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	4613      	mov	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	333d      	adds	r3, #61	; 0x3d
 800425c:	2201      	movs	r2, #1
 800425e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004260:	7bfa      	ldrb	r2, [r7, #15]
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	1a9b      	subs	r3, r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	333c      	adds	r3, #60	; 0x3c
 8004270:	7bfa      	ldrb	r2, [r7, #15]
 8004272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004274:	7bfa      	ldrb	r2, [r7, #15]
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	b298      	uxth	r0, r3
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	1a9b      	subs	r3, r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	3342      	adds	r3, #66	; 0x42
 8004288:	4602      	mov	r2, r0
 800428a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800428c:	7bfa      	ldrb	r2, [r7, #15]
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	1a9b      	subs	r3, r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	333f      	adds	r3, #63	; 0x3f
 800429c:	2200      	movs	r2, #0
 800429e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042a0:	7bfa      	ldrb	r2, [r7, #15]
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	1a9b      	subs	r3, r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	440b      	add	r3, r1
 80042ae:	3344      	adds	r3, #68	; 0x44
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80042b4:	7bfa      	ldrb	r2, [r7, #15]
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	4613      	mov	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	1a9b      	subs	r3, r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	3348      	adds	r3, #72	; 0x48
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042c8:	7bfa      	ldrb	r2, [r7, #15]
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	4613      	mov	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	3350      	adds	r3, #80	; 0x50
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	3301      	adds	r3, #1
 80042e0:	73fb      	strb	r3, [r7, #15]
 80042e2:	7bfa      	ldrb	r2, [r7, #15]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d3af      	bcc.n	800424c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042ec:	2300      	movs	r3, #0
 80042ee:	73fb      	strb	r3, [r7, #15]
 80042f0:	e044      	b.n	800437c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042f2:	7bfa      	ldrb	r2, [r7, #15]
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	4613      	mov	r3, r2
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	1a9b      	subs	r3, r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	440b      	add	r3, r1
 8004300:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004304:	2200      	movs	r2, #0
 8004306:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004308:	7bfa      	ldrb	r2, [r7, #15]
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	4613      	mov	r3, r2
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	1a9b      	subs	r3, r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800431a:	7bfa      	ldrb	r2, [r7, #15]
 800431c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800431e:	7bfa      	ldrb	r2, [r7, #15]
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	1a9b      	subs	r3, r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	440b      	add	r3, r1
 800432c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004330:	2200      	movs	r2, #0
 8004332:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004334:	7bfa      	ldrb	r2, [r7, #15]
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	4613      	mov	r3, r2
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800434a:	7bfa      	ldrb	r2, [r7, #15]
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	1a9b      	subs	r3, r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004360:	7bfa      	ldrb	r2, [r7, #15]
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	4613      	mov	r3, r2
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	1a9b      	subs	r3, r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004376:	7bfb      	ldrb	r3, [r7, #15]
 8004378:	3301      	adds	r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]
 800437c:	7bfa      	ldrb	r2, [r7, #15]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	429a      	cmp	r2, r3
 8004384:	d3b5      	bcc.n	80042f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	687e      	ldr	r6, [r7, #4]
 800438e:	466d      	mov	r5, sp
 8004390:	f106 0410 	add.w	r4, r6, #16
 8004394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800439a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800439c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80043a4:	1d33      	adds	r3, r6, #4
 80043a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043a8:	6838      	ldr	r0, [r7, #0]
 80043aa:	f002 fded 	bl	8006f88 <USB_DevInit>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e00d      	b.n	80043dc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f003 fe35 	bl	8008044 <USB_DevDisconnect>

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d101      	bne.n	8004400 <HAL_PCD_Start+0x1c>
 80043fc:	2302      	movs	r3, #2
 80043fe:	e020      	b.n	8004442 <HAL_PCD_Start+0x5e>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440c:	2b01      	cmp	r3, #1
 800440e:	d109      	bne.n	8004424 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004414:	2b01      	cmp	r3, #1
 8004416:	d005      	beq.n	8004424 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4618      	mov	r0, r3
 800442a:	f002 fd61 	bl	8006ef0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f003 fde5 	bl	8008002 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800444a:	b590      	push	{r4, r7, lr}
 800444c:	b08d      	sub	sp, #52	; 0x34
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f003 fea3 	bl	80081ac <USB_GetMode>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	f040 839d 	bne.w	8004ba8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f003 fe07 	bl	8008086 <USB_ReadInterrupts>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 8393 	beq.w	8004ba6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f003 fdfe 	bl	8008086 <USB_ReadInterrupts>
 800448a:	4603      	mov	r3, r0
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b02      	cmp	r3, #2
 8004492:	d107      	bne.n	80044a4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695a      	ldr	r2, [r3, #20]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f002 0202 	and.w	r2, r2, #2
 80044a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f003 fdec 	bl	8008086 <USB_ReadInterrupts>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f003 0310 	and.w	r3, r3, #16
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	d161      	bne.n	800457c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0210 	bic.w	r2, r2, #16
 80044c6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	f003 020f 	and.w	r2, r3, #15
 80044d4:	4613      	mov	r3, r2
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	4413      	add	r3, r2
 80044e4:	3304      	adds	r3, #4
 80044e6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	0c5b      	lsrs	r3, r3, #17
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d124      	bne.n	800453e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80044fa:	4013      	ands	r3, r2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d035      	beq.n	800456c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	091b      	lsrs	r3, r3, #4
 8004508:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800450a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800450e:	b29b      	uxth	r3, r3
 8004510:	461a      	mov	r2, r3
 8004512:	6a38      	ldr	r0, [r7, #32]
 8004514:	f003 fc52 	bl	8007dbc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	091b      	lsrs	r3, r3, #4
 8004520:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004524:	441a      	add	r2, r3
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	091b      	lsrs	r3, r3, #4
 8004532:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004536:	441a      	add	r2, r3
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	619a      	str	r2, [r3, #24]
 800453c:	e016      	b.n	800456c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	0c5b      	lsrs	r3, r3, #17
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	2b06      	cmp	r3, #6
 8004548:	d110      	bne.n	800456c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004550:	2208      	movs	r2, #8
 8004552:	4619      	mov	r1, r3
 8004554:	6a38      	ldr	r0, [r7, #32]
 8004556:	f003 fc31 	bl	8007dbc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	699a      	ldr	r2, [r3, #24]
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	091b      	lsrs	r3, r3, #4
 8004562:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004566:	441a      	add	r2, r3
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699a      	ldr	r2, [r3, #24]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0210 	orr.w	r2, r2, #16
 800457a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f003 fd80 	bl	8008086 <USB_ReadInterrupts>
 8004586:	4603      	mov	r3, r0
 8004588:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800458c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004590:	d16e      	bne.n	8004670 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f003 fd86 	bl	80080ac <USB_ReadDevAllOutEpInterrupt>
 80045a0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80045a2:	e062      	b.n	800466a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d057      	beq.n	800465e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	4611      	mov	r1, r2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f003 fdab 	bl	8008114 <USB_ReadDevOutEPInterrupt>
 80045be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00c      	beq.n	80045e4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d6:	461a      	mov	r2, r3
 80045d8:	2301      	movs	r3, #1
 80045da:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80045dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 fdb0 	bl	8005144 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00c      	beq.n	8004608 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fa:	461a      	mov	r2, r3
 80045fc:	2308      	movs	r3, #8
 80045fe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004600:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 feaa 	bl	800535c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f003 0310 	and.w	r3, r3, #16
 800460e:	2b00      	cmp	r3, #0
 8004610:	d008      	beq.n	8004624 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461e:	461a      	mov	r2, r3
 8004620:	2310      	movs	r3, #16
 8004622:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b00      	cmp	r3, #0
 800462c:	d008      	beq.n	8004640 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463a:	461a      	mov	r2, r3
 800463c:	2320      	movs	r3, #32
 800463e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d009      	beq.n	800465e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004656:	461a      	mov	r2, r3
 8004658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800465c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	3301      	adds	r3, #1
 8004662:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004666:	085b      	lsrs	r3, r3, #1
 8004668:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800466a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466c:	2b00      	cmp	r3, #0
 800466e:	d199      	bne.n	80045a4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4618      	mov	r0, r3
 8004676:	f003 fd06 	bl	8008086 <USB_ReadInterrupts>
 800467a:	4603      	mov	r3, r0
 800467c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004680:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004684:	f040 80c0 	bne.w	8004808 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f003 fd27 	bl	80080e0 <USB_ReadDevAllInEpInterrupt>
 8004692:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004698:	e0b2      	b.n	8004800 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 80a7 	beq.w	80047f4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	4611      	mov	r1, r2
 80046b0:	4618      	mov	r0, r3
 80046b2:	f003 fd4d 	bl	8008150 <USB_ReadDevInEPInterrupt>
 80046b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d057      	beq.n	8004772 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	f003 030f 	and.w	r3, r3, #15
 80046c8:	2201      	movs	r2, #1
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	43db      	mvns	r3, r3
 80046dc:	69f9      	ldr	r1, [r7, #28]
 80046de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046e2:	4013      	ands	r3, r2
 80046e4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f2:	461a      	mov	r2, r3
 80046f4:	2301      	movs	r3, #1
 80046f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d132      	bne.n	8004766 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004704:	4613      	mov	r3, r2
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	3348      	adds	r3, #72	; 0x48
 8004710:	6819      	ldr	r1, [r3, #0]
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004716:	4613      	mov	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	1a9b      	subs	r3, r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4403      	add	r3, r0
 8004720:	3344      	adds	r3, #68	; 0x44
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4419      	add	r1, r3
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472a:	4613      	mov	r3, r2
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	1a9b      	subs	r3, r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4403      	add	r3, r0
 8004734:	3348      	adds	r3, #72	; 0x48
 8004736:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	2b00      	cmp	r3, #0
 800473c:	d113      	bne.n	8004766 <HAL_PCD_IRQHandler+0x31c>
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004742:	4613      	mov	r3, r2
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	1a9b      	subs	r3, r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	3350      	adds	r3, #80	; 0x50
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d108      	bne.n	8004766 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6818      	ldr	r0, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800475e:	461a      	mov	r2, r3
 8004760:	2101      	movs	r1, #1
 8004762:	f003 fd55 	bl	8008210 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	b2db      	uxtb	r3, r3
 800476a:	4619      	mov	r1, r3
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f005 fd04 	bl	800a17a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b00      	cmp	r3, #0
 800477a:	d008      	beq.n	800478e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004788:	461a      	mov	r2, r3
 800478a:	2308      	movs	r3, #8
 800478c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b00      	cmp	r3, #0
 8004796:	d008      	beq.n	80047aa <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a4:	461a      	mov	r2, r3
 80047a6:	2310      	movs	r3, #16
 80047a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d008      	beq.n	80047c6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c0:	461a      	mov	r2, r3
 80047c2:	2340      	movs	r3, #64	; 0x40
 80047c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d008      	beq.n	80047e2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047dc:	461a      	mov	r2, r3
 80047de:	2302      	movs	r3, #2
 80047e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80047ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fc1b 	bl	800502a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	3301      	adds	r3, #1
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80047fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fc:	085b      	lsrs	r3, r3, #1
 80047fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004802:	2b00      	cmp	r3, #0
 8004804:	f47f af49 	bne.w	800469a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f003 fc3a 	bl	8008086 <USB_ReadInterrupts>
 8004812:	4603      	mov	r3, r0
 8004814:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004818:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800481c:	d122      	bne.n	8004864 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800482c:	f023 0301 	bic.w	r3, r3, #1
 8004830:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004838:	2b01      	cmp	r3, #1
 800483a:	d108      	bne.n	800484e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004844:	2100      	movs	r1, #0
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fe26 	bl	8005498 <HAL_PCDEx_LPM_Callback>
 800484c:	e002      	b.n	8004854 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f005 fd0a 	bl	800a268 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004862:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f003 fc0c 	bl	8008086 <USB_ReadInterrupts>
 800486e:	4603      	mov	r3, r0
 8004870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004878:	d112      	bne.n	80048a0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b01      	cmp	r3, #1
 8004888:	d102      	bne.n	8004890 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f005 fcc6 	bl	800a21c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695a      	ldr	r2, [r3, #20]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800489e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f003 fbee 	bl	8008086 <USB_ReadInterrupts>
 80048aa:	4603      	mov	r3, r0
 80048ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b4:	f040 80c7 	bne.w	8004a46 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	69fa      	ldr	r2, [r7, #28]
 80048c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048c6:	f023 0301 	bic.w	r3, r3, #1
 80048ca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2110      	movs	r1, #16
 80048d2:	4618      	mov	r0, r3
 80048d4:	f002 fcbc 	bl	8007250 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048d8:	2300      	movs	r3, #0
 80048da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048dc:	e056      	b.n	800498c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80048de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ea:	461a      	mov	r2, r3
 80048ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048f0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80048f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004902:	0151      	lsls	r1, r2, #5
 8004904:	69fa      	ldr	r2, [r7, #28]
 8004906:	440a      	add	r2, r1
 8004908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800490c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004910:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004922:	0151      	lsls	r1, r2, #5
 8004924:	69fa      	ldr	r2, [r7, #28]
 8004926:	440a      	add	r2, r1
 8004928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800492c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004930:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493e:	461a      	mov	r2, r3
 8004940:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004944:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004956:	0151      	lsls	r1, r2, #5
 8004958:	69fa      	ldr	r2, [r7, #28]
 800495a:	440a      	add	r2, r1
 800495c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004960:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004964:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004976:	0151      	lsls	r1, r2, #5
 8004978:	69fa      	ldr	r2, [r7, #28]
 800497a:	440a      	add	r2, r1
 800497c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004980:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004984:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004988:	3301      	adds	r3, #1
 800498a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004992:	429a      	cmp	r2, r3
 8004994:	d3a3      	bcc.n	80048de <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	69fa      	ldr	r2, [r7, #28]
 80049a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049a4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80049a8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d016      	beq.n	80049e0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049bc:	69fa      	ldr	r2, [r7, #28]
 80049be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049c2:	f043 030b 	orr.w	r3, r3, #11
 80049c6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d2:	69fa      	ldr	r2, [r7, #28]
 80049d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049d8:	f043 030b 	orr.w	r3, r3, #11
 80049dc:	6453      	str	r3, [r2, #68]	; 0x44
 80049de:	e015      	b.n	8004a0c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	69fa      	ldr	r2, [r7, #28]
 80049ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80049f2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80049f6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	69fa      	ldr	r2, [r7, #28]
 8004a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a06:	f043 030b 	orr.w	r3, r3, #11
 8004a0a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	69fa      	ldr	r2, [r7, #28]
 8004a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a1a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004a1e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6818      	ldr	r0, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a30:	461a      	mov	r2, r3
 8004a32:	f003 fbed 	bl	8008210 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695a      	ldr	r2, [r3, #20]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004a44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f003 fb1b 	bl	8008086 <USB_ReadInterrupts>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a5a:	d124      	bne.n	8004aa6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f003 fbb1 	bl	80081c8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f002 fc51 	bl	8007312 <USB_GetDevSpeed>
 8004a70:	4603      	mov	r3, r0
 8004a72:	461a      	mov	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681c      	ldr	r4, [r3, #0]
 8004a7c:	f001 f994 	bl	8005da8 <HAL_RCC_GetHCLKFreq>
 8004a80:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	461a      	mov	r2, r3
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	f002 f98e 	bl	8006dac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f005 fb9a 	bl	800a1ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695a      	ldr	r2, [r3, #20]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004aa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f003 faeb 	bl	8008086 <USB_ReadInterrupts>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	2b08      	cmp	r3, #8
 8004ab8:	d10a      	bne.n	8004ad0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f005 fb77 	bl	800a1ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695a      	ldr	r2, [r3, #20]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f002 0208 	and.w	r2, r2, #8
 8004ace:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f003 fad6 	bl	8008086 <USB_ReadInterrupts>
 8004ada:	4603      	mov	r3, r0
 8004adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ae0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ae4:	d10f      	bne.n	8004b06 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	4619      	mov	r1, r3
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f005 fbd9 	bl	800a2a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695a      	ldr	r2, [r3, #20]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004b04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f003 fabb 	bl	8008086 <USB_ReadInterrupts>
 8004b10:	4603      	mov	r3, r0
 8004b12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b1a:	d10f      	bne.n	8004b3c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	4619      	mov	r1, r3
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f005 fbac 	bl	800a284 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695a      	ldr	r2, [r3, #20]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004b3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f003 faa0 	bl	8008086 <USB_ReadInterrupts>
 8004b46:	4603      	mov	r3, r0
 8004b48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b50:	d10a      	bne.n	8004b68 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f005 fbba 	bl	800a2cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	695a      	ldr	r2, [r3, #20]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004b66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f003 fa8a 	bl	8008086 <USB_ReadInterrupts>
 8004b72:	4603      	mov	r3, r0
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d115      	bne.n	8004ba8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f005 fbaa 	bl	800a2e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6859      	ldr	r1, [r3, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	605a      	str	r2, [r3, #4]
 8004ba4:	e000      	b.n	8004ba8 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004ba6:	bf00      	nop
    }
  }
}
 8004ba8:	3734      	adds	r7, #52	; 0x34
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd90      	pop	{r4, r7, pc}

08004bae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b082      	sub	sp, #8
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d101      	bne.n	8004bc8 <HAL_PCD_SetAddress+0x1a>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	e013      	b.n	8004bf0 <HAL_PCD_SetAddress+0x42>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	78fa      	ldrb	r2, [r7, #3]
 8004bd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	78fa      	ldrb	r2, [r7, #3]
 8004bde:	4611      	mov	r1, r2
 8004be0:	4618      	mov	r0, r3
 8004be2:	f003 f9e8 	bl	8007fb6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	4608      	mov	r0, r1
 8004c02:	4611      	mov	r1, r2
 8004c04:	461a      	mov	r2, r3
 8004c06:	4603      	mov	r3, r0
 8004c08:	70fb      	strb	r3, [r7, #3]
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	803b      	strh	r3, [r7, #0]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	da0f      	bge.n	8004c3e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c1e:	78fb      	ldrb	r3, [r7, #3]
 8004c20:	f003 020f 	and.w	r2, r3, #15
 8004c24:	4613      	mov	r3, r2
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	1a9b      	subs	r3, r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	3338      	adds	r3, #56	; 0x38
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	4413      	add	r3, r2
 8004c32:	3304      	adds	r3, #4
 8004c34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	705a      	strb	r2, [r3, #1]
 8004c3c:	e00f      	b.n	8004c5e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	f003 020f 	and.w	r2, r3, #15
 8004c44:	4613      	mov	r3, r2
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	1a9b      	subs	r3, r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	4413      	add	r3, r2
 8004c54:	3304      	adds	r3, #4
 8004c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004c5e:	78fb      	ldrb	r3, [r7, #3]
 8004c60:	f003 030f 	and.w	r3, r3, #15
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004c6a:	883a      	ldrh	r2, [r7, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	78ba      	ldrb	r2, [r7, #2]
 8004c74:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	785b      	ldrb	r3, [r3, #1]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d004      	beq.n	8004c88 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004c88:	78bb      	ldrb	r3, [r7, #2]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d102      	bne.n	8004c94 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <HAL_PCD_EP_Open+0xaa>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e00e      	b.n	8004cc0 <HAL_PCD_EP_Open+0xc8>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68f9      	ldr	r1, [r7, #12]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f002 fb53 	bl	800735c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004cbe:	7afb      	ldrb	r3, [r7, #11]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004cd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	da0f      	bge.n	8004cfc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	f003 020f 	and.w	r2, r3, #15
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	1a9b      	subs	r3, r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	3338      	adds	r3, #56	; 0x38
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	4413      	add	r3, r2
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	705a      	strb	r2, [r3, #1]
 8004cfa:	e00f      	b.n	8004d1c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cfc:	78fb      	ldrb	r3, [r7, #3]
 8004cfe:	f003 020f 	and.w	r2, r3, #15
 8004d02:	4613      	mov	r3, r2
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	1a9b      	subs	r3, r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	4413      	add	r3, r2
 8004d12:	3304      	adds	r3, #4
 8004d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004d1c:	78fb      	ldrb	r3, [r7, #3]
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	b2da      	uxtb	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_PCD_EP_Close+0x6e>
 8004d32:	2302      	movs	r3, #2
 8004d34:	e00e      	b.n	8004d54 <HAL_PCD_EP_Close+0x8c>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68f9      	ldr	r1, [r7, #12]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f002 fb91 	bl	800746c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	607a      	str	r2, [r7, #4]
 8004d66:	603b      	str	r3, [r7, #0]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d6c:	7afb      	ldrb	r3, [r7, #11]
 8004d6e:	f003 020f 	and.w	r2, r3, #15
 8004d72:	4613      	mov	r3, r2
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	1a9b      	subs	r3, r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	4413      	add	r3, r2
 8004d82:	3304      	adds	r3, #4
 8004d84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2200      	movs	r2, #0
 8004d96:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d9e:	7afb      	ldrb	r3, [r7, #11]
 8004da0:	f003 030f 	and.w	r3, r3, #15
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d102      	bne.n	8004db8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004db8:	7afb      	ldrb	r3, [r7, #11]
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d109      	bne.n	8004dd6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6818      	ldr	r0, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	461a      	mov	r2, r3
 8004dce:	6979      	ldr	r1, [r7, #20]
 8004dd0:	f002 fe6c 	bl	8007aac <USB_EP0StartXfer>
 8004dd4:	e008      	b.n	8004de8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6818      	ldr	r0, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	461a      	mov	r2, r3
 8004de2:	6979      	ldr	r1, [r7, #20]
 8004de4:	f002 fc1e 	bl	8007624 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004dfe:	78fb      	ldrb	r3, [r7, #3]
 8004e00:	f003 020f 	and.w	r2, r3, #15
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	4613      	mov	r3, r2
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	1a9b      	subs	r3, r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	440b      	add	r3, r1
 8004e10:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004e14:	681b      	ldr	r3, [r3, #0]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b086      	sub	sp, #24
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	603b      	str	r3, [r7, #0]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e32:	7afb      	ldrb	r3, [r7, #11]
 8004e34:	f003 020f 	and.w	r2, r3, #15
 8004e38:	4613      	mov	r3, r2
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	1a9b      	subs	r3, r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	3338      	adds	r3, #56	; 0x38
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	4413      	add	r3, r2
 8004e46:	3304      	adds	r3, #4
 8004e48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e62:	7afb      	ldrb	r3, [r7, #11]
 8004e64:	f003 030f 	and.w	r3, r3, #15
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d102      	bne.n	8004e7c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e7c:	7afb      	ldrb	r3, [r7, #11]
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6818      	ldr	r0, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	461a      	mov	r2, r3
 8004e92:	6979      	ldr	r1, [r7, #20]
 8004e94:	f002 fe0a 	bl	8007aac <USB_EP0StartXfer>
 8004e98:	e008      	b.n	8004eac <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	6979      	ldr	r1, [r7, #20]
 8004ea8:	f002 fbbc 	bl	8007624 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3718      	adds	r7, #24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b084      	sub	sp, #16
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ec2:	78fb      	ldrb	r3, [r7, #3]
 8004ec4:	f003 020f 	and.w	r2, r3, #15
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d901      	bls.n	8004ed4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e050      	b.n	8004f76 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	da0f      	bge.n	8004efc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	f003 020f 	and.w	r2, r3, #15
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	3338      	adds	r3, #56	; 0x38
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	4413      	add	r3, r2
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	705a      	strb	r2, [r3, #1]
 8004efa:	e00d      	b.n	8004f18 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004efc:	78fa      	ldrb	r2, [r7, #3]
 8004efe:	4613      	mov	r3, r2
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	1a9b      	subs	r3, r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	3304      	adds	r3, #4
 8004f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f1e:	78fb      	ldrb	r3, [r7, #3]
 8004f20:	f003 030f 	and.w	r3, r3, #15
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <HAL_PCD_EP_SetStall+0x82>
 8004f34:	2302      	movs	r3, #2
 8004f36:	e01e      	b.n	8004f76 <HAL_PCD_EP_SetStall+0xc0>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68f9      	ldr	r1, [r7, #12]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f002 ff61 	bl	8007e0e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f4c:	78fb      	ldrb	r3, [r7, #3]
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10a      	bne.n	8004f6c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	b2d9      	uxtb	r1, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004f66:	461a      	mov	r2, r3
 8004f68:	f003 f952 	bl	8008210 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b084      	sub	sp, #16
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
 8004f86:	460b      	mov	r3, r1
 8004f88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004f8a:	78fb      	ldrb	r3, [r7, #3]
 8004f8c:	f003 020f 	and.w	r2, r3, #15
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d901      	bls.n	8004f9c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e042      	b.n	8005022 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	da0f      	bge.n	8004fc4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fa4:	78fb      	ldrb	r3, [r7, #3]
 8004fa6:	f003 020f 	and.w	r2, r3, #15
 8004faa:	4613      	mov	r3, r2
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	1a9b      	subs	r3, r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	3338      	adds	r3, #56	; 0x38
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	3304      	adds	r3, #4
 8004fba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	705a      	strb	r2, [r3, #1]
 8004fc2:	e00f      	b.n	8004fe4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	f003 020f 	and.w	r2, r3, #15
 8004fca:	4613      	mov	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	1a9b      	subs	r3, r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	4413      	add	r3, r2
 8004fda:	3304      	adds	r3, #4
 8004fdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fea:	78fb      	ldrb	r3, [r7, #3]
 8004fec:	f003 030f 	and.w	r3, r3, #15
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_PCD_EP_ClrStall+0x86>
 8005000:	2302      	movs	r3, #2
 8005002:	e00e      	b.n	8005022 <HAL_PCD_EP_ClrStall+0xa4>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68f9      	ldr	r1, [r7, #12]
 8005012:	4618      	mov	r0, r3
 8005014:	f002 ff69 	bl	8007eea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b08a      	sub	sp, #40	; 0x28
 800502e:	af02      	add	r7, sp, #8
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	4613      	mov	r3, r2
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	1a9b      	subs	r3, r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	3338      	adds	r3, #56	; 0x38
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	4413      	add	r3, r2
 800504e:	3304      	adds	r3, #4
 8005050:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	429a      	cmp	r2, r3
 800505c:	d901      	bls.n	8005062 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e06c      	b.n	800513c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	695a      	ldr	r2, [r3, #20]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	429a      	cmp	r2, r3
 8005076:	d902      	bls.n	800507e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	3303      	adds	r3, #3
 8005082:	089b      	lsrs	r3, r3, #2
 8005084:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005086:	e02b      	b.n	80050e0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	695a      	ldr	r2, [r3, #20]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	69fa      	ldr	r2, [r7, #28]
 800509a:	429a      	cmp	r2, r3
 800509c:	d902      	bls.n	80050a4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	3303      	adds	r3, #3
 80050a8:	089b      	lsrs	r3, r3, #2
 80050aa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	68d9      	ldr	r1, [r3, #12]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	4603      	mov	r3, r0
 80050c2:	6978      	ldr	r0, [r7, #20]
 80050c4:	f002 fe45 	bl	8007d52 <USB_WritePacket>

    ep->xfer_buff  += len;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	441a      	add	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	699a      	ldr	r2, [r3, #24]
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	441a      	add	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d809      	bhi.n	800510a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	699a      	ldr	r2, [r3, #24]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80050fe:	429a      	cmp	r2, r3
 8005100:	d203      	bcs.n	800510a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1be      	bne.n	8005088 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	695a      	ldr	r2, [r3, #20]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	429a      	cmp	r2, r3
 8005114:	d811      	bhi.n	800513a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	f003 030f 	and.w	r3, r3, #15
 800511c:	2201      	movs	r2, #1
 800511e:	fa02 f303 	lsl.w	r3, r2, r3
 8005122:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	43db      	mvns	r3, r3
 8005130:	6939      	ldr	r1, [r7, #16]
 8005132:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005136:	4013      	ands	r3, r2
 8005138:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3720      	adds	r7, #32
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	333c      	adds	r3, #60	; 0x3c
 800515c:	3304      	adds	r3, #4
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	2b01      	cmp	r3, #1
 8005178:	f040 80a0 	bne.w	80052bc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b00      	cmp	r3, #0
 8005184:	d015      	beq.n	80051b2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4a72      	ldr	r2, [pc, #456]	; (8005354 <PCD_EP_OutXfrComplete_int+0x210>)
 800518a:	4293      	cmp	r3, r2
 800518c:	f240 80dd 	bls.w	800534a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 80d7 	beq.w	800534a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a8:	461a      	mov	r2, r3
 80051aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ae:	6093      	str	r3, [r2, #8]
 80051b0:	e0cb      	b.n	800534a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f003 0320 	and.w	r3, r3, #32
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d009      	beq.n	80051d0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c8:	461a      	mov	r2, r3
 80051ca:	2320      	movs	r3, #32
 80051cc:	6093      	str	r3, [r2, #8]
 80051ce:	e0bc      	b.n	800534a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f040 80b7 	bne.w	800534a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4a5d      	ldr	r2, [pc, #372]	; (8005354 <PCD_EP_OutXfrComplete_int+0x210>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d90f      	bls.n	8005204 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fa:	461a      	mov	r2, r3
 80051fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005200:	6093      	str	r3, [r2, #8]
 8005202:	e0a2      	b.n	800534a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005204:	6879      	ldr	r1, [r7, #4]
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	4613      	mov	r3, r2
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	1a9b      	subs	r3, r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	440b      	add	r3, r1
 8005212:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005216:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	0159      	lsls	r1, r3, #5
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	440b      	add	r3, r1
 8005220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800522a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	4613      	mov	r3, r2
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	1a9b      	subs	r3, r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4403      	add	r3, r0
 800523a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800523e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005240:	6879      	ldr	r1, [r7, #4]
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	4613      	mov	r3, r2
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	1a9b      	subs	r3, r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005252:	6819      	ldr	r1, [r3, #0]
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	4613      	mov	r3, r2
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	1a9b      	subs	r3, r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4403      	add	r3, r0
 8005262:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4419      	add	r1, r3
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	4613      	mov	r3, r2
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	1a9b      	subs	r3, r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4403      	add	r3, r0
 8005278:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800527c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d114      	bne.n	80052ae <PCD_EP_OutXfrComplete_int+0x16a>
 8005284:	6879      	ldr	r1, [r7, #4]
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	4613      	mov	r3, r2
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	1a9b      	subs	r3, r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	440b      	add	r3, r1
 8005292:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d108      	bne.n	80052ae <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6818      	ldr	r0, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80052a6:	461a      	mov	r2, r3
 80052a8:	2101      	movs	r1, #1
 80052aa:	f002 ffb1 	bl	8008210 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	4619      	mov	r1, r3
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f004 ff45 	bl	800a144 <HAL_PCD_DataOutStageCallback>
 80052ba:	e046      	b.n	800534a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4a26      	ldr	r2, [pc, #152]	; (8005358 <PCD_EP_OutXfrComplete_int+0x214>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d124      	bne.n	800530e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052da:	461a      	mov	r2, r3
 80052dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052e0:	6093      	str	r3, [r2, #8]
 80052e2:	e032      	b.n	800534a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d008      	beq.n	8005300 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fa:	461a      	mov	r2, r3
 80052fc:	2320      	movs	r3, #32
 80052fe:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	b2db      	uxtb	r3, r3
 8005304:	4619      	mov	r1, r3
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f004 ff1c 	bl	800a144 <HAL_PCD_DataOutStageCallback>
 800530c:	e01d      	b.n	800534a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d114      	bne.n	800533e <PCD_EP_OutXfrComplete_int+0x1fa>
 8005314:	6879      	ldr	r1, [r7, #4]
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	4613      	mov	r3, r2
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	1a9b      	subs	r3, r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	440b      	add	r3, r1
 8005322:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d108      	bne.n	800533e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6818      	ldr	r0, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005336:	461a      	mov	r2, r3
 8005338:	2100      	movs	r1, #0
 800533a:	f002 ff69 	bl	8008210 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	b2db      	uxtb	r3, r3
 8005342:	4619      	mov	r1, r3
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f004 fefd 	bl	800a144 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	4f54300a 	.word	0x4f54300a
 8005358:	4f54310a 	.word	0x4f54310a

0800535c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	333c      	adds	r3, #60	; 0x3c
 8005374:	3304      	adds	r3, #4
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4a15      	ldr	r2, [pc, #84]	; (80053e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d90e      	bls.n	80053b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005398:	2b00      	cmp	r3, #0
 800539a:	d009      	beq.n	80053b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a8:	461a      	mov	r2, r3
 80053aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f004 feb5 	bl	800a120 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4a0a      	ldr	r2, [pc, #40]	; (80053e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d90c      	bls.n	80053d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d108      	bne.n	80053d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6818      	ldr	r0, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80053d0:	461a      	mov	r2, r3
 80053d2:	2101      	movs	r1, #1
 80053d4:	f002 ff1c 	bl	8008210 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3718      	adds	r7, #24
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	4f54300a 	.word	0x4f54300a

080053e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	70fb      	strb	r3, [r7, #3]
 80053f4:	4613      	mov	r3, r2
 80053f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005400:	78fb      	ldrb	r3, [r7, #3]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d107      	bne.n	8005416 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005406:	883b      	ldrh	r3, [r7, #0]
 8005408:	0419      	lsls	r1, r3, #16
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	430a      	orrs	r2, r1
 8005412:	629a      	str	r2, [r3, #40]	; 0x28
 8005414:	e028      	b.n	8005468 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541c:	0c1b      	lsrs	r3, r3, #16
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	4413      	add	r3, r2
 8005422:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005424:	2300      	movs	r3, #0
 8005426:	73fb      	strb	r3, [r7, #15]
 8005428:	e00d      	b.n	8005446 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	7bfb      	ldrb	r3, [r7, #15]
 8005430:	3340      	adds	r3, #64	; 0x40
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	0c1b      	lsrs	r3, r3, #16
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	4413      	add	r3, r2
 800543e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005440:	7bfb      	ldrb	r3, [r7, #15]
 8005442:	3301      	adds	r3, #1
 8005444:	73fb      	strb	r3, [r7, #15]
 8005446:	7bfa      	ldrb	r2, [r7, #15]
 8005448:	78fb      	ldrb	r3, [r7, #3]
 800544a:	3b01      	subs	r3, #1
 800544c:	429a      	cmp	r2, r3
 800544e:	d3ec      	bcc.n	800542a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005450:	883b      	ldrh	r3, [r7, #0]
 8005452:	0418      	lsls	r0, r3, #16
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6819      	ldr	r1, [r3, #0]
 8005458:	78fb      	ldrb	r3, [r7, #3]
 800545a:	3b01      	subs	r3, #1
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	4302      	orrs	r2, r0
 8005460:	3340      	adds	r3, #64	; 0x40
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005476:	b480      	push	{r7}
 8005478:	b083      	sub	sp, #12
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	460b      	mov	r3, r1
 8005480:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	887a      	ldrh	r2, [r7, #2]
 8005488:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	460b      	mov	r3, r1
 80054a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e264      	b.n	800598c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d075      	beq.n	80055ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054ce:	4ba3      	ldr	r3, [pc, #652]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f003 030c 	and.w	r3, r3, #12
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	d00c      	beq.n	80054f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054da:	4ba0      	ldr	r3, [pc, #640]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054e2:	2b08      	cmp	r3, #8
 80054e4:	d112      	bne.n	800550c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054e6:	4b9d      	ldr	r3, [pc, #628]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054f2:	d10b      	bne.n	800550c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f4:	4b99      	ldr	r3, [pc, #612]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d05b      	beq.n	80055b8 <HAL_RCC_OscConfig+0x108>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d157      	bne.n	80055b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e23f      	b.n	800598c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005514:	d106      	bne.n	8005524 <HAL_RCC_OscConfig+0x74>
 8005516:	4b91      	ldr	r3, [pc, #580]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a90      	ldr	r2, [pc, #576]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 800551c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	e01d      	b.n	8005560 <HAL_RCC_OscConfig+0xb0>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800552c:	d10c      	bne.n	8005548 <HAL_RCC_OscConfig+0x98>
 800552e:	4b8b      	ldr	r3, [pc, #556]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a8a      	ldr	r2, [pc, #552]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 8005534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	4b88      	ldr	r3, [pc, #544]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a87      	ldr	r2, [pc, #540]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 8005540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005544:	6013      	str	r3, [r2, #0]
 8005546:	e00b      	b.n	8005560 <HAL_RCC_OscConfig+0xb0>
 8005548:	4b84      	ldr	r3, [pc, #528]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a83      	ldr	r2, [pc, #524]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 800554e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	4b81      	ldr	r3, [pc, #516]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a80      	ldr	r2, [pc, #512]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 800555a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800555e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d013      	beq.n	8005590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005568:	f7fc f9d8 	bl	800191c <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005570:	f7fc f9d4 	bl	800191c <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b64      	cmp	r3, #100	; 0x64
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e204      	b.n	800598c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005582:	4b76      	ldr	r3, [pc, #472]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0f0      	beq.n	8005570 <HAL_RCC_OscConfig+0xc0>
 800558e:	e014      	b.n	80055ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005590:	f7fc f9c4 	bl	800191c <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005598:	f7fc f9c0 	bl	800191c <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b64      	cmp	r3, #100	; 0x64
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e1f0      	b.n	800598c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055aa:	4b6c      	ldr	r3, [pc, #432]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1f0      	bne.n	8005598 <HAL_RCC_OscConfig+0xe8>
 80055b6:	e000      	b.n	80055ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d063      	beq.n	800568e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055c6:	4b65      	ldr	r3, [pc, #404]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 030c 	and.w	r3, r3, #12
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00b      	beq.n	80055ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055d2:	4b62      	ldr	r3, [pc, #392]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055da:	2b08      	cmp	r3, #8
 80055dc:	d11c      	bne.n	8005618 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055de:	4b5f      	ldr	r3, [pc, #380]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d116      	bne.n	8005618 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ea:	4b5c      	ldr	r3, [pc, #368]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <HAL_RCC_OscConfig+0x152>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d001      	beq.n	8005602 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e1c4      	b.n	800598c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005602:	4b56      	ldr	r3, [pc, #344]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	4952      	ldr	r1, [pc, #328]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 8005612:	4313      	orrs	r3, r2
 8005614:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005616:	e03a      	b.n	800568e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d020      	beq.n	8005662 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005620:	4b4f      	ldr	r3, [pc, #316]	; (8005760 <HAL_RCC_OscConfig+0x2b0>)
 8005622:	2201      	movs	r2, #1
 8005624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005626:	f7fc f979 	bl	800191c <HAL_GetTick>
 800562a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800562c:	e008      	b.n	8005640 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800562e:	f7fc f975 	bl	800191c <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d901      	bls.n	8005640 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e1a5      	b.n	800598c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005640:	4b46      	ldr	r3, [pc, #280]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0f0      	beq.n	800562e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800564c:	4b43      	ldr	r3, [pc, #268]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	4940      	ldr	r1, [pc, #256]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 800565c:	4313      	orrs	r3, r2
 800565e:	600b      	str	r3, [r1, #0]
 8005660:	e015      	b.n	800568e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005662:	4b3f      	ldr	r3, [pc, #252]	; (8005760 <HAL_RCC_OscConfig+0x2b0>)
 8005664:	2200      	movs	r2, #0
 8005666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005668:	f7fc f958 	bl	800191c <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005670:	f7fc f954 	bl	800191c <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e184      	b.n	800598c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005682:	4b36      	ldr	r3, [pc, #216]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1f0      	bne.n	8005670 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b00      	cmp	r3, #0
 8005698:	d030      	beq.n	80056fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d016      	beq.n	80056d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056a2:	4b30      	ldr	r3, [pc, #192]	; (8005764 <HAL_RCC_OscConfig+0x2b4>)
 80056a4:	2201      	movs	r2, #1
 80056a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a8:	f7fc f938 	bl	800191c <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056b0:	f7fc f934 	bl	800191c <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e164      	b.n	800598c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056c2:	4b26      	ldr	r3, [pc, #152]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 80056c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0f0      	beq.n	80056b0 <HAL_RCC_OscConfig+0x200>
 80056ce:	e015      	b.n	80056fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056d0:	4b24      	ldr	r3, [pc, #144]	; (8005764 <HAL_RCC_OscConfig+0x2b4>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056d6:	f7fc f921 	bl	800191c <HAL_GetTick>
 80056da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056dc:	e008      	b.n	80056f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056de:	f7fc f91d 	bl	800191c <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e14d      	b.n	800598c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056f0:	4b1a      	ldr	r3, [pc, #104]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 80056f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1f0      	bne.n	80056de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0304 	and.w	r3, r3, #4
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 80a0 	beq.w	800584a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800570a:	2300      	movs	r3, #0
 800570c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800570e:	4b13      	ldr	r3, [pc, #76]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10f      	bne.n	800573a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800571a:	2300      	movs	r3, #0
 800571c:	60bb      	str	r3, [r7, #8]
 800571e:	4b0f      	ldr	r3, [pc, #60]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	4a0e      	ldr	r2, [pc, #56]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 8005724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005728:	6413      	str	r3, [r2, #64]	; 0x40
 800572a:	4b0c      	ldr	r3, [pc, #48]	; (800575c <HAL_RCC_OscConfig+0x2ac>)
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005732:	60bb      	str	r3, [r7, #8]
 8005734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005736:	2301      	movs	r3, #1
 8005738:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800573a:	4b0b      	ldr	r3, [pc, #44]	; (8005768 <HAL_RCC_OscConfig+0x2b8>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005742:	2b00      	cmp	r3, #0
 8005744:	d121      	bne.n	800578a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005746:	4b08      	ldr	r3, [pc, #32]	; (8005768 <HAL_RCC_OscConfig+0x2b8>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a07      	ldr	r2, [pc, #28]	; (8005768 <HAL_RCC_OscConfig+0x2b8>)
 800574c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005752:	f7fc f8e3 	bl	800191c <HAL_GetTick>
 8005756:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005758:	e011      	b.n	800577e <HAL_RCC_OscConfig+0x2ce>
 800575a:	bf00      	nop
 800575c:	40023800 	.word	0x40023800
 8005760:	42470000 	.word	0x42470000
 8005764:	42470e80 	.word	0x42470e80
 8005768:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800576c:	f7fc f8d6 	bl	800191c <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e106      	b.n	800598c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800577e:	4b85      	ldr	r3, [pc, #532]	; (8005994 <HAL_RCC_OscConfig+0x4e4>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0f0      	beq.n	800576c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d106      	bne.n	80057a0 <HAL_RCC_OscConfig+0x2f0>
 8005792:	4b81      	ldr	r3, [pc, #516]	; (8005998 <HAL_RCC_OscConfig+0x4e8>)
 8005794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005796:	4a80      	ldr	r2, [pc, #512]	; (8005998 <HAL_RCC_OscConfig+0x4e8>)
 8005798:	f043 0301 	orr.w	r3, r3, #1
 800579c:	6713      	str	r3, [r2, #112]	; 0x70
 800579e:	e01c      	b.n	80057da <HAL_RCC_OscConfig+0x32a>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	2b05      	cmp	r3, #5
 80057a6:	d10c      	bne.n	80057c2 <HAL_RCC_OscConfig+0x312>
 80057a8:	4b7b      	ldr	r3, [pc, #492]	; (8005998 <HAL_RCC_OscConfig+0x4e8>)
 80057aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ac:	4a7a      	ldr	r2, [pc, #488]	; (8005998 <HAL_RCC_OscConfig+0x4e8>)
 80057ae:	f043 0304 	orr.w	r3, r3, #4
 80057b2:	6713      	str	r3, [r2, #112]	; 0x70
 80057b4:	4b78      	ldr	r3, [pc, #480]	; (8005998 <HAL_RCC_OscConfig+0x4e8>)
 80057b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b8:	4a77      	ldr	r2, [pc, #476]	; (8005998 <HAL_RCC_OscConfig+0x4e8>)
 80057ba:	f043 0301 	orr.w	r3, r3, #1
 80057be:	6713      	str	r3, [r2, #112]	; 0x70
 80057c0:	e00b      	b.n	80057da <HAL_RCC_OscConfig+0x32a>
 80057c2:	4b75      	ldr	r3, [pc, #468]	; (8005998 <HAL_RCC_OscConfig+0x4e8>)
 80057c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c6:	4a74      	ldr	r2, [pc, #464]	; (8005998 <HAL_RCC_OscConfig+0x4e8>)
 80057c8:	f023 0301 	bic.w	r3, r3, #1
 80057cc:	6713      	str	r3, [r2, #112]	; 0x70
 80057ce:	4b72      	ldr	r3, [pc, #456]	; (8005998 <HAL_RCC_OscConfig+0x4e8>)
 80057d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d2:	4a71      	ldr	r2, [pc, #452]	; (8005998 <HAL_RCC_OscConfig+0x4e8>)
 80057d4:	f023 0304 	bic.w	r3, r3, #4
 80057d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d015      	beq.n	800580e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e2:	f7fc f89b 	bl	800191c <HAL_GetTick>
 80057e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057e8:	e00a      	b.n	8005800 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ea:	f7fc f897 	bl	800191c <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e0c5      	b.n	800598c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005800:	4b65      	ldr	r3, [pc, #404]	; (8005998 <HAL_RCC_OscConfig+0x4e8>)
 8005802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0ee      	beq.n	80057ea <HAL_RCC_OscConfig+0x33a>
 800580c:	e014      	b.n	8005838 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800580e:	f7fc f885 	bl	800191c <HAL_GetTick>
 8005812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005814:	e00a      	b.n	800582c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005816:	f7fc f881 	bl	800191c <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	f241 3288 	movw	r2, #5000	; 0x1388
 8005824:	4293      	cmp	r3, r2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e0af      	b.n	800598c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800582c:	4b5a      	ldr	r3, [pc, #360]	; (8005998 <HAL_RCC_OscConfig+0x4e8>)
 800582e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1ee      	bne.n	8005816 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005838:	7dfb      	ldrb	r3, [r7, #23]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d105      	bne.n	800584a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800583e:	4b56      	ldr	r3, [pc, #344]	; (8005998 <HAL_RCC_OscConfig+0x4e8>)
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	4a55      	ldr	r2, [pc, #340]	; (8005998 <HAL_RCC_OscConfig+0x4e8>)
 8005844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005848:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 809b 	beq.w	800598a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005854:	4b50      	ldr	r3, [pc, #320]	; (8005998 <HAL_RCC_OscConfig+0x4e8>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f003 030c 	and.w	r3, r3, #12
 800585c:	2b08      	cmp	r3, #8
 800585e:	d05c      	beq.n	800591a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	2b02      	cmp	r3, #2
 8005866:	d141      	bne.n	80058ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005868:	4b4c      	ldr	r3, [pc, #304]	; (800599c <HAL_RCC_OscConfig+0x4ec>)
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800586e:	f7fc f855 	bl	800191c <HAL_GetTick>
 8005872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005874:	e008      	b.n	8005888 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005876:	f7fc f851 	bl	800191c <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	2b02      	cmp	r3, #2
 8005882:	d901      	bls.n	8005888 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e081      	b.n	800598c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005888:	4b43      	ldr	r3, [pc, #268]	; (8005998 <HAL_RCC_OscConfig+0x4e8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1f0      	bne.n	8005876 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	69da      	ldr	r2, [r3, #28]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	431a      	orrs	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	019b      	lsls	r3, r3, #6
 80058a4:	431a      	orrs	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058aa:	085b      	lsrs	r3, r3, #1
 80058ac:	3b01      	subs	r3, #1
 80058ae:	041b      	lsls	r3, r3, #16
 80058b0:	431a      	orrs	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b6:	061b      	lsls	r3, r3, #24
 80058b8:	4937      	ldr	r1, [pc, #220]	; (8005998 <HAL_RCC_OscConfig+0x4e8>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058be:	4b37      	ldr	r3, [pc, #220]	; (800599c <HAL_RCC_OscConfig+0x4ec>)
 80058c0:	2201      	movs	r2, #1
 80058c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c4:	f7fc f82a 	bl	800191c <HAL_GetTick>
 80058c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058cc:	f7fc f826 	bl	800191c <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e056      	b.n	800598c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058de:	4b2e      	ldr	r3, [pc, #184]	; (8005998 <HAL_RCC_OscConfig+0x4e8>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0f0      	beq.n	80058cc <HAL_RCC_OscConfig+0x41c>
 80058ea:	e04e      	b.n	800598a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ec:	4b2b      	ldr	r3, [pc, #172]	; (800599c <HAL_RCC_OscConfig+0x4ec>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f2:	f7fc f813 	bl	800191c <HAL_GetTick>
 80058f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058f8:	e008      	b.n	800590c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058fa:	f7fc f80f 	bl	800191c <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b02      	cmp	r3, #2
 8005906:	d901      	bls.n	800590c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e03f      	b.n	800598c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800590c:	4b22      	ldr	r3, [pc, #136]	; (8005998 <HAL_RCC_OscConfig+0x4e8>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1f0      	bne.n	80058fa <HAL_RCC_OscConfig+0x44a>
 8005918:	e037      	b.n	800598a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e032      	b.n	800598c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005926:	4b1c      	ldr	r3, [pc, #112]	; (8005998 <HAL_RCC_OscConfig+0x4e8>)
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d028      	beq.n	8005986 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800593e:	429a      	cmp	r2, r3
 8005940:	d121      	bne.n	8005986 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800594c:	429a      	cmp	r2, r3
 800594e:	d11a      	bne.n	8005986 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005956:	4013      	ands	r3, r2
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800595c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800595e:	4293      	cmp	r3, r2
 8005960:	d111      	bne.n	8005986 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596c:	085b      	lsrs	r3, r3, #1
 800596e:	3b01      	subs	r3, #1
 8005970:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005972:	429a      	cmp	r2, r3
 8005974:	d107      	bne.n	8005986 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005982:	429a      	cmp	r2, r3
 8005984:	d001      	beq.n	800598a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e000      	b.n	800598c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	40007000 	.word	0x40007000
 8005998:	40023800 	.word	0x40023800
 800599c:	42470060 	.word	0x42470060

080059a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e0cc      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059b4:	4b68      	ldr	r3, [pc, #416]	; (8005b58 <HAL_RCC_ClockConfig+0x1b8>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d90c      	bls.n	80059dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059c2:	4b65      	ldr	r3, [pc, #404]	; (8005b58 <HAL_RCC_ClockConfig+0x1b8>)
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ca:	4b63      	ldr	r3, [pc, #396]	; (8005b58 <HAL_RCC_ClockConfig+0x1b8>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d001      	beq.n	80059dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e0b8      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d020      	beq.n	8005a2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d005      	beq.n	8005a00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059f4:	4b59      	ldr	r3, [pc, #356]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	4a58      	ldr	r2, [pc, #352]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 80059fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0308 	and.w	r3, r3, #8
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d005      	beq.n	8005a18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a0c:	4b53      	ldr	r3, [pc, #332]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	4a52      	ldr	r2, [pc, #328]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a18:	4b50      	ldr	r3, [pc, #320]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	494d      	ldr	r1, [pc, #308]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d044      	beq.n	8005ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d107      	bne.n	8005a4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a3e:	4b47      	ldr	r3, [pc, #284]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d119      	bne.n	8005a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e07f      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d003      	beq.n	8005a5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d107      	bne.n	8005a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a5e:	4b3f      	ldr	r3, [pc, #252]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d109      	bne.n	8005a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e06f      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a6e:	4b3b      	ldr	r3, [pc, #236]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e067      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a7e:	4b37      	ldr	r3, [pc, #220]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f023 0203 	bic.w	r2, r3, #3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	4934      	ldr	r1, [pc, #208]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a90:	f7fb ff44 	bl	800191c <HAL_GetTick>
 8005a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a96:	e00a      	b.n	8005aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a98:	f7fb ff40 	bl	800191c <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e04f      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aae:	4b2b      	ldr	r3, [pc, #172]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 020c 	and.w	r2, r3, #12
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d1eb      	bne.n	8005a98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ac0:	4b25      	ldr	r3, [pc, #148]	; (8005b58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0307 	and.w	r3, r3, #7
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d20c      	bcs.n	8005ae8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ace:	4b22      	ldr	r3, [pc, #136]	; (8005b58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ad6:	4b20      	ldr	r3, [pc, #128]	; (8005b58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0307 	and.w	r3, r3, #7
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d001      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e032      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d008      	beq.n	8005b06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005af4:	4b19      	ldr	r3, [pc, #100]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	4916      	ldr	r1, [pc, #88]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0308 	and.w	r3, r3, #8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d009      	beq.n	8005b26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b12:	4b12      	ldr	r3, [pc, #72]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	490e      	ldr	r1, [pc, #56]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b26:	f000 f889 	bl	8005c3c <HAL_RCC_GetSysClockFreq>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	4b0b      	ldr	r3, [pc, #44]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	091b      	lsrs	r3, r3, #4
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	490a      	ldr	r1, [pc, #40]	; (8005b60 <HAL_RCC_ClockConfig+0x1c0>)
 8005b38:	5ccb      	ldrb	r3, [r1, r3]
 8005b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b3e:	4a09      	ldr	r2, [pc, #36]	; (8005b64 <HAL_RCC_ClockConfig+0x1c4>)
 8005b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b42:	4b09      	ldr	r3, [pc, #36]	; (8005b68 <HAL_RCC_ClockConfig+0x1c8>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fb fea4 	bl	8001894 <HAL_InitTick>

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	40023c00 	.word	0x40023c00
 8005b5c:	40023800 	.word	0x40023800
 8005b60:	0800bb38 	.word	0x0800bb38
 8005b64:	20000004 	.word	0x20000004
 8005b68:	20000008 	.word	0x20000008

08005b6c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08c      	sub	sp, #48	; 0x30
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d129      	bne.n	8005bd2 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8005b7e:	2300      	movs	r3, #0
 8005b80:	61bb      	str	r3, [r7, #24]
 8005b82:	4b2b      	ldr	r3, [pc, #172]	; (8005c30 <HAL_RCC_MCOConfig+0xc4>)
 8005b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b86:	4a2a      	ldr	r2, [pc, #168]	; (8005c30 <HAL_RCC_MCOConfig+0xc4>)
 8005b88:	f043 0301 	orr.w	r3, r3, #1
 8005b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b8e:	4b28      	ldr	r3, [pc, #160]	; (8005c30 <HAL_RCC_MCOConfig+0xc4>)
 8005b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	61bb      	str	r3, [r7, #24]
 8005b98:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005b9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005bac:	2300      	movs	r3, #0
 8005bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005bb0:	f107 031c 	add.w	r3, r7, #28
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	481f      	ldr	r0, [pc, #124]	; (8005c34 <HAL_RCC_MCOConfig+0xc8>)
 8005bb8:	f7fe f92a 	bl	8003e10 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005bbc:	4b1c      	ldr	r3, [pc, #112]	; (8005c30 <HAL_RCC_MCOConfig+0xc4>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8005bc4:	68b9      	ldr	r1, [r7, #8]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	4919      	ldr	r1, [pc, #100]	; (8005c30 <HAL_RCC_MCOConfig+0xc4>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8005bd0:	e029      	b.n	8005c26 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	617b      	str	r3, [r7, #20]
 8005bd6:	4b16      	ldr	r3, [pc, #88]	; (8005c30 <HAL_RCC_MCOConfig+0xc4>)
 8005bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bda:	4a15      	ldr	r2, [pc, #84]	; (8005c30 <HAL_RCC_MCOConfig+0xc4>)
 8005bdc:	f043 0304 	orr.w	r3, r3, #4
 8005be0:	6313      	str	r3, [r2, #48]	; 0x30
 8005be2:	4b13      	ldr	r3, [pc, #76]	; (8005c30 <HAL_RCC_MCOConfig+0xc4>)
 8005be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be6:	f003 0304 	and.w	r3, r3, #4
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005bee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005c00:	2300      	movs	r3, #0
 8005c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005c04:	f107 031c 	add.w	r3, r7, #28
 8005c08:	4619      	mov	r1, r3
 8005c0a:	480b      	ldr	r0, [pc, #44]	; (8005c38 <HAL_RCC_MCOConfig+0xcc>)
 8005c0c:	f7fe f900 	bl	8003e10 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005c10:	4b07      	ldr	r3, [pc, #28]	; (8005c30 <HAL_RCC_MCOConfig+0xc4>)
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	00d9      	lsls	r1, r3, #3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	430b      	orrs	r3, r1
 8005c20:	4903      	ldr	r1, [pc, #12]	; (8005c30 <HAL_RCC_MCOConfig+0xc4>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	608b      	str	r3, [r1, #8]
}
 8005c26:	bf00      	nop
 8005c28:	3730      	adds	r7, #48	; 0x30
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	40023800 	.word	0x40023800
 8005c34:	40020000 	.word	0x40020000
 8005c38:	40020800 	.word	0x40020800

08005c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c3c:	b5b0      	push	{r4, r5, r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c42:	2100      	movs	r1, #0
 8005c44:	6079      	str	r1, [r7, #4]
 8005c46:	2100      	movs	r1, #0
 8005c48:	60f9      	str	r1, [r7, #12]
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005c4e:	2100      	movs	r1, #0
 8005c50:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c52:	4952      	ldr	r1, [pc, #328]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x160>)
 8005c54:	6889      	ldr	r1, [r1, #8]
 8005c56:	f001 010c 	and.w	r1, r1, #12
 8005c5a:	2908      	cmp	r1, #8
 8005c5c:	d00d      	beq.n	8005c7a <HAL_RCC_GetSysClockFreq+0x3e>
 8005c5e:	2908      	cmp	r1, #8
 8005c60:	f200 8094 	bhi.w	8005d8c <HAL_RCC_GetSysClockFreq+0x150>
 8005c64:	2900      	cmp	r1, #0
 8005c66:	d002      	beq.n	8005c6e <HAL_RCC_GetSysClockFreq+0x32>
 8005c68:	2904      	cmp	r1, #4
 8005c6a:	d003      	beq.n	8005c74 <HAL_RCC_GetSysClockFreq+0x38>
 8005c6c:	e08e      	b.n	8005d8c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c6e:	4b4c      	ldr	r3, [pc, #304]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005c70:	60bb      	str	r3, [r7, #8]
       break;
 8005c72:	e08e      	b.n	8005d92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c74:	4b4b      	ldr	r3, [pc, #300]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005c76:	60bb      	str	r3, [r7, #8]
      break;
 8005c78:	e08b      	b.n	8005d92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c7a:	4948      	ldr	r1, [pc, #288]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x160>)
 8005c7c:	6849      	ldr	r1, [r1, #4]
 8005c7e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005c82:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c84:	4945      	ldr	r1, [pc, #276]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x160>)
 8005c86:	6849      	ldr	r1, [r1, #4]
 8005c88:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005c8c:	2900      	cmp	r1, #0
 8005c8e:	d024      	beq.n	8005cda <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c90:	4942      	ldr	r1, [pc, #264]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x160>)
 8005c92:	6849      	ldr	r1, [r1, #4]
 8005c94:	0989      	lsrs	r1, r1, #6
 8005c96:	4608      	mov	r0, r1
 8005c98:	f04f 0100 	mov.w	r1, #0
 8005c9c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005ca0:	f04f 0500 	mov.w	r5, #0
 8005ca4:	ea00 0204 	and.w	r2, r0, r4
 8005ca8:	ea01 0305 	and.w	r3, r1, r5
 8005cac:	493d      	ldr	r1, [pc, #244]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005cae:	fb01 f003 	mul.w	r0, r1, r3
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	fb01 f102 	mul.w	r1, r1, r2
 8005cb8:	1844      	adds	r4, r0, r1
 8005cba:	493a      	ldr	r1, [pc, #232]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005cbc:	fba2 0101 	umull	r0, r1, r2, r1
 8005cc0:	1863      	adds	r3, r4, r1
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	f04f 0300 	mov.w	r3, #0
 8005ccc:	f7fa fa7c 	bl	80001c8 <__aeabi_uldivmod>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
 8005cd8:	e04a      	b.n	8005d70 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cda:	4b30      	ldr	r3, [pc, #192]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x160>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	099b      	lsrs	r3, r3, #6
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	f04f 0300 	mov.w	r3, #0
 8005ce6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005cea:	f04f 0100 	mov.w	r1, #0
 8005cee:	ea02 0400 	and.w	r4, r2, r0
 8005cf2:	ea03 0501 	and.w	r5, r3, r1
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	f04f 0200 	mov.w	r2, #0
 8005cfe:	f04f 0300 	mov.w	r3, #0
 8005d02:	014b      	lsls	r3, r1, #5
 8005d04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005d08:	0142      	lsls	r2, r0, #5
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	1b00      	subs	r0, r0, r4
 8005d10:	eb61 0105 	sbc.w	r1, r1, r5
 8005d14:	f04f 0200 	mov.w	r2, #0
 8005d18:	f04f 0300 	mov.w	r3, #0
 8005d1c:	018b      	lsls	r3, r1, #6
 8005d1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005d22:	0182      	lsls	r2, r0, #6
 8005d24:	1a12      	subs	r2, r2, r0
 8005d26:	eb63 0301 	sbc.w	r3, r3, r1
 8005d2a:	f04f 0000 	mov.w	r0, #0
 8005d2e:	f04f 0100 	mov.w	r1, #0
 8005d32:	00d9      	lsls	r1, r3, #3
 8005d34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d38:	00d0      	lsls	r0, r2, #3
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	1912      	adds	r2, r2, r4
 8005d40:	eb45 0303 	adc.w	r3, r5, r3
 8005d44:	f04f 0000 	mov.w	r0, #0
 8005d48:	f04f 0100 	mov.w	r1, #0
 8005d4c:	0299      	lsls	r1, r3, #10
 8005d4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005d52:	0290      	lsls	r0, r2, #10
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	4610      	mov	r0, r2
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f04f 0300 	mov.w	r3, #0
 8005d64:	f7fa fa30 	bl	80001c8 <__aeabi_uldivmod>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d70:	4b0a      	ldr	r3, [pc, #40]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x160>)
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	0c1b      	lsrs	r3, r3, #16
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	005b      	lsls	r3, r3, #1
 8005d7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d88:	60bb      	str	r3, [r7, #8]
      break;
 8005d8a:	e002      	b.n	8005d92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d8c:	4b04      	ldr	r3, [pc, #16]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005d8e:	60bb      	str	r3, [r7, #8]
      break;
 8005d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d92:	68bb      	ldr	r3, [r7, #8]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bdb0      	pop	{r4, r5, r7, pc}
 8005d9c:	40023800 	.word	0x40023800
 8005da0:	00f42400 	.word	0x00f42400
 8005da4:	017d7840 	.word	0x017d7840

08005da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005da8:	b480      	push	{r7}
 8005daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dac:	4b03      	ldr	r3, [pc, #12]	; (8005dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8005dae:	681b      	ldr	r3, [r3, #0]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	20000004 	.word	0x20000004

08005dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005dc4:	f7ff fff0 	bl	8005da8 <HAL_RCC_GetHCLKFreq>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	0a9b      	lsrs	r3, r3, #10
 8005dd0:	f003 0307 	and.w	r3, r3, #7
 8005dd4:	4903      	ldr	r1, [pc, #12]	; (8005de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dd6:	5ccb      	ldrb	r3, [r1, r3]
 8005dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	40023800 	.word	0x40023800
 8005de4:	0800bb48 	.word	0x0800bb48

08005de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005dec:	f7ff ffdc 	bl	8005da8 <HAL_RCC_GetHCLKFreq>
 8005df0:	4602      	mov	r2, r0
 8005df2:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	0b5b      	lsrs	r3, r3, #13
 8005df8:	f003 0307 	and.w	r3, r3, #7
 8005dfc:	4903      	ldr	r1, [pc, #12]	; (8005e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dfe:	5ccb      	ldrb	r3, [r1, r3]
 8005e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	40023800 	.word	0x40023800
 8005e0c:	0800bb48 	.word	0x0800bb48

08005e10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e03f      	b.n	8005ea2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d106      	bne.n	8005e3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7fb fbe6 	bl	8001608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2224      	movs	r2, #36	; 0x24
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 fd7f 	bl	8006958 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	691a      	ldr	r2, [r3, #16]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	695a      	ldr	r2, [r3, #20]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68da      	ldr	r2, [r3, #12]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b08a      	sub	sp, #40	; 0x28
 8005eae:	af02      	add	r7, sp, #8
 8005eb0:	60f8      	str	r0, [r7, #12]
 8005eb2:	60b9      	str	r1, [r7, #8]
 8005eb4:	603b      	str	r3, [r7, #0]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b20      	cmp	r3, #32
 8005ec8:	d17c      	bne.n	8005fc4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <HAL_UART_Transmit+0x2c>
 8005ed0:	88fb      	ldrh	r3, [r7, #6]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e075      	b.n	8005fc6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_UART_Transmit+0x3e>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e06e      	b.n	8005fc6 <HAL_UART_Transmit+0x11c>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2221      	movs	r2, #33	; 0x21
 8005efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005efe:	f7fb fd0d 	bl	800191c <HAL_GetTick>
 8005f02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	88fa      	ldrh	r2, [r7, #6]
 8005f08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	88fa      	ldrh	r2, [r7, #6]
 8005f0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f18:	d108      	bne.n	8005f2c <HAL_UART_Transmit+0x82>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d104      	bne.n	8005f2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f22:	2300      	movs	r3, #0
 8005f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	61bb      	str	r3, [r7, #24]
 8005f2a:	e003      	b.n	8005f34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f30:	2300      	movs	r3, #0
 8005f32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005f3c:	e02a      	b.n	8005f94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2200      	movs	r2, #0
 8005f46:	2180      	movs	r1, #128	; 0x80
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 fb2a 	bl	80065a2 <UART_WaitOnFlagUntilTimeout>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e036      	b.n	8005fc6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10b      	bne.n	8005f76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	461a      	mov	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	3302      	adds	r3, #2
 8005f72:	61bb      	str	r3, [r7, #24]
 8005f74:	e007      	b.n	8005f86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	781a      	ldrb	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	3301      	adds	r3, #1
 8005f84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1cf      	bne.n	8005f3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	2140      	movs	r1, #64	; 0x40
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 fafa 	bl	80065a2 <UART_WaitOnFlagUntilTimeout>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e006      	b.n	8005fc6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	e000      	b.n	8005fc6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005fc4:	2302      	movs	r3, #2
  }
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3720      	adds	r7, #32
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	60f8      	str	r0, [r7, #12]
 8005fd6:	60b9      	str	r1, [r7, #8]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b20      	cmp	r3, #32
 8005fe6:	d11d      	bne.n	8006024 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <HAL_UART_Receive_IT+0x26>
 8005fee:	88fb      	ldrh	r3, [r7, #6]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e016      	b.n	8006026 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d101      	bne.n	8006006 <HAL_UART_Receive_IT+0x38>
 8006002:	2302      	movs	r3, #2
 8006004:	e00f      	b.n	8006026 <HAL_UART_Receive_IT+0x58>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006014:	88fb      	ldrh	r3, [r7, #6]
 8006016:	461a      	mov	r2, r3
 8006018:	68b9      	ldr	r1, [r7, #8]
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f000 fb0b 	bl	8006636 <UART_Start_Receive_IT>
 8006020:	4603      	mov	r3, r0
 8006022:	e000      	b.n	8006026 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006024:	2302      	movs	r3, #2
  }
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
	...

08006030 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	4613      	mov	r3, r2
 800603c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b20      	cmp	r3, #32
 8006048:	d153      	bne.n	80060f2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <HAL_UART_Transmit_DMA+0x26>
 8006050:	88fb      	ldrh	r3, [r7, #6]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e04c      	b.n	80060f4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006060:	2b01      	cmp	r3, #1
 8006062:	d101      	bne.n	8006068 <HAL_UART_Transmit_DMA+0x38>
 8006064:	2302      	movs	r3, #2
 8006066:	e045      	b.n	80060f4 <HAL_UART_Transmit_DMA+0xc4>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	88fa      	ldrh	r2, [r7, #6]
 800607a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	88fa      	ldrh	r2, [r7, #6]
 8006080:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2221      	movs	r2, #33	; 0x21
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006094:	4a19      	ldr	r2, [pc, #100]	; (80060fc <HAL_UART_Transmit_DMA+0xcc>)
 8006096:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800609c:	4a18      	ldr	r2, [pc, #96]	; (8006100 <HAL_UART_Transmit_DMA+0xd0>)
 800609e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a4:	4a17      	ldr	r2, [pc, #92]	; (8006104 <HAL_UART_Transmit_DMA+0xd4>)
 80060a6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ac:	2200      	movs	r2, #0
 80060ae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80060b0:	f107 0308 	add.w	r3, r7, #8
 80060b4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	6819      	ldr	r1, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3304      	adds	r3, #4
 80060c4:	461a      	mov	r2, r3
 80060c6:	88fb      	ldrh	r3, [r7, #6]
 80060c8:	f7fc f9b8 	bl	800243c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060d4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	695a      	ldr	r2, [r3, #20]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80060ec:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80060ee:	2300      	movs	r3, #0
 80060f0:	e000      	b.n	80060f4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80060f2:	2302      	movs	r3, #2
  }
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	080064a1 	.word	0x080064a1
 8006100:	080064f3 	.word	0x080064f3
 8006104:	0800650f 	.word	0x0800650f

08006108 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b08a      	sub	sp, #40	; 0x28
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006128:	2300      	movs	r3, #0
 800612a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800612c:	2300      	movs	r3, #0
 800612e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	f003 030f 	and.w	r3, r3, #15
 8006136:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10d      	bne.n	800615a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	f003 0320 	and.w	r3, r3, #32
 8006144:	2b00      	cmp	r3, #0
 8006146:	d008      	beq.n	800615a <HAL_UART_IRQHandler+0x52>
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	f003 0320 	and.w	r3, r3, #32
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 fb68 	bl	8006828 <UART_Receive_IT>
      return;
 8006158:	e17c      	b.n	8006454 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 80b1 	beq.w	80062c4 <HAL_UART_IRQHandler+0x1bc>
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	2b00      	cmp	r3, #0
 800616a:	d105      	bne.n	8006178 <HAL_UART_IRQHandler+0x70>
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 80a6 	beq.w	80062c4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <HAL_UART_IRQHandler+0x90>
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006188:	2b00      	cmp	r3, #0
 800618a:	d005      	beq.n	8006198 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006190:	f043 0201 	orr.w	r2, r3, #1
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	f003 0304 	and.w	r3, r3, #4
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00a      	beq.n	80061b8 <HAL_UART_IRQHandler+0xb0>
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d005      	beq.n	80061b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b0:	f043 0202 	orr.w	r2, r3, #2
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00a      	beq.n	80061d8 <HAL_UART_IRQHandler+0xd0>
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d005      	beq.n	80061d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d0:	f043 0204 	orr.w	r2, r3, #4
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	f003 0308 	and.w	r3, r3, #8
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00f      	beq.n	8006202 <HAL_UART_IRQHandler+0xfa>
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	f003 0320 	and.w	r3, r3, #32
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d104      	bne.n	80061f6 <HAL_UART_IRQHandler+0xee>
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d005      	beq.n	8006202 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	f043 0208 	orr.w	r2, r3, #8
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 811f 	beq.w	800644a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	f003 0320 	and.w	r3, r3, #32
 8006212:	2b00      	cmp	r3, #0
 8006214:	d007      	beq.n	8006226 <HAL_UART_IRQHandler+0x11e>
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	f003 0320 	and.w	r3, r3, #32
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fb01 	bl	8006828 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006230:	2b40      	cmp	r3, #64	; 0x40
 8006232:	bf0c      	ite	eq
 8006234:	2301      	moveq	r3, #1
 8006236:	2300      	movne	r3, #0
 8006238:	b2db      	uxtb	r3, r3
 800623a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006240:	f003 0308 	and.w	r3, r3, #8
 8006244:	2b00      	cmp	r3, #0
 8006246:	d102      	bne.n	800624e <HAL_UART_IRQHandler+0x146>
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d031      	beq.n	80062b2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fa41 	bl	80066d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625e:	2b40      	cmp	r3, #64	; 0x40
 8006260:	d123      	bne.n	80062aa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	695a      	ldr	r2, [r3, #20]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006270:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006276:	2b00      	cmp	r3, #0
 8006278:	d013      	beq.n	80062a2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627e:	4a77      	ldr	r2, [pc, #476]	; (800645c <HAL_UART_IRQHandler+0x354>)
 8006280:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006286:	4618      	mov	r0, r3
 8006288:	f7fc f9a0 	bl	80025cc <HAL_DMA_Abort_IT>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d016      	beq.n	80062c0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800629c:	4610      	mov	r0, r2
 800629e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a0:	e00e      	b.n	80062c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f8e6 	bl	8006474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a8:	e00a      	b.n	80062c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f8e2 	bl	8006474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b0:	e006      	b.n	80062c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f8de 	bl	8006474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80062be:	e0c4      	b.n	800644a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c0:	bf00      	nop
    return;
 80062c2:	e0c2      	b.n	800644a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	f040 80a2 	bne.w	8006412 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	f003 0310 	and.w	r3, r3, #16
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 809c 	beq.w	8006412 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	f003 0310 	and.w	r3, r3, #16
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 8096 	beq.w	8006412 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006306:	2b40      	cmp	r3, #64	; 0x40
 8006308:	d14f      	bne.n	80063aa <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006314:	8a3b      	ldrh	r3, [r7, #16]
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 8099 	beq.w	800644e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006320:	8a3a      	ldrh	r2, [r7, #16]
 8006322:	429a      	cmp	r2, r3
 8006324:	f080 8093 	bcs.w	800644e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	8a3a      	ldrh	r2, [r7, #16]
 800632c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006338:	d02b      	beq.n	8006392 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68da      	ldr	r2, [r3, #12]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006348:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	695a      	ldr	r2, [r3, #20]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 0201 	bic.w	r2, r2, #1
 8006358:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	695a      	ldr	r2, [r3, #20]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006368:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2220      	movs	r2, #32
 800636e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0210 	bic.w	r2, r2, #16
 8006386:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638c:	4618      	mov	r0, r3
 800638e:	f7fc f8ad 	bl	80024ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800639a:	b29b      	uxth	r3, r3
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	b29b      	uxth	r3, r3
 80063a0:	4619      	mov	r1, r3
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f870 	bl	8006488 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80063a8:	e051      	b.n	800644e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063bc:	b29b      	uxth	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d047      	beq.n	8006452 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80063c2:	8a7b      	ldrh	r3, [r7, #18]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d044      	beq.n	8006452 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80063d6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	695a      	ldr	r2, [r3, #20]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0201 	bic.w	r2, r2, #1
 80063e6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68da      	ldr	r2, [r3, #12]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0210 	bic.w	r2, r2, #16
 8006404:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006406:	8a7b      	ldrh	r3, [r7, #18]
 8006408:	4619      	mov	r1, r3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f83c 	bl	8006488 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006410:	e01f      	b.n	8006452 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006418:	2b00      	cmp	r3, #0
 800641a:	d008      	beq.n	800642e <HAL_UART_IRQHandler+0x326>
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f996 	bl	8006758 <UART_Transmit_IT>
    return;
 800642c:	e012      	b.n	8006454 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00d      	beq.n	8006454 <HAL_UART_IRQHandler+0x34c>
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643e:	2b00      	cmp	r3, #0
 8006440:	d008      	beq.n	8006454 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f9d8 	bl	80067f8 <UART_EndTransmit_IT>
    return;
 8006448:	e004      	b.n	8006454 <HAL_UART_IRQHandler+0x34c>
    return;
 800644a:	bf00      	nop
 800644c:	e002      	b.n	8006454 <HAL_UART_IRQHandler+0x34c>
      return;
 800644e:	bf00      	nop
 8006450:	e000      	b.n	8006454 <HAL_UART_IRQHandler+0x34c>
      return;
 8006452:	bf00      	nop
  }
}
 8006454:	3728      	adds	r7, #40	; 0x28
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	08006731 	.word	0x08006731

08006460 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	460b      	mov	r3, r1
 8006492:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ac:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d113      	bne.n	80064e4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	695a      	ldr	r2, [r3, #20]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064d0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68da      	ldr	r2, [r3, #12]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064e0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064e2:	e002      	b.n	80064ea <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f7fa fb3d 	bl	8000b64 <HAL_UART_TxCpltCallback>
}
 80064ea:	bf00      	nop
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f7ff ffad 	bl	8006460 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006506:	bf00      	nop
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006516:	2300      	movs	r3, #0
 8006518:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652a:	2b80      	cmp	r3, #128	; 0x80
 800652c:	bf0c      	ite	eq
 800652e:	2301      	moveq	r3, #1
 8006530:	2300      	movne	r3, #0
 8006532:	b2db      	uxtb	r3, r3
 8006534:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b21      	cmp	r3, #33	; 0x21
 8006540:	d108      	bne.n	8006554 <UART_DMAError+0x46>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d005      	beq.n	8006554 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2200      	movs	r2, #0
 800654c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800654e:	68b8      	ldr	r0, [r7, #8]
 8006550:	f000 f8ab 	bl	80066aa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655e:	2b40      	cmp	r3, #64	; 0x40
 8006560:	bf0c      	ite	eq
 8006562:	2301      	moveq	r3, #1
 8006564:	2300      	movne	r3, #0
 8006566:	b2db      	uxtb	r3, r3
 8006568:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b22      	cmp	r3, #34	; 0x22
 8006574:	d108      	bne.n	8006588 <UART_DMAError+0x7a>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d005      	beq.n	8006588 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2200      	movs	r2, #0
 8006580:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006582:	68b8      	ldr	r0, [r7, #8]
 8006584:	f000 f8a7 	bl	80066d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	f043 0210 	orr.w	r2, r3, #16
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006594:	68b8      	ldr	r0, [r7, #8]
 8006596:	f7ff ff6d 	bl	8006474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800659a:	bf00      	nop
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b084      	sub	sp, #16
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	60f8      	str	r0, [r7, #12]
 80065aa:	60b9      	str	r1, [r7, #8]
 80065ac:	603b      	str	r3, [r7, #0]
 80065ae:	4613      	mov	r3, r2
 80065b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065b2:	e02c      	b.n	800660e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ba:	d028      	beq.n	800660e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d007      	beq.n	80065d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80065c2:	f7fb f9ab 	bl	800191c <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	69ba      	ldr	r2, [r7, #24]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d21d      	bcs.n	800660e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68da      	ldr	r2, [r3, #12]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80065e0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	695a      	ldr	r2, [r3, #20]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0201 	bic.w	r2, r2, #1
 80065f0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2220      	movs	r2, #32
 80065fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e00f      	b.n	800662e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	4013      	ands	r3, r2
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	429a      	cmp	r2, r3
 800661c:	bf0c      	ite	eq
 800661e:	2301      	moveq	r3, #1
 8006620:	2300      	movne	r3, #0
 8006622:	b2db      	uxtb	r3, r3
 8006624:	461a      	mov	r2, r3
 8006626:	79fb      	ldrb	r3, [r7, #7]
 8006628:	429a      	cmp	r2, r3
 800662a:	d0c3      	beq.n	80065b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006636:	b480      	push	{r7}
 8006638:	b085      	sub	sp, #20
 800663a:	af00      	add	r7, sp, #0
 800663c:	60f8      	str	r0, [r7, #12]
 800663e:	60b9      	str	r1, [r7, #8]
 8006640:	4613      	mov	r3, r2
 8006642:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	88fa      	ldrh	r2, [r7, #6]
 800664e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	88fa      	ldrh	r2, [r7, #6]
 8006654:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2222      	movs	r2, #34	; 0x22
 8006660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800667a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	695a      	ldr	r2, [r3, #20]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0201 	orr.w	r2, r2, #1
 800668a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68da      	ldr	r2, [r3, #12]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f042 0220 	orr.w	r2, r2, #32
 800669a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b083      	sub	sp, #12
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68da      	ldr	r2, [r3, #12]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80066c0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2220      	movs	r2, #32
 80066c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80066ca:	bf00      	nop
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066ec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	695a      	ldr	r2, [r3, #20]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0201 	bic.w	r2, r2, #1
 80066fc:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006702:	2b01      	cmp	r3, #1
 8006704:	d107      	bne.n	8006716 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68da      	ldr	r2, [r3, #12]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 0210 	bic.w	r2, r2, #16
 8006714:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2220      	movs	r2, #32
 800671a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f7ff fe92 	bl	8006474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006750:	bf00      	nop
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b21      	cmp	r3, #33	; 0x21
 800676a:	d13e      	bne.n	80067ea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006774:	d114      	bne.n	80067a0 <UART_Transmit_IT+0x48>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d110      	bne.n	80067a0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	461a      	mov	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006792:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	1c9a      	adds	r2, r3, #2
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	621a      	str	r2, [r3, #32]
 800679e:	e008      	b.n	80067b2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	1c59      	adds	r1, r3, #1
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	6211      	str	r1, [r2, #32]
 80067aa:	781a      	ldrb	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	3b01      	subs	r3, #1
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	4619      	mov	r1, r3
 80067c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10f      	bne.n	80067e6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68da      	ldr	r2, [r3, #12]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	e000      	b.n	80067ec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067ea:	2302      	movs	r3, #2
  }
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68da      	ldr	r2, [r3, #12]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800680e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2220      	movs	r2, #32
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7fa f9a3 	bl	8000b64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b22      	cmp	r3, #34	; 0x22
 800683a:	f040 8087 	bne.w	800694c <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006846:	d117      	bne.n	8006878 <UART_Receive_IT+0x50>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d113      	bne.n	8006878 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006850:	2300      	movs	r3, #0
 8006852:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006858:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	b29b      	uxth	r3, r3
 8006862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006866:	b29a      	uxth	r2, r3
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006870:	1c9a      	adds	r2, r3, #2
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	629a      	str	r2, [r3, #40]	; 0x28
 8006876:	e026      	b.n	80068c6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687c:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800687e:	2300      	movs	r3, #0
 8006880:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800688a:	d007      	beq.n	800689c <UART_Receive_IT+0x74>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10a      	bne.n	80068aa <UART_Receive_IT+0x82>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d106      	bne.n	80068aa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	701a      	strb	r2, [r3, #0]
 80068a8:	e008      	b.n	80068bc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	4619      	mov	r1, r3
 80068d4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d136      	bne.n	8006948 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68da      	ldr	r2, [r3, #12]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 0220 	bic.w	r2, r2, #32
 80068e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68da      	ldr	r2, [r3, #12]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	695a      	ldr	r2, [r3, #20]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 0201 	bic.w	r2, r2, #1
 8006908:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2220      	movs	r2, #32
 800690e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006916:	2b01      	cmp	r3, #1
 8006918:	d10e      	bne.n	8006938 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 0210 	bic.w	r2, r2, #16
 8006928:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7ff fda9 	bl	8006488 <HAL_UARTEx_RxEventCallback>
 8006936:	e002      	b.n	800693e <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f7fa f8eb 	bl	8000b14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8006944:	2300      	movs	r3, #0
 8006946:	e002      	b.n	800694e <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8006948:	2300      	movs	r3, #0
 800694a:	e000      	b.n	800694e <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800694c:	2302      	movs	r3, #2
  }
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
	...

08006958 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800695c:	b09f      	sub	sp, #124	; 0x7c
 800695e:	af00      	add	r7, sp, #0
 8006960:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800696c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800696e:	68d9      	ldr	r1, [r3, #12]
 8006970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	ea40 0301 	orr.w	r3, r0, r1
 8006978:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800697a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800697c:	689a      	ldr	r2, [r3, #8]
 800697e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	431a      	orrs	r2, r3
 8006984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	431a      	orrs	r2, r3
 800698a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800698c:	69db      	ldr	r3, [r3, #28]
 800698e:	4313      	orrs	r3, r2
 8006990:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800699c:	f021 010c 	bic.w	r1, r1, #12
 80069a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069a6:	430b      	orrs	r3, r1
 80069a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80069b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069b6:	6999      	ldr	r1, [r3, #24]
 80069b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	ea40 0301 	orr.w	r3, r0, r1
 80069c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	4bc5      	ldr	r3, [pc, #788]	; (8006cdc <UART_SetConfig+0x384>)
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d004      	beq.n	80069d6 <UART_SetConfig+0x7e>
 80069cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	4bc3      	ldr	r3, [pc, #780]	; (8006ce0 <UART_SetConfig+0x388>)
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d103      	bne.n	80069de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80069d6:	f7ff fa07 	bl	8005de8 <HAL_RCC_GetPCLK2Freq>
 80069da:	6778      	str	r0, [r7, #116]	; 0x74
 80069dc:	e002      	b.n	80069e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80069de:	f7ff f9ef 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 80069e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ec:	f040 80b6 	bne.w	8006b5c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069f2:	461c      	mov	r4, r3
 80069f4:	f04f 0500 	mov.w	r5, #0
 80069f8:	4622      	mov	r2, r4
 80069fa:	462b      	mov	r3, r5
 80069fc:	1891      	adds	r1, r2, r2
 80069fe:	6439      	str	r1, [r7, #64]	; 0x40
 8006a00:	415b      	adcs	r3, r3
 8006a02:	647b      	str	r3, [r7, #68]	; 0x44
 8006a04:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006a08:	1912      	adds	r2, r2, r4
 8006a0a:	eb45 0303 	adc.w	r3, r5, r3
 8006a0e:	f04f 0000 	mov.w	r0, #0
 8006a12:	f04f 0100 	mov.w	r1, #0
 8006a16:	00d9      	lsls	r1, r3, #3
 8006a18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a1c:	00d0      	lsls	r0, r2, #3
 8006a1e:	4602      	mov	r2, r0
 8006a20:	460b      	mov	r3, r1
 8006a22:	1911      	adds	r1, r2, r4
 8006a24:	6639      	str	r1, [r7, #96]	; 0x60
 8006a26:	416b      	adcs	r3, r5
 8006a28:	667b      	str	r3, [r7, #100]	; 0x64
 8006a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	f04f 0300 	mov.w	r3, #0
 8006a34:	1891      	adds	r1, r2, r2
 8006a36:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a38:	415b      	adcs	r3, r3
 8006a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a40:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006a44:	f7f9 fbc0 	bl	80001c8 <__aeabi_uldivmod>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4ba5      	ldr	r3, [pc, #660]	; (8006ce4 <UART_SetConfig+0x38c>)
 8006a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8006a52:	095b      	lsrs	r3, r3, #5
 8006a54:	011e      	lsls	r6, r3, #4
 8006a56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a58:	461c      	mov	r4, r3
 8006a5a:	f04f 0500 	mov.w	r5, #0
 8006a5e:	4622      	mov	r2, r4
 8006a60:	462b      	mov	r3, r5
 8006a62:	1891      	adds	r1, r2, r2
 8006a64:	6339      	str	r1, [r7, #48]	; 0x30
 8006a66:	415b      	adcs	r3, r3
 8006a68:	637b      	str	r3, [r7, #52]	; 0x34
 8006a6a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006a6e:	1912      	adds	r2, r2, r4
 8006a70:	eb45 0303 	adc.w	r3, r5, r3
 8006a74:	f04f 0000 	mov.w	r0, #0
 8006a78:	f04f 0100 	mov.w	r1, #0
 8006a7c:	00d9      	lsls	r1, r3, #3
 8006a7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a82:	00d0      	lsls	r0, r2, #3
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	1911      	adds	r1, r2, r4
 8006a8a:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a8c:	416b      	adcs	r3, r5
 8006a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	461a      	mov	r2, r3
 8006a96:	f04f 0300 	mov.w	r3, #0
 8006a9a:	1891      	adds	r1, r2, r2
 8006a9c:	62b9      	str	r1, [r7, #40]	; 0x28
 8006a9e:	415b      	adcs	r3, r3
 8006aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006aa6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006aaa:	f7f9 fb8d 	bl	80001c8 <__aeabi_uldivmod>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	4b8c      	ldr	r3, [pc, #560]	; (8006ce4 <UART_SetConfig+0x38c>)
 8006ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ab8:	095b      	lsrs	r3, r3, #5
 8006aba:	2164      	movs	r1, #100	; 0x64
 8006abc:	fb01 f303 	mul.w	r3, r1, r3
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	3332      	adds	r3, #50	; 0x32
 8006ac6:	4a87      	ldr	r2, [pc, #540]	; (8006ce4 <UART_SetConfig+0x38c>)
 8006ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8006acc:	095b      	lsrs	r3, r3, #5
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ad4:	441e      	add	r6, r3
 8006ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f04f 0100 	mov.w	r1, #0
 8006ade:	4602      	mov	r2, r0
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	1894      	adds	r4, r2, r2
 8006ae4:	623c      	str	r4, [r7, #32]
 8006ae6:	415b      	adcs	r3, r3
 8006ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8006aea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006aee:	1812      	adds	r2, r2, r0
 8006af0:	eb41 0303 	adc.w	r3, r1, r3
 8006af4:	f04f 0400 	mov.w	r4, #0
 8006af8:	f04f 0500 	mov.w	r5, #0
 8006afc:	00dd      	lsls	r5, r3, #3
 8006afe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b02:	00d4      	lsls	r4, r2, #3
 8006b04:	4622      	mov	r2, r4
 8006b06:	462b      	mov	r3, r5
 8006b08:	1814      	adds	r4, r2, r0
 8006b0a:	653c      	str	r4, [r7, #80]	; 0x50
 8006b0c:	414b      	adcs	r3, r1
 8006b0e:	657b      	str	r3, [r7, #84]	; 0x54
 8006b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	461a      	mov	r2, r3
 8006b16:	f04f 0300 	mov.w	r3, #0
 8006b1a:	1891      	adds	r1, r2, r2
 8006b1c:	61b9      	str	r1, [r7, #24]
 8006b1e:	415b      	adcs	r3, r3
 8006b20:	61fb      	str	r3, [r7, #28]
 8006b22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b26:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006b2a:	f7f9 fb4d 	bl	80001c8 <__aeabi_uldivmod>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	4b6c      	ldr	r3, [pc, #432]	; (8006ce4 <UART_SetConfig+0x38c>)
 8006b34:	fba3 1302 	umull	r1, r3, r3, r2
 8006b38:	095b      	lsrs	r3, r3, #5
 8006b3a:	2164      	movs	r1, #100	; 0x64
 8006b3c:	fb01 f303 	mul.w	r3, r1, r3
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	00db      	lsls	r3, r3, #3
 8006b44:	3332      	adds	r3, #50	; 0x32
 8006b46:	4a67      	ldr	r2, [pc, #412]	; (8006ce4 <UART_SetConfig+0x38c>)
 8006b48:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4c:	095b      	lsrs	r3, r3, #5
 8006b4e:	f003 0207 	and.w	r2, r3, #7
 8006b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4432      	add	r2, r6
 8006b58:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b5a:	e0b9      	b.n	8006cd0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b5e:	461c      	mov	r4, r3
 8006b60:	f04f 0500 	mov.w	r5, #0
 8006b64:	4622      	mov	r2, r4
 8006b66:	462b      	mov	r3, r5
 8006b68:	1891      	adds	r1, r2, r2
 8006b6a:	6139      	str	r1, [r7, #16]
 8006b6c:	415b      	adcs	r3, r3
 8006b6e:	617b      	str	r3, [r7, #20]
 8006b70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006b74:	1912      	adds	r2, r2, r4
 8006b76:	eb45 0303 	adc.w	r3, r5, r3
 8006b7a:	f04f 0000 	mov.w	r0, #0
 8006b7e:	f04f 0100 	mov.w	r1, #0
 8006b82:	00d9      	lsls	r1, r3, #3
 8006b84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b88:	00d0      	lsls	r0, r2, #3
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	eb12 0804 	adds.w	r8, r2, r4
 8006b92:	eb43 0905 	adc.w	r9, r3, r5
 8006b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f04f 0100 	mov.w	r1, #0
 8006ba0:	f04f 0200 	mov.w	r2, #0
 8006ba4:	f04f 0300 	mov.w	r3, #0
 8006ba8:	008b      	lsls	r3, r1, #2
 8006baa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006bae:	0082      	lsls	r2, r0, #2
 8006bb0:	4640      	mov	r0, r8
 8006bb2:	4649      	mov	r1, r9
 8006bb4:	f7f9 fb08 	bl	80001c8 <__aeabi_uldivmod>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4b49      	ldr	r3, [pc, #292]	; (8006ce4 <UART_SetConfig+0x38c>)
 8006bbe:	fba3 2302 	umull	r2, r3, r3, r2
 8006bc2:	095b      	lsrs	r3, r3, #5
 8006bc4:	011e      	lsls	r6, r3, #4
 8006bc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f04f 0100 	mov.w	r1, #0
 8006bce:	4602      	mov	r2, r0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	1894      	adds	r4, r2, r2
 8006bd4:	60bc      	str	r4, [r7, #8]
 8006bd6:	415b      	adcs	r3, r3
 8006bd8:	60fb      	str	r3, [r7, #12]
 8006bda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bde:	1812      	adds	r2, r2, r0
 8006be0:	eb41 0303 	adc.w	r3, r1, r3
 8006be4:	f04f 0400 	mov.w	r4, #0
 8006be8:	f04f 0500 	mov.w	r5, #0
 8006bec:	00dd      	lsls	r5, r3, #3
 8006bee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006bf2:	00d4      	lsls	r4, r2, #3
 8006bf4:	4622      	mov	r2, r4
 8006bf6:	462b      	mov	r3, r5
 8006bf8:	1814      	adds	r4, r2, r0
 8006bfa:	64bc      	str	r4, [r7, #72]	; 0x48
 8006bfc:	414b      	adcs	r3, r1
 8006bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f04f 0100 	mov.w	r1, #0
 8006c0a:	f04f 0200 	mov.w	r2, #0
 8006c0e:	f04f 0300 	mov.w	r3, #0
 8006c12:	008b      	lsls	r3, r1, #2
 8006c14:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006c18:	0082      	lsls	r2, r0, #2
 8006c1a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006c1e:	f7f9 fad3 	bl	80001c8 <__aeabi_uldivmod>
 8006c22:	4602      	mov	r2, r0
 8006c24:	460b      	mov	r3, r1
 8006c26:	4b2f      	ldr	r3, [pc, #188]	; (8006ce4 <UART_SetConfig+0x38c>)
 8006c28:	fba3 1302 	umull	r1, r3, r3, r2
 8006c2c:	095b      	lsrs	r3, r3, #5
 8006c2e:	2164      	movs	r1, #100	; 0x64
 8006c30:	fb01 f303 	mul.w	r3, r1, r3
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	011b      	lsls	r3, r3, #4
 8006c38:	3332      	adds	r3, #50	; 0x32
 8006c3a:	4a2a      	ldr	r2, [pc, #168]	; (8006ce4 <UART_SetConfig+0x38c>)
 8006c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c40:	095b      	lsrs	r3, r3, #5
 8006c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c46:	441e      	add	r6, r3
 8006c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f04f 0100 	mov.w	r1, #0
 8006c50:	4602      	mov	r2, r0
 8006c52:	460b      	mov	r3, r1
 8006c54:	1894      	adds	r4, r2, r2
 8006c56:	603c      	str	r4, [r7, #0]
 8006c58:	415b      	adcs	r3, r3
 8006c5a:	607b      	str	r3, [r7, #4]
 8006c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c60:	1812      	adds	r2, r2, r0
 8006c62:	eb41 0303 	adc.w	r3, r1, r3
 8006c66:	f04f 0400 	mov.w	r4, #0
 8006c6a:	f04f 0500 	mov.w	r5, #0
 8006c6e:	00dd      	lsls	r5, r3, #3
 8006c70:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006c74:	00d4      	lsls	r4, r2, #3
 8006c76:	4622      	mov	r2, r4
 8006c78:	462b      	mov	r3, r5
 8006c7a:	eb12 0a00 	adds.w	sl, r2, r0
 8006c7e:	eb43 0b01 	adc.w	fp, r3, r1
 8006c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f04f 0100 	mov.w	r1, #0
 8006c8c:	f04f 0200 	mov.w	r2, #0
 8006c90:	f04f 0300 	mov.w	r3, #0
 8006c94:	008b      	lsls	r3, r1, #2
 8006c96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006c9a:	0082      	lsls	r2, r0, #2
 8006c9c:	4650      	mov	r0, sl
 8006c9e:	4659      	mov	r1, fp
 8006ca0:	f7f9 fa92 	bl	80001c8 <__aeabi_uldivmod>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	4b0e      	ldr	r3, [pc, #56]	; (8006ce4 <UART_SetConfig+0x38c>)
 8006caa:	fba3 1302 	umull	r1, r3, r3, r2
 8006cae:	095b      	lsrs	r3, r3, #5
 8006cb0:	2164      	movs	r1, #100	; 0x64
 8006cb2:	fb01 f303 	mul.w	r3, r1, r3
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	011b      	lsls	r3, r3, #4
 8006cba:	3332      	adds	r3, #50	; 0x32
 8006cbc:	4a09      	ldr	r2, [pc, #36]	; (8006ce4 <UART_SetConfig+0x38c>)
 8006cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc2:	095b      	lsrs	r3, r3, #5
 8006cc4:	f003 020f 	and.w	r2, r3, #15
 8006cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4432      	add	r2, r6
 8006cce:	609a      	str	r2, [r3, #8]
}
 8006cd0:	bf00      	nop
 8006cd2:	377c      	adds	r7, #124	; 0x7c
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cda:	bf00      	nop
 8006cdc:	40011000 	.word	0x40011000
 8006ce0:	40011400 	.word	0x40011400
 8006ce4:	51eb851f 	.word	0x51eb851f

08006ce8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ce8:	b084      	sub	sp, #16
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b084      	sub	sp, #16
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	f107 001c 	add.w	r0, r7, #28
 8006cf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d122      	bne.n	8006d46 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d105      	bne.n	8006d3a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f001 fac6 	bl	80082cc <USB_CoreReset>
 8006d40:	4603      	mov	r3, r0
 8006d42:	73fb      	strb	r3, [r7, #15]
 8006d44:	e01a      	b.n	8006d7c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f001 faba 	bl	80082cc <USB_CoreReset>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d106      	bne.n	8006d70 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	639a      	str	r2, [r3, #56]	; 0x38
 8006d6e:	e005      	b.n	8006d7c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d10b      	bne.n	8006d9a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f043 0206 	orr.w	r2, r3, #6
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f043 0220 	orr.w	r2, r3, #32
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006da6:	b004      	add	sp, #16
 8006da8:	4770      	bx	lr
	...

08006dac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b087      	sub	sp, #28
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	4613      	mov	r3, r2
 8006db8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006dba:	79fb      	ldrb	r3, [r7, #7]
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d165      	bne.n	8006e8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	4a41      	ldr	r2, [pc, #260]	; (8006ec8 <USB_SetTurnaroundTime+0x11c>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d906      	bls.n	8006dd6 <USB_SetTurnaroundTime+0x2a>
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	4a40      	ldr	r2, [pc, #256]	; (8006ecc <USB_SetTurnaroundTime+0x120>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d202      	bcs.n	8006dd6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006dd0:	230f      	movs	r3, #15
 8006dd2:	617b      	str	r3, [r7, #20]
 8006dd4:	e062      	b.n	8006e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	4a3c      	ldr	r2, [pc, #240]	; (8006ecc <USB_SetTurnaroundTime+0x120>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d306      	bcc.n	8006dec <USB_SetTurnaroundTime+0x40>
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	4a3b      	ldr	r2, [pc, #236]	; (8006ed0 <USB_SetTurnaroundTime+0x124>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d202      	bcs.n	8006dec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006de6:	230e      	movs	r3, #14
 8006de8:	617b      	str	r3, [r7, #20]
 8006dea:	e057      	b.n	8006e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	4a38      	ldr	r2, [pc, #224]	; (8006ed0 <USB_SetTurnaroundTime+0x124>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d306      	bcc.n	8006e02 <USB_SetTurnaroundTime+0x56>
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	4a37      	ldr	r2, [pc, #220]	; (8006ed4 <USB_SetTurnaroundTime+0x128>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d202      	bcs.n	8006e02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006dfc:	230d      	movs	r3, #13
 8006dfe:	617b      	str	r3, [r7, #20]
 8006e00:	e04c      	b.n	8006e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	4a33      	ldr	r2, [pc, #204]	; (8006ed4 <USB_SetTurnaroundTime+0x128>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d306      	bcc.n	8006e18 <USB_SetTurnaroundTime+0x6c>
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	4a32      	ldr	r2, [pc, #200]	; (8006ed8 <USB_SetTurnaroundTime+0x12c>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d802      	bhi.n	8006e18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006e12:	230c      	movs	r3, #12
 8006e14:	617b      	str	r3, [r7, #20]
 8006e16:	e041      	b.n	8006e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	4a2f      	ldr	r2, [pc, #188]	; (8006ed8 <USB_SetTurnaroundTime+0x12c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d906      	bls.n	8006e2e <USB_SetTurnaroundTime+0x82>
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	4a2e      	ldr	r2, [pc, #184]	; (8006edc <USB_SetTurnaroundTime+0x130>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d802      	bhi.n	8006e2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006e28:	230b      	movs	r3, #11
 8006e2a:	617b      	str	r3, [r7, #20]
 8006e2c:	e036      	b.n	8006e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	4a2a      	ldr	r2, [pc, #168]	; (8006edc <USB_SetTurnaroundTime+0x130>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d906      	bls.n	8006e44 <USB_SetTurnaroundTime+0x98>
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	4a29      	ldr	r2, [pc, #164]	; (8006ee0 <USB_SetTurnaroundTime+0x134>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d802      	bhi.n	8006e44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006e3e:	230a      	movs	r3, #10
 8006e40:	617b      	str	r3, [r7, #20]
 8006e42:	e02b      	b.n	8006e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	4a26      	ldr	r2, [pc, #152]	; (8006ee0 <USB_SetTurnaroundTime+0x134>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d906      	bls.n	8006e5a <USB_SetTurnaroundTime+0xae>
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	4a25      	ldr	r2, [pc, #148]	; (8006ee4 <USB_SetTurnaroundTime+0x138>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d202      	bcs.n	8006e5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006e54:	2309      	movs	r3, #9
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	e020      	b.n	8006e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	4a21      	ldr	r2, [pc, #132]	; (8006ee4 <USB_SetTurnaroundTime+0x138>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d306      	bcc.n	8006e70 <USB_SetTurnaroundTime+0xc4>
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	4a20      	ldr	r2, [pc, #128]	; (8006ee8 <USB_SetTurnaroundTime+0x13c>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d802      	bhi.n	8006e70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006e6a:	2308      	movs	r3, #8
 8006e6c:	617b      	str	r3, [r7, #20]
 8006e6e:	e015      	b.n	8006e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	4a1d      	ldr	r2, [pc, #116]	; (8006ee8 <USB_SetTurnaroundTime+0x13c>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d906      	bls.n	8006e86 <USB_SetTurnaroundTime+0xda>
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	4a1c      	ldr	r2, [pc, #112]	; (8006eec <USB_SetTurnaroundTime+0x140>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d202      	bcs.n	8006e86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006e80:	2307      	movs	r3, #7
 8006e82:	617b      	str	r3, [r7, #20]
 8006e84:	e00a      	b.n	8006e9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006e86:	2306      	movs	r3, #6
 8006e88:	617b      	str	r3, [r7, #20]
 8006e8a:	e007      	b.n	8006e9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006e8c:	79fb      	ldrb	r3, [r7, #7]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d102      	bne.n	8006e98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006e92:	2309      	movs	r3, #9
 8006e94:	617b      	str	r3, [r7, #20]
 8006e96:	e001      	b.n	8006e9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006e98:	2309      	movs	r3, #9
 8006e9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	68da      	ldr	r2, [r3, #12]
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	029b      	lsls	r3, r3, #10
 8006eb0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	371c      	adds	r7, #28
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	00d8acbf 	.word	0x00d8acbf
 8006ecc:	00e4e1c0 	.word	0x00e4e1c0
 8006ed0:	00f42400 	.word	0x00f42400
 8006ed4:	01067380 	.word	0x01067380
 8006ed8:	011a499f 	.word	0x011a499f
 8006edc:	01312cff 	.word	0x01312cff
 8006ee0:	014ca43f 	.word	0x014ca43f
 8006ee4:	016e3600 	.word	0x016e3600
 8006ee8:	01a6ab1f 	.word	0x01a6ab1f
 8006eec:	01e84800 	.word	0x01e84800

08006ef0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f043 0201 	orr.w	r2, r3, #1
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b083      	sub	sp, #12
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f023 0201 	bic.w	r2, r3, #1
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f4c:	78fb      	ldrb	r3, [r7, #3]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d106      	bne.n	8006f60 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	60da      	str	r2, [r3, #12]
 8006f5e:	e00b      	b.n	8006f78 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f60:	78fb      	ldrb	r3, [r7, #3]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d106      	bne.n	8006f74 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	60da      	str	r2, [r3, #12]
 8006f72:	e001      	b.n	8006f78 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e003      	b.n	8006f80 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006f78:	2032      	movs	r0, #50	; 0x32
 8006f7a:	f7fa fcdb 	bl	8001934 <HAL_Delay>

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f88:	b084      	sub	sp, #16
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b086      	sub	sp, #24
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	613b      	str	r3, [r7, #16]
 8006fa6:	e009      	b.n	8006fbc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	3340      	adds	r3, #64	; 0x40
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	613b      	str	r3, [r7, #16]
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	2b0e      	cmp	r3, #14
 8006fc0:	d9f2      	bls.n	8006fa8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d11c      	bne.n	8007002 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fd6:	f043 0302 	orr.w	r3, r3, #2
 8006fda:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	639a      	str	r2, [r3, #56]	; 0x38
 8007000:	e00b      	b.n	800701a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007006:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007012:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007020:	461a      	mov	r2, r3
 8007022:	2300      	movs	r3, #0
 8007024:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800702c:	4619      	mov	r1, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007034:	461a      	mov	r2, r3
 8007036:	680b      	ldr	r3, [r1, #0]
 8007038:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800703a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703c:	2b01      	cmp	r3, #1
 800703e:	d10c      	bne.n	800705a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007042:	2b00      	cmp	r3, #0
 8007044:	d104      	bne.n	8007050 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007046:	2100      	movs	r1, #0
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f949 	bl	80072e0 <USB_SetDevSpeed>
 800704e:	e008      	b.n	8007062 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007050:	2101      	movs	r1, #1
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f944 	bl	80072e0 <USB_SetDevSpeed>
 8007058:	e003      	b.n	8007062 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800705a:	2103      	movs	r1, #3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f93f 	bl	80072e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007062:	2110      	movs	r1, #16
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f8f3 	bl	8007250 <USB_FlushTxFifo>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d001      	beq.n	8007074 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f911 	bl	800729c <USB_FlushRxFifo>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800708a:	461a      	mov	r2, r3
 800708c:	2300      	movs	r3, #0
 800708e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007096:	461a      	mov	r2, r3
 8007098:	2300      	movs	r3, #0
 800709a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a2:	461a      	mov	r2, r3
 80070a4:	2300      	movs	r3, #0
 80070a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070a8:	2300      	movs	r3, #0
 80070aa:	613b      	str	r3, [r7, #16]
 80070ac:	e043      	b.n	8007136 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070c4:	d118      	bne.n	80070f8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10a      	bne.n	80070e2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d8:	461a      	mov	r2, r3
 80070da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070de:	6013      	str	r3, [r2, #0]
 80070e0:	e013      	b.n	800710a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	015a      	lsls	r2, r3, #5
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	4413      	add	r3, r2
 80070ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ee:	461a      	mov	r2, r3
 80070f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070f4:	6013      	str	r3, [r2, #0]
 80070f6:	e008      	b.n	800710a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007104:	461a      	mov	r2, r3
 8007106:	2300      	movs	r3, #0
 8007108:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007116:	461a      	mov	r2, r3
 8007118:	2300      	movs	r3, #0
 800711a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	4413      	add	r3, r2
 8007124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007128:	461a      	mov	r2, r3
 800712a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800712e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	3301      	adds	r3, #1
 8007134:	613b      	str	r3, [r7, #16]
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	429a      	cmp	r2, r3
 800713c:	d3b7      	bcc.n	80070ae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800713e:	2300      	movs	r3, #0
 8007140:	613b      	str	r3, [r7, #16]
 8007142:	e043      	b.n	80071cc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	015a      	lsls	r2, r3, #5
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	4413      	add	r3, r2
 800714c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800715a:	d118      	bne.n	800718e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10a      	bne.n	8007178 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716e:	461a      	mov	r2, r3
 8007170:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007174:	6013      	str	r3, [r2, #0]
 8007176:	e013      	b.n	80071a0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4413      	add	r3, r2
 8007180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007184:	461a      	mov	r2, r3
 8007186:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800718a:	6013      	str	r3, [r2, #0]
 800718c:	e008      	b.n	80071a0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	015a      	lsls	r2, r3, #5
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	4413      	add	r3, r2
 8007196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800719a:	461a      	mov	r2, r3
 800719c:	2300      	movs	r3, #0
 800719e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ac:	461a      	mov	r2, r3
 80071ae:	2300      	movs	r3, #0
 80071b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071be:	461a      	mov	r2, r3
 80071c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80071c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	3301      	adds	r3, #1
 80071ca:	613b      	str	r3, [r7, #16]
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d3b7      	bcc.n	8007144 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80071f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80071f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d105      	bne.n	8007208 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	f043 0210 	orr.w	r2, r3, #16
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	699a      	ldr	r2, [r3, #24]
 800720c:	4b0f      	ldr	r3, [pc, #60]	; (800724c <USB_DevInit+0x2c4>)
 800720e:	4313      	orrs	r3, r2
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007216:	2b00      	cmp	r3, #0
 8007218:	d005      	beq.n	8007226 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	f043 0208 	orr.w	r2, r3, #8
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007228:	2b01      	cmp	r3, #1
 800722a:	d107      	bne.n	800723c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007234:	f043 0304 	orr.w	r3, r3, #4
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800723c:	7dfb      	ldrb	r3, [r7, #23]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3718      	adds	r7, #24
 8007242:	46bd      	mov	sp, r7
 8007244:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007248:	b004      	add	sp, #16
 800724a:	4770      	bx	lr
 800724c:	803c3800 	.word	0x803c3800

08007250 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800725a:	2300      	movs	r3, #0
 800725c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	019b      	lsls	r3, r3, #6
 8007262:	f043 0220 	orr.w	r2, r3, #32
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3301      	adds	r3, #1
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	4a09      	ldr	r2, [pc, #36]	; (8007298 <USB_FlushTxFifo+0x48>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d901      	bls.n	800727c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e006      	b.n	800728a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	f003 0320 	and.w	r3, r3, #32
 8007284:	2b20      	cmp	r3, #32
 8007286:	d0f0      	beq.n	800726a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	00030d40 	.word	0x00030d40

0800729c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80072a4:	2300      	movs	r3, #0
 80072a6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2210      	movs	r2, #16
 80072ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3301      	adds	r3, #1
 80072b2:	60fb      	str	r3, [r7, #12]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4a09      	ldr	r2, [pc, #36]	; (80072dc <USB_FlushRxFifo+0x40>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d901      	bls.n	80072c0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e006      	b.n	80072ce <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	f003 0310 	and.w	r3, r3, #16
 80072c8:	2b10      	cmp	r3, #16
 80072ca:	d0f0      	beq.n	80072ae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3714      	adds	r7, #20
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	00030d40 	.word	0x00030d40

080072e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	460b      	mov	r3, r1
 80072ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	78fb      	ldrb	r3, [r7, #3]
 80072fa:	68f9      	ldr	r1, [r7, #12]
 80072fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007300:	4313      	orrs	r3, r2
 8007302:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007312:	b480      	push	{r7}
 8007314:	b087      	sub	sp, #28
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f003 0306 	and.w	r3, r3, #6
 800732a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d102      	bne.n	8007338 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007332:	2300      	movs	r3, #0
 8007334:	75fb      	strb	r3, [r7, #23]
 8007336:	e00a      	b.n	800734e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2b02      	cmp	r3, #2
 800733c:	d002      	beq.n	8007344 <USB_GetDevSpeed+0x32>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2b06      	cmp	r3, #6
 8007342:	d102      	bne.n	800734a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007344:	2302      	movs	r3, #2
 8007346:	75fb      	strb	r3, [r7, #23]
 8007348:	e001      	b.n	800734e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800734a:	230f      	movs	r3, #15
 800734c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800734e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007350:	4618      	mov	r0, r3
 8007352:	371c      	adds	r7, #28
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	785b      	ldrb	r3, [r3, #1]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d13a      	bne.n	80073ee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800737e:	69da      	ldr	r2, [r3, #28]
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	f003 030f 	and.w	r3, r3, #15
 8007388:	2101      	movs	r1, #1
 800738a:	fa01 f303 	lsl.w	r3, r1, r3
 800738e:	b29b      	uxth	r3, r3
 8007390:	68f9      	ldr	r1, [r7, #12]
 8007392:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007396:	4313      	orrs	r3, r2
 8007398:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d155      	bne.n	800745c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	015a      	lsls	r2, r3, #5
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4413      	add	r3, r2
 80073b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	78db      	ldrb	r3, [r3, #3]
 80073ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80073cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	059b      	lsls	r3, r3, #22
 80073d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80073d4:	4313      	orrs	r3, r2
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	0151      	lsls	r1, r2, #5
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	440a      	add	r2, r1
 80073de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ea:	6013      	str	r3, [r2, #0]
 80073ec:	e036      	b.n	800745c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f4:	69da      	ldr	r2, [r3, #28]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	f003 030f 	and.w	r3, r3, #15
 80073fe:	2101      	movs	r1, #1
 8007400:	fa01 f303 	lsl.w	r3, r1, r3
 8007404:	041b      	lsls	r3, r3, #16
 8007406:	68f9      	ldr	r1, [r7, #12]
 8007408:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800740c:	4313      	orrs	r3, r2
 800740e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d11a      	bne.n	800745c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	015a      	lsls	r2, r3, #5
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	4413      	add	r3, r2
 800742e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	78db      	ldrb	r3, [r3, #3]
 8007440:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007442:	430b      	orrs	r3, r1
 8007444:	4313      	orrs	r3, r2
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	0151      	lsls	r1, r2, #5
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	440a      	add	r2, r1
 800744e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800745a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
	...

0800746c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	785b      	ldrb	r3, [r3, #1]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d161      	bne.n	800754c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	015a      	lsls	r2, r3, #5
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4413      	add	r3, r2
 8007490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800749a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800749e:	d11f      	bne.n	80074e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	015a      	lsls	r2, r3, #5
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	0151      	lsls	r1, r2, #5
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	440a      	add	r2, r1
 80074b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80074be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	015a      	lsls	r2, r3, #5
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	0151      	lsls	r1, r2, #5
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	440a      	add	r2, r1
 80074d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	f003 030f 	and.w	r3, r3, #15
 80074f0:	2101      	movs	r1, #1
 80074f2:	fa01 f303 	lsl.w	r3, r1, r3
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	43db      	mvns	r3, r3
 80074fa:	68f9      	ldr	r1, [r7, #12]
 80074fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007500:	4013      	ands	r3, r2
 8007502:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800750a:	69da      	ldr	r2, [r3, #28]
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	f003 030f 	and.w	r3, r3, #15
 8007514:	2101      	movs	r1, #1
 8007516:	fa01 f303 	lsl.w	r3, r1, r3
 800751a:	b29b      	uxth	r3, r3
 800751c:	43db      	mvns	r3, r3
 800751e:	68f9      	ldr	r1, [r7, #12]
 8007520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007524:	4013      	ands	r3, r2
 8007526:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4413      	add	r3, r2
 8007530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	0159      	lsls	r1, r3, #5
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	440b      	add	r3, r1
 800753e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007542:	4619      	mov	r1, r3
 8007544:	4b35      	ldr	r3, [pc, #212]	; (800761c <USB_DeactivateEndpoint+0x1b0>)
 8007546:	4013      	ands	r3, r2
 8007548:	600b      	str	r3, [r1, #0]
 800754a:	e060      	b.n	800760e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	4413      	add	r3, r2
 8007554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800755e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007562:	d11f      	bne.n	80075a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	015a      	lsls	r2, r3, #5
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	4413      	add	r3, r2
 800756c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	0151      	lsls	r1, r2, #5
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	440a      	add	r2, r1
 800757a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800757e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007582:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	015a      	lsls	r2, r3, #5
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	4413      	add	r3, r2
 800758c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	0151      	lsls	r1, r2, #5
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	440a      	add	r2, r1
 800759a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800759e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	f003 030f 	and.w	r3, r3, #15
 80075b4:	2101      	movs	r1, #1
 80075b6:	fa01 f303 	lsl.w	r3, r1, r3
 80075ba:	041b      	lsls	r3, r3, #16
 80075bc:	43db      	mvns	r3, r3
 80075be:	68f9      	ldr	r1, [r7, #12]
 80075c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075c4:	4013      	ands	r3, r2
 80075c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ce:	69da      	ldr	r2, [r3, #28]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	f003 030f 	and.w	r3, r3, #15
 80075d8:	2101      	movs	r1, #1
 80075da:	fa01 f303 	lsl.w	r3, r1, r3
 80075de:	041b      	lsls	r3, r3, #16
 80075e0:	43db      	mvns	r3, r3
 80075e2:	68f9      	ldr	r1, [r7, #12]
 80075e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075e8:	4013      	ands	r3, r2
 80075ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	0159      	lsls	r1, r3, #5
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	440b      	add	r3, r1
 8007602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007606:	4619      	mov	r1, r3
 8007608:	4b05      	ldr	r3, [pc, #20]	; (8007620 <USB_DeactivateEndpoint+0x1b4>)
 800760a:	4013      	ands	r3, r2
 800760c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	ec337800 	.word	0xec337800
 8007620:	eff37800 	.word	0xeff37800

08007624 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b08a      	sub	sp, #40	; 0x28
 8007628:	af02      	add	r7, sp, #8
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	4613      	mov	r3, r2
 8007630:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	785b      	ldrb	r3, [r3, #1]
 8007640:	2b01      	cmp	r3, #1
 8007642:	f040 815c 	bne.w	80078fe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d132      	bne.n	80076b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	015a      	lsls	r2, r3, #5
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	4413      	add	r3, r2
 8007656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	69ba      	ldr	r2, [r7, #24]
 800765e:	0151      	lsls	r1, r2, #5
 8007660:	69fa      	ldr	r2, [r7, #28]
 8007662:	440a      	add	r2, r1
 8007664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007668:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800766c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007670:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	015a      	lsls	r2, r3, #5
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	4413      	add	r3, r2
 800767a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	69ba      	ldr	r2, [r7, #24]
 8007682:	0151      	lsls	r1, r2, #5
 8007684:	69fa      	ldr	r2, [r7, #28]
 8007686:	440a      	add	r2, r1
 8007688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800768c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007690:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	4413      	add	r3, r2
 800769a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	69ba      	ldr	r2, [r7, #24]
 80076a2:	0151      	lsls	r1, r2, #5
 80076a4:	69fa      	ldr	r2, [r7, #28]
 80076a6:	440a      	add	r2, r1
 80076a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ac:	0cdb      	lsrs	r3, r3, #19
 80076ae:	04db      	lsls	r3, r3, #19
 80076b0:	6113      	str	r3, [r2, #16]
 80076b2:	e074      	b.n	800779e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	015a      	lsls	r2, r3, #5
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	4413      	add	r3, r2
 80076bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	69ba      	ldr	r2, [r7, #24]
 80076c4:	0151      	lsls	r1, r2, #5
 80076c6:	69fa      	ldr	r2, [r7, #28]
 80076c8:	440a      	add	r2, r1
 80076ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ce:	0cdb      	lsrs	r3, r3, #19
 80076d0:	04db      	lsls	r3, r3, #19
 80076d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	015a      	lsls	r2, r3, #5
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	4413      	add	r3, r2
 80076dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	69ba      	ldr	r2, [r7, #24]
 80076e4:	0151      	lsls	r1, r2, #5
 80076e6:	69fa      	ldr	r2, [r7, #28]
 80076e8:	440a      	add	r2, r1
 80076ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	015a      	lsls	r2, r3, #5
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	4413      	add	r3, r2
 8007700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007704:	691a      	ldr	r2, [r3, #16]
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	6959      	ldr	r1, [r3, #20]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	440b      	add	r3, r1
 8007710:	1e59      	subs	r1, r3, #1
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	fbb1 f3f3 	udiv	r3, r1, r3
 800771a:	04d9      	lsls	r1, r3, #19
 800771c:	4b9d      	ldr	r3, [pc, #628]	; (8007994 <USB_EPStartXfer+0x370>)
 800771e:	400b      	ands	r3, r1
 8007720:	69b9      	ldr	r1, [r7, #24]
 8007722:	0148      	lsls	r0, r1, #5
 8007724:	69f9      	ldr	r1, [r7, #28]
 8007726:	4401      	add	r1, r0
 8007728:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800772c:	4313      	orrs	r3, r2
 800772e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	4413      	add	r3, r2
 8007738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800773c:	691a      	ldr	r2, [r3, #16]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007746:	69b9      	ldr	r1, [r7, #24]
 8007748:	0148      	lsls	r0, r1, #5
 800774a:	69f9      	ldr	r1, [r7, #28]
 800774c:	4401      	add	r1, r0
 800774e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007752:	4313      	orrs	r3, r2
 8007754:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	78db      	ldrb	r3, [r3, #3]
 800775a:	2b01      	cmp	r3, #1
 800775c:	d11f      	bne.n	800779e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	015a      	lsls	r2, r3, #5
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	4413      	add	r3, r2
 8007766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	0151      	lsls	r1, r2, #5
 8007770:	69fa      	ldr	r2, [r7, #28]
 8007772:	440a      	add	r2, r1
 8007774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007778:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800777c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	015a      	lsls	r2, r3, #5
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	4413      	add	r3, r2
 8007786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	69ba      	ldr	r2, [r7, #24]
 800778e:	0151      	lsls	r1, r2, #5
 8007790:	69fa      	ldr	r2, [r7, #28]
 8007792:	440a      	add	r2, r1
 8007794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007798:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800779c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800779e:	79fb      	ldrb	r3, [r7, #7]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d14b      	bne.n	800783c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d009      	beq.n	80077c0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	015a      	lsls	r2, r3, #5
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	4413      	add	r3, r2
 80077b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077b8:	461a      	mov	r2, r3
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	78db      	ldrb	r3, [r3, #3]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d128      	bne.n	800781a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d110      	bne.n	80077fa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	015a      	lsls	r2, r3, #5
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	4413      	add	r3, r2
 80077e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	69ba      	ldr	r2, [r7, #24]
 80077e8:	0151      	lsls	r1, r2, #5
 80077ea:	69fa      	ldr	r2, [r7, #28]
 80077ec:	440a      	add	r2, r1
 80077ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077f6:	6013      	str	r3, [r2, #0]
 80077f8:	e00f      	b.n	800781a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	015a      	lsls	r2, r3, #5
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	4413      	add	r3, r2
 8007802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	69ba      	ldr	r2, [r7, #24]
 800780a:	0151      	lsls	r1, r2, #5
 800780c:	69fa      	ldr	r2, [r7, #28]
 800780e:	440a      	add	r2, r1
 8007810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007818:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	015a      	lsls	r2, r3, #5
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	4413      	add	r3, r2
 8007822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	0151      	lsls	r1, r2, #5
 800782c:	69fa      	ldr	r2, [r7, #28]
 800782e:	440a      	add	r2, r1
 8007830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007834:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007838:	6013      	str	r3, [r2, #0]
 800783a:	e12f      	b.n	8007a9c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	015a      	lsls	r2, r3, #5
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	4413      	add	r3, r2
 8007844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	69ba      	ldr	r2, [r7, #24]
 800784c:	0151      	lsls	r1, r2, #5
 800784e:	69fa      	ldr	r2, [r7, #28]
 8007850:	440a      	add	r2, r1
 8007852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007856:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800785a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	78db      	ldrb	r3, [r3, #3]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d015      	beq.n	8007890 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	695b      	ldr	r3, [r3, #20]
 8007868:	2b00      	cmp	r3, #0
 800786a:	f000 8117 	beq.w	8007a9c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	f003 030f 	and.w	r3, r3, #15
 800787e:	2101      	movs	r1, #1
 8007880:	fa01 f303 	lsl.w	r3, r1, r3
 8007884:	69f9      	ldr	r1, [r7, #28]
 8007886:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800788a:	4313      	orrs	r3, r2
 800788c:	634b      	str	r3, [r1, #52]	; 0x34
 800788e:	e105      	b.n	8007a9c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800789c:	2b00      	cmp	r3, #0
 800789e:	d110      	bne.n	80078c2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	0151      	lsls	r1, r2, #5
 80078b2:	69fa      	ldr	r2, [r7, #28]
 80078b4:	440a      	add	r2, r1
 80078b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80078be:	6013      	str	r3, [r2, #0]
 80078c0:	e00f      	b.n	80078e2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	015a      	lsls	r2, r3, #5
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	0151      	lsls	r1, r2, #5
 80078d4:	69fa      	ldr	r2, [r7, #28]
 80078d6:	440a      	add	r2, r1
 80078d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	68d9      	ldr	r1, [r3, #12]
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	781a      	ldrb	r2, [r3, #0]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	b298      	uxth	r0, r3
 80078f0:	79fb      	ldrb	r3, [r7, #7]
 80078f2:	9300      	str	r3, [sp, #0]
 80078f4:	4603      	mov	r3, r0
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f000 fa2b 	bl	8007d52 <USB_WritePacket>
 80078fc:	e0ce      	b.n	8007a9c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	015a      	lsls	r2, r3, #5
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	4413      	add	r3, r2
 8007906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	69ba      	ldr	r2, [r7, #24]
 800790e:	0151      	lsls	r1, r2, #5
 8007910:	69fa      	ldr	r2, [r7, #28]
 8007912:	440a      	add	r2, r1
 8007914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007918:	0cdb      	lsrs	r3, r3, #19
 800791a:	04db      	lsls	r3, r3, #19
 800791c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	4413      	add	r3, r2
 8007926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	69ba      	ldr	r2, [r7, #24]
 800792e:	0151      	lsls	r1, r2, #5
 8007930:	69fa      	ldr	r2, [r7, #28]
 8007932:	440a      	add	r2, r1
 8007934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007938:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800793c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007940:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d126      	bne.n	8007998 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	015a      	lsls	r2, r3, #5
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	4413      	add	r3, r2
 8007952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007956:	691a      	ldr	r2, [r3, #16]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007960:	69b9      	ldr	r1, [r7, #24]
 8007962:	0148      	lsls	r0, r1, #5
 8007964:	69f9      	ldr	r1, [r7, #28]
 8007966:	4401      	add	r1, r0
 8007968:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800796c:	4313      	orrs	r3, r2
 800796e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	015a      	lsls	r2, r3, #5
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	4413      	add	r3, r2
 8007978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	0151      	lsls	r1, r2, #5
 8007982:	69fa      	ldr	r2, [r7, #28]
 8007984:	440a      	add	r2, r1
 8007986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800798a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800798e:	6113      	str	r3, [r2, #16]
 8007990:	e036      	b.n	8007a00 <USB_EPStartXfer+0x3dc>
 8007992:	bf00      	nop
 8007994:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	695a      	ldr	r2, [r3, #20]
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	4413      	add	r3, r2
 80079a2:	1e5a      	subs	r2, r3, #1
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ac:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ba:	691a      	ldr	r2, [r3, #16]
 80079bc:	8afb      	ldrh	r3, [r7, #22]
 80079be:	04d9      	lsls	r1, r3, #19
 80079c0:	4b39      	ldr	r3, [pc, #228]	; (8007aa8 <USB_EPStartXfer+0x484>)
 80079c2:	400b      	ands	r3, r1
 80079c4:	69b9      	ldr	r1, [r7, #24]
 80079c6:	0148      	lsls	r0, r1, #5
 80079c8:	69f9      	ldr	r1, [r7, #28]
 80079ca:	4401      	add	r1, r0
 80079cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80079d0:	4313      	orrs	r3, r2
 80079d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e0:	691a      	ldr	r2, [r3, #16]
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	8af9      	ldrh	r1, [r7, #22]
 80079e8:	fb01 f303 	mul.w	r3, r1, r3
 80079ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079f0:	69b9      	ldr	r1, [r7, #24]
 80079f2:	0148      	lsls	r0, r1, #5
 80079f4:	69f9      	ldr	r1, [r7, #28]
 80079f6:	4401      	add	r1, r0
 80079f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80079fc:	4313      	orrs	r3, r2
 80079fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007a00:	79fb      	ldrb	r3, [r7, #7]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d10d      	bne.n	8007a22 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d009      	beq.n	8007a22 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	68d9      	ldr	r1, [r3, #12]
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	015a      	lsls	r2, r3, #5
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	4413      	add	r3, r2
 8007a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a1e:	460a      	mov	r2, r1
 8007a20:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	78db      	ldrb	r3, [r3, #3]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d128      	bne.n	8007a7c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d110      	bne.n	8007a5c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	69ba      	ldr	r2, [r7, #24]
 8007a4a:	0151      	lsls	r1, r2, #5
 8007a4c:	69fa      	ldr	r2, [r7, #28]
 8007a4e:	440a      	add	r2, r1
 8007a50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	e00f      	b.n	8007a7c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	015a      	lsls	r2, r3, #5
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	69ba      	ldr	r2, [r7, #24]
 8007a6c:	0151      	lsls	r1, r2, #5
 8007a6e:	69fa      	ldr	r2, [r7, #28]
 8007a70:	440a      	add	r2, r1
 8007a72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	69ba      	ldr	r2, [r7, #24]
 8007a8c:	0151      	lsls	r1, r2, #5
 8007a8e:	69fa      	ldr	r2, [r7, #28]
 8007a90:	440a      	add	r2, r1
 8007a92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3720      	adds	r7, #32
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	1ff80000 	.word	0x1ff80000

08007aac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b087      	sub	sp, #28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	785b      	ldrb	r3, [r3, #1]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	f040 80cd 	bne.w	8007c68 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d132      	bne.n	8007b3c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	0151      	lsls	r1, r2, #5
 8007ae8:	697a      	ldr	r2, [r7, #20]
 8007aea:	440a      	add	r2, r1
 8007aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007af0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007af4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007af8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	0151      	lsls	r1, r2, #5
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	440a      	add	r2, r1
 8007b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	015a      	lsls	r2, r3, #5
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	0151      	lsls	r1, r2, #5
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	440a      	add	r2, r1
 8007b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b34:	0cdb      	lsrs	r3, r3, #19
 8007b36:	04db      	lsls	r3, r3, #19
 8007b38:	6113      	str	r3, [r2, #16]
 8007b3a:	e04e      	b.n	8007bda <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	015a      	lsls	r2, r3, #5
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	0151      	lsls	r1, r2, #5
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	440a      	add	r2, r1
 8007b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b56:	0cdb      	lsrs	r3, r3, #19
 8007b58:	04db      	lsls	r3, r3, #19
 8007b5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	693a      	ldr	r2, [r7, #16]
 8007b6c:	0151      	lsls	r1, r2, #5
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	440a      	add	r2, r1
 8007b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b7e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	695a      	ldr	r2, [r3, #20]
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d903      	bls.n	8007b94 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	689a      	ldr	r2, [r3, #8]
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	0151      	lsls	r1, r2, #5
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	440a      	add	r2, r1
 8007baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	015a      	lsls	r2, r3, #5
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	4413      	add	r3, r2
 8007bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc0:	691a      	ldr	r2, [r3, #16]
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bca:	6939      	ldr	r1, [r7, #16]
 8007bcc:	0148      	lsls	r0, r1, #5
 8007bce:	6979      	ldr	r1, [r7, #20]
 8007bd0:	4401      	add	r1, r0
 8007bd2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007bda:	79fb      	ldrb	r3, [r7, #7]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d11e      	bne.n	8007c1e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d009      	beq.n	8007bfc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	015a      	lsls	r2, r3, #5
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	4413      	add	r3, r2
 8007c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	693a      	ldr	r2, [r7, #16]
 8007c0c:	0151      	lsls	r1, r2, #5
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	440a      	add	r2, r1
 8007c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c1a:	6013      	str	r3, [r2, #0]
 8007c1c:	e092      	b.n	8007d44 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	0151      	lsls	r1, r2, #5
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	440a      	add	r2, r1
 8007c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c3c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d07e      	beq.n	8007d44 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	f003 030f 	and.w	r3, r3, #15
 8007c56:	2101      	movs	r1, #1
 8007c58:	fa01 f303 	lsl.w	r3, r1, r3
 8007c5c:	6979      	ldr	r1, [r7, #20]
 8007c5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c62:	4313      	orrs	r3, r2
 8007c64:	634b      	str	r3, [r1, #52]	; 0x34
 8007c66:	e06d      	b.n	8007d44 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	015a      	lsls	r2, r3, #5
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	4413      	add	r3, r2
 8007c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	693a      	ldr	r2, [r7, #16]
 8007c78:	0151      	lsls	r1, r2, #5
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	440a      	add	r2, r1
 8007c7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c82:	0cdb      	lsrs	r3, r3, #19
 8007c84:	04db      	lsls	r3, r3, #19
 8007c86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	015a      	lsls	r2, r3, #5
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	693a      	ldr	r2, [r7, #16]
 8007c98:	0151      	lsls	r1, r2, #5
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	440a      	add	r2, r1
 8007c9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ca2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ca6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007caa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d003      	beq.n	8007cbc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	689a      	ldr	r2, [r3, #8]
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	0151      	lsls	r1, r2, #5
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	440a      	add	r2, r1
 8007cd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cda:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	015a      	lsls	r2, r3, #5
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce8:	691a      	ldr	r2, [r3, #16]
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cf2:	6939      	ldr	r1, [r7, #16]
 8007cf4:	0148      	lsls	r0, r1, #5
 8007cf6:	6979      	ldr	r1, [r7, #20]
 8007cf8:	4401      	add	r1, r0
 8007cfa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007d02:	79fb      	ldrb	r3, [r7, #7]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d10d      	bne.n	8007d24 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d009      	beq.n	8007d24 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	68d9      	ldr	r1, [r3, #12]
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	015a      	lsls	r2, r3, #5
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d20:	460a      	mov	r2, r1
 8007d22:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	0151      	lsls	r1, r2, #5
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	440a      	add	r2, r1
 8007d3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	371c      	adds	r7, #28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b089      	sub	sp, #36	; 0x24
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	60f8      	str	r0, [r7, #12]
 8007d5a:	60b9      	str	r1, [r7, #8]
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	461a      	mov	r2, r3
 8007d60:	460b      	mov	r3, r1
 8007d62:	71fb      	strb	r3, [r7, #7]
 8007d64:	4613      	mov	r3, r2
 8007d66:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007d70:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d11a      	bne.n	8007dae <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007d78:	88bb      	ldrh	r3, [r7, #4]
 8007d7a:	3303      	adds	r3, #3
 8007d7c:	089b      	lsrs	r3, r3, #2
 8007d7e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007d80:	2300      	movs	r3, #0
 8007d82:	61bb      	str	r3, [r7, #24]
 8007d84:	e00f      	b.n	8007da6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007d86:	79fb      	ldrb	r3, [r7, #7]
 8007d88:	031a      	lsls	r2, r3, #12
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d92:	461a      	mov	r2, r3
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	3301      	adds	r3, #1
 8007da4:	61bb      	str	r3, [r7, #24]
 8007da6:	69ba      	ldr	r2, [r7, #24]
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d3eb      	bcc.n	8007d86 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3724      	adds	r7, #36	; 0x24
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b089      	sub	sp, #36	; 0x24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007dd2:	88fb      	ldrh	r3, [r7, #6]
 8007dd4:	3303      	adds	r3, #3
 8007dd6:	089b      	lsrs	r3, r3, #2
 8007dd8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007dda:	2300      	movs	r3, #0
 8007ddc:	61bb      	str	r3, [r7, #24]
 8007dde:	e00b      	b.n	8007df8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	601a      	str	r2, [r3, #0]
    pDest++;
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	3304      	adds	r3, #4
 8007df0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	3301      	adds	r3, #1
 8007df6:	61bb      	str	r3, [r7, #24]
 8007df8:	69ba      	ldr	r2, [r7, #24]
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d3ef      	bcc.n	8007de0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007e00:	69fb      	ldr	r3, [r7, #28]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3724      	adds	r7, #36	; 0x24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr

08007e0e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b085      	sub	sp, #20
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
 8007e16:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	785b      	ldrb	r3, [r3, #1]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d12c      	bne.n	8007e84 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	015a      	lsls	r2, r3, #5
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	4413      	add	r3, r2
 8007e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	db12      	blt.n	8007e62 <USB_EPSetStall+0x54>
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00f      	beq.n	8007e62 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	015a      	lsls	r2, r3, #5
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	4413      	add	r3, r2
 8007e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	0151      	lsls	r1, r2, #5
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	440a      	add	r2, r1
 8007e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e60:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	015a      	lsls	r2, r3, #5
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	4413      	add	r3, r2
 8007e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	0151      	lsls	r1, r2, #5
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	440a      	add	r2, r1
 8007e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e80:	6013      	str	r3, [r2, #0]
 8007e82:	e02b      	b.n	8007edc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	015a      	lsls	r2, r3, #5
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	db12      	blt.n	8007ebc <USB_EPSetStall+0xae>
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00f      	beq.n	8007ebc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	0151      	lsls	r1, r2, #5
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	440a      	add	r2, r1
 8007eb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eb6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007eba:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	015a      	lsls	r2, r3, #5
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	0151      	lsls	r1, r2, #5
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	440a      	add	r2, r1
 8007ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ed6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007eda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b085      	sub	sp, #20
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	785b      	ldrb	r3, [r3, #1]
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d128      	bne.n	8007f58 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	015a      	lsls	r2, r3, #5
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68ba      	ldr	r2, [r7, #8]
 8007f16:	0151      	lsls	r1, r2, #5
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	440a      	add	r2, r1
 8007f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f24:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	78db      	ldrb	r3, [r3, #3]
 8007f2a:	2b03      	cmp	r3, #3
 8007f2c:	d003      	beq.n	8007f36 <USB_EPClearStall+0x4c>
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	78db      	ldrb	r3, [r3, #3]
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d138      	bne.n	8007fa8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	015a      	lsls	r2, r3, #5
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	0151      	lsls	r1, r2, #5
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	440a      	add	r2, r1
 8007f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f54:	6013      	str	r3, [r2, #0]
 8007f56:	e027      	b.n	8007fa8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	015a      	lsls	r2, r3, #5
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	4413      	add	r3, r2
 8007f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68ba      	ldr	r2, [r7, #8]
 8007f68:	0151      	lsls	r1, r2, #5
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	440a      	add	r2, r1
 8007f6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f76:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	78db      	ldrb	r3, [r3, #3]
 8007f7c:	2b03      	cmp	r3, #3
 8007f7e:	d003      	beq.n	8007f88 <USB_EPClearStall+0x9e>
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	78db      	ldrb	r3, [r3, #3]
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d10f      	bne.n	8007fa8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	0151      	lsls	r1, r2, #5
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	440a      	add	r2, r1
 8007f9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fa6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3714      	adds	r7, #20
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr

08007fb6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b085      	sub	sp, #20
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fd4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007fd8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	78fb      	ldrb	r3, [r7, #3]
 8007fe4:	011b      	lsls	r3, r3, #4
 8007fe6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007fea:	68f9      	ldr	r1, [r7, #12]
 8007fec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008002:	b480      	push	{r7}
 8008004:	b085      	sub	sp, #20
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800801c:	f023 0303 	bic.w	r3, r3, #3
 8008020:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008030:	f023 0302 	bic.w	r3, r3, #2
 8008034:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3714      	adds	r7, #20
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800805e:	f023 0303 	bic.w	r3, r3, #3
 8008062:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008072:	f043 0302 	orr.w	r3, r3, #2
 8008076:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3714      	adds	r7, #20
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008086:	b480      	push	{r7}
 8008088:	b085      	sub	sp, #20
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	4013      	ands	r3, r2
 800809c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800809e:	68fb      	ldr	r3, [r7, #12]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080c8:	69db      	ldr	r3, [r3, #28]
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	4013      	ands	r3, r2
 80080ce:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	0c1b      	lsrs	r3, r3, #16
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080fc:	69db      	ldr	r3, [r3, #28]
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	4013      	ands	r3, r2
 8008102:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	b29b      	uxth	r3, r3
}
 8008108:	4618      	mov	r0, r3
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008124:	78fb      	ldrb	r3, [r7, #3]
 8008126:	015a      	lsls	r2, r3, #5
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	4413      	add	r3, r2
 800812c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	4013      	ands	r3, r2
 8008140:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008142:	68bb      	ldr	r3, [r7, #8]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3714      	adds	r7, #20
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008150:	b480      	push	{r7}
 8008152:	b087      	sub	sp, #28
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008172:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008174:	78fb      	ldrb	r3, [r7, #3]
 8008176:	f003 030f 	and.w	r3, r3, #15
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	fa22 f303 	lsr.w	r3, r2, r3
 8008180:	01db      	lsls	r3, r3, #7
 8008182:	b2db      	uxtb	r3, r3
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	4313      	orrs	r3, r2
 8008188:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800818a:	78fb      	ldrb	r3, [r7, #3]
 800818c:	015a      	lsls	r2, r3, #5
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	4413      	add	r3, r2
 8008192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	4013      	ands	r3, r2
 800819c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800819e:	68bb      	ldr	r3, [r7, #8]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	371c      	adds	r7, #28
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	695b      	ldr	r3, [r3, #20]
 80081b8:	f003 0301 	and.w	r3, r3, #1
}
 80081bc:	4618      	mov	r0, r3
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80081e6:	f023 0307 	bic.w	r3, r3, #7
 80081ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3714      	adds	r7, #20
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
	...

08008210 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008210:	b480      	push	{r7}
 8008212:	b087      	sub	sp, #28
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	460b      	mov	r3, r1
 800821a:	607a      	str	r2, [r7, #4]
 800821c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	333c      	adds	r3, #60	; 0x3c
 8008226:	3304      	adds	r3, #4
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	4a26      	ldr	r2, [pc, #152]	; (80082c8 <USB_EP0_OutStart+0xb8>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d90a      	bls.n	800824a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008240:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008244:	d101      	bne.n	800824a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008246:	2300      	movs	r3, #0
 8008248:	e037      	b.n	80082ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008250:	461a      	mov	r2, r3
 8008252:	2300      	movs	r3, #0
 8008254:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008264:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008268:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008278:	f043 0318 	orr.w	r3, r3, #24
 800827c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	697a      	ldr	r2, [r7, #20]
 8008288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800828c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008290:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008292:	7afb      	ldrb	r3, [r7, #11]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d10f      	bne.n	80082b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800829e:	461a      	mov	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082b2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80082b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	371c      	adds	r7, #28
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	4f54300a 	.word	0x4f54300a

080082cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80082d4:	2300      	movs	r3, #0
 80082d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	3301      	adds	r3, #1
 80082dc:	60fb      	str	r3, [r7, #12]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	4a13      	ldr	r2, [pc, #76]	; (8008330 <USB_CoreReset+0x64>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d901      	bls.n	80082ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e01b      	b.n	8008322 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	daf2      	bge.n	80082d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	f043 0201 	orr.w	r2, r3, #1
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	3301      	adds	r3, #1
 8008306:	60fb      	str	r3, [r7, #12]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	4a09      	ldr	r2, [pc, #36]	; (8008330 <USB_CoreReset+0x64>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d901      	bls.n	8008314 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008310:	2303      	movs	r3, #3
 8008312:	e006      	b.n	8008322 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	f003 0301 	and.w	r3, r3, #1
 800831c:	2b01      	cmp	r3, #1
 800831e:	d0f0      	beq.n	8008302 <USB_CoreReset+0x36>

  return HAL_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3714      	adds	r7, #20
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	00030d40 	.word	0x00030d40

08008334 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	460b      	mov	r3, r1
 800833e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008340:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008344:	f002 f968 	bl	800a618 <USBD_static_malloc>
 8008348:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d105      	bne.n	800835c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008358:	2302      	movs	r3, #2
 800835a:	e066      	b.n	800842a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	7c1b      	ldrb	r3, [r3, #16]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d119      	bne.n	80083a0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800836c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008370:	2202      	movs	r2, #2
 8008372:	2181      	movs	r1, #129	; 0x81
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f002 f82c 	bl	800a3d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008380:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008384:	2202      	movs	r2, #2
 8008386:	2101      	movs	r1, #1
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f002 f822 	bl	800a3d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2201      	movs	r2, #1
 8008392:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2210      	movs	r2, #16
 800839a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800839e:	e016      	b.n	80083ce <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80083a0:	2340      	movs	r3, #64	; 0x40
 80083a2:	2202      	movs	r2, #2
 80083a4:	2181      	movs	r1, #129	; 0x81
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f002 f813 	bl	800a3d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80083b2:	2340      	movs	r3, #64	; 0x40
 80083b4:	2202      	movs	r2, #2
 80083b6:	2101      	movs	r1, #1
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f002 f80a 	bl	800a3d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2210      	movs	r2, #16
 80083ca:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80083ce:	2308      	movs	r3, #8
 80083d0:	2203      	movs	r2, #3
 80083d2:	2182      	movs	r1, #130	; 0x82
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f001 fffc 	bl	800a3d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2201      	movs	r2, #1
 80083de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	7c1b      	ldrb	r3, [r3, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d109      	bne.n	8008418 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800840a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800840e:	2101      	movs	r1, #1
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f002 f8cd 	bl	800a5b0 <USBD_LL_PrepareReceive>
 8008416:	e007      	b.n	8008428 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800841e:	2340      	movs	r3, #64	; 0x40
 8008420:	2101      	movs	r1, #1
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f002 f8c4 	bl	800a5b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b082      	sub	sp, #8
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
 800843a:	460b      	mov	r3, r1
 800843c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800843e:	2181      	movs	r1, #129	; 0x81
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f001 ffec 	bl	800a41e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800844c:	2101      	movs	r1, #1
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f001 ffe5 	bl	800a41e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800845c:	2182      	movs	r1, #130	; 0x82
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f001 ffdd 	bl	800a41e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00e      	beq.n	800849c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800848e:	4618      	mov	r0, r3
 8008490:	f002 f8d0 	bl	800a634 <USBD_static_free>
    pdev->pClassData = NULL;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
	...

080084a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b086      	sub	sp, #24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80084ba:	2300      	movs	r3, #0
 80084bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80084be:	2300      	movs	r3, #0
 80084c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e0af      	b.n	8008630 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d03f      	beq.n	800855c <USBD_CDC_Setup+0xb4>
 80084dc:	2b20      	cmp	r3, #32
 80084de:	f040 809f 	bne.w	8008620 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	88db      	ldrh	r3, [r3, #6]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d02e      	beq.n	8008548 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	b25b      	sxtb	r3, r3
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	da16      	bge.n	8008522 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008500:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	88d2      	ldrh	r2, [r2, #6]
 8008506:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	88db      	ldrh	r3, [r3, #6]
 800850c:	2b07      	cmp	r3, #7
 800850e:	bf28      	it	cs
 8008510:	2307      	movcs	r3, #7
 8008512:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	89fa      	ldrh	r2, [r7, #14]
 8008518:	4619      	mov	r1, r3
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f001 fb19 	bl	8009b52 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008520:	e085      	b.n	800862e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	785a      	ldrb	r2, [r3, #1]
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	88db      	ldrh	r3, [r3, #6]
 8008530:	b2da      	uxtb	r2, r3
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008538:	6939      	ldr	r1, [r7, #16]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	88db      	ldrh	r3, [r3, #6]
 800853e:	461a      	mov	r2, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f001 fb32 	bl	8009baa <USBD_CtlPrepareRx>
      break;
 8008546:	e072      	b.n	800862e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	683a      	ldr	r2, [r7, #0]
 8008552:	7850      	ldrb	r0, [r2, #1]
 8008554:	2200      	movs	r2, #0
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	4798      	blx	r3
      break;
 800855a:	e068      	b.n	800862e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	785b      	ldrb	r3, [r3, #1]
 8008560:	2b0b      	cmp	r3, #11
 8008562:	d852      	bhi.n	800860a <USBD_CDC_Setup+0x162>
 8008564:	a201      	add	r2, pc, #4	; (adr r2, 800856c <USBD_CDC_Setup+0xc4>)
 8008566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856a:	bf00      	nop
 800856c:	0800859d 	.word	0x0800859d
 8008570:	08008619 	.word	0x08008619
 8008574:	0800860b 	.word	0x0800860b
 8008578:	0800860b 	.word	0x0800860b
 800857c:	0800860b 	.word	0x0800860b
 8008580:	0800860b 	.word	0x0800860b
 8008584:	0800860b 	.word	0x0800860b
 8008588:	0800860b 	.word	0x0800860b
 800858c:	0800860b 	.word	0x0800860b
 8008590:	0800860b 	.word	0x0800860b
 8008594:	080085c7 	.word	0x080085c7
 8008598:	080085f1 	.word	0x080085f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	2b03      	cmp	r3, #3
 80085a6:	d107      	bne.n	80085b8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80085a8:	f107 030a 	add.w	r3, r7, #10
 80085ac:	2202      	movs	r2, #2
 80085ae:	4619      	mov	r1, r3
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f001 face 	bl	8009b52 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80085b6:	e032      	b.n	800861e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f001 fa58 	bl	8009a70 <USBD_CtlError>
            ret = USBD_FAIL;
 80085c0:	2303      	movs	r3, #3
 80085c2:	75fb      	strb	r3, [r7, #23]
          break;
 80085c4:	e02b      	b.n	800861e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b03      	cmp	r3, #3
 80085d0:	d107      	bne.n	80085e2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80085d2:	f107 030d 	add.w	r3, r7, #13
 80085d6:	2201      	movs	r2, #1
 80085d8:	4619      	mov	r1, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f001 fab9 	bl	8009b52 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80085e0:	e01d      	b.n	800861e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f001 fa43 	bl	8009a70 <USBD_CtlError>
            ret = USBD_FAIL;
 80085ea:	2303      	movs	r3, #3
 80085ec:	75fb      	strb	r3, [r7, #23]
          break;
 80085ee:	e016      	b.n	800861e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	2b03      	cmp	r3, #3
 80085fa:	d00f      	beq.n	800861c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f001 fa36 	bl	8009a70 <USBD_CtlError>
            ret = USBD_FAIL;
 8008604:	2303      	movs	r3, #3
 8008606:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008608:	e008      	b.n	800861c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 fa2f 	bl	8009a70 <USBD_CtlError>
          ret = USBD_FAIL;
 8008612:	2303      	movs	r3, #3
 8008614:	75fb      	strb	r3, [r7, #23]
          break;
 8008616:	e002      	b.n	800861e <USBD_CDC_Setup+0x176>
          break;
 8008618:	bf00      	nop
 800861a:	e008      	b.n	800862e <USBD_CDC_Setup+0x186>
          break;
 800861c:	bf00      	nop
      }
      break;
 800861e:	e006      	b.n	800862e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008620:	6839      	ldr	r1, [r7, #0]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f001 fa24 	bl	8009a70 <USBD_CtlError>
      ret = USBD_FAIL;
 8008628:	2303      	movs	r3, #3
 800862a:	75fb      	strb	r3, [r7, #23]
      break;
 800862c:	bf00      	nop
  }

  return (uint8_t)ret;
 800862e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3718      	adds	r7, #24
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	460b      	mov	r3, r1
 8008642:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800864a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008652:	2b00      	cmp	r3, #0
 8008654:	d101      	bne.n	800865a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008656:	2303      	movs	r3, #3
 8008658:	e04f      	b.n	80086fa <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008660:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008662:	78fa      	ldrb	r2, [r7, #3]
 8008664:	6879      	ldr	r1, [r7, #4]
 8008666:	4613      	mov	r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	4413      	add	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	440b      	add	r3, r1
 8008670:	3318      	adds	r3, #24
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d029      	beq.n	80086cc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008678:	78fa      	ldrb	r2, [r7, #3]
 800867a:	6879      	ldr	r1, [r7, #4]
 800867c:	4613      	mov	r3, r2
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	4413      	add	r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	440b      	add	r3, r1
 8008686:	3318      	adds	r3, #24
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	78f9      	ldrb	r1, [r7, #3]
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	460b      	mov	r3, r1
 8008690:	00db      	lsls	r3, r3, #3
 8008692:	1a5b      	subs	r3, r3, r1
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	4403      	add	r3, r0
 8008698:	3344      	adds	r3, #68	; 0x44
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	fbb2 f1f3 	udiv	r1, r2, r3
 80086a0:	fb03 f301 	mul.w	r3, r3, r1
 80086a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d110      	bne.n	80086cc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80086aa:	78fa      	ldrb	r2, [r7, #3]
 80086ac:	6879      	ldr	r1, [r7, #4]
 80086ae:	4613      	mov	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4413      	add	r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	440b      	add	r3, r1
 80086b8:	3318      	adds	r3, #24
 80086ba:	2200      	movs	r2, #0
 80086bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80086be:	78f9      	ldrb	r1, [r7, #3]
 80086c0:	2300      	movs	r3, #0
 80086c2:	2200      	movs	r2, #0
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f001 ff52 	bl	800a56e <USBD_LL_Transmit>
 80086ca:	e015      	b.n	80086f8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00b      	beq.n	80086f8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80086f4:	78fa      	ldrb	r2, [r7, #3]
 80086f6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b084      	sub	sp, #16
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	460b      	mov	r3, r1
 800870c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008714:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800871c:	2b00      	cmp	r3, #0
 800871e:	d101      	bne.n	8008724 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008720:	2303      	movs	r3, #3
 8008722:	e015      	b.n	8008750 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008724:	78fb      	ldrb	r3, [r7, #3]
 8008726:	4619      	mov	r1, r3
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f001 ff62 	bl	800a5f2 <USBD_LL_GetRxDataSize>
 800872e:	4602      	mov	r2, r0
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800874a:	4611      	mov	r1, r2
 800874c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008766:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d101      	bne.n	8008772 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800876e:	2303      	movs	r3, #3
 8008770:	e01b      	b.n	80087aa <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d015      	beq.n	80087a8 <USBD_CDC_EP0_RxReady+0x50>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008782:	2bff      	cmp	r3, #255	; 0xff
 8008784:	d010      	beq.n	80087a8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008794:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800879c:	b292      	uxth	r2, r2
 800879e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	22ff      	movs	r2, #255	; 0xff
 80087a4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
	...

080087b4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2243      	movs	r2, #67	; 0x43
 80087c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80087c2:	4b03      	ldr	r3, [pc, #12]	; (80087d0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	20000098 	.word	0x20000098

080087d4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2243      	movs	r2, #67	; 0x43
 80087e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80087e2:	4b03      	ldr	r3, [pc, #12]	; (80087f0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	20000054 	.word	0x20000054

080087f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2243      	movs	r2, #67	; 0x43
 8008800:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008802:	4b03      	ldr	r3, [pc, #12]	; (8008810 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008804:	4618      	mov	r0, r3
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	200000dc 	.word	0x200000dc

08008814 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	220a      	movs	r2, #10
 8008820:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008822:	4b03      	ldr	r3, [pc, #12]	; (8008830 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008824:	4618      	mov	r0, r3
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr
 8008830:	20000010 	.word	0x20000010

08008834 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008844:	2303      	movs	r3, #3
 8008846:	e004      	b.n	8008852 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	370c      	adds	r7, #12
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800885e:	b480      	push	{r7}
 8008860:	b087      	sub	sp, #28
 8008862:	af00      	add	r7, sp, #0
 8008864:	60f8      	str	r0, [r7, #12]
 8008866:	60b9      	str	r1, [r7, #8]
 8008868:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008870:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d101      	bne.n	800887c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008878:	2303      	movs	r3, #3
 800887a:	e008      	b.n	800888e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	371c      	adds	r7, #28
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800889a:	b480      	push	{r7}
 800889c:	b085      	sub	sp, #20
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088aa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e004      	b.n	80088c0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	683a      	ldr	r2, [r7, #0]
 80088ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3714      	adds	r7, #20
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088da:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80088dc:	2301      	movs	r3, #1
 80088de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d101      	bne.n	80088ee <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80088ea:	2303      	movs	r3, #3
 80088ec:	e01a      	b.n	8008924 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d114      	bne.n	8008922 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008916:	2181      	movs	r1, #129	; 0x81
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f001 fe28 	bl	800a56e <USBD_LL_Transmit>

    ret = USBD_OK;
 800891e:	2300      	movs	r3, #0
 8008920:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008922:	7bfb      	ldrb	r3, [r7, #15]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800893a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008942:	2b00      	cmp	r3, #0
 8008944:	d101      	bne.n	800894a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008946:	2303      	movs	r3, #3
 8008948:	e016      	b.n	8008978 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	7c1b      	ldrb	r3, [r3, #16]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d109      	bne.n	8008966 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800895c:	2101      	movs	r1, #1
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f001 fe26 	bl	800a5b0 <USBD_LL_PrepareReceive>
 8008964:	e007      	b.n	8008976 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800896c:	2340      	movs	r3, #64	; 0x40
 800896e:	2101      	movs	r1, #1
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f001 fe1d 	bl	800a5b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	4613      	mov	r3, r2
 800898c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d101      	bne.n	8008998 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008994:	2303      	movs	r3, #3
 8008996:	e01f      	b.n	80089d8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d003      	beq.n	80089be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	79fa      	ldrb	r2, [r7, #7]
 80089ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f001 fc99 	bl	800a304 <USBD_LL_Init>
 80089d2:	4603      	mov	r3, r0
 80089d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80089d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3718      	adds	r7, #24
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80089ea:	2300      	movs	r3, #0
 80089ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d101      	bne.n	80089f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80089f4:	2303      	movs	r3, #3
 80089f6:	e016      	b.n	8008a26 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00b      	beq.n	8008a24 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a14:	f107 020e 	add.w	r2, r7, #14
 8008a18:	4610      	mov	r0, r2
 8008a1a:	4798      	blx	r3
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b082      	sub	sp, #8
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f001 fcb0 	bl	800a39c <USBD_LL_Start>
 8008a3c:	4603      	mov	r3, r0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008a46:	b480      	push	{r7}
 8008a48:	b083      	sub	sp, #12
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	460b      	mov	r3, r1
 8008a66:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d009      	beq.n	8008a8a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	78fa      	ldrb	r2, [r7, #3]
 8008a80:	4611      	mov	r1, r2
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	4798      	blx	r3
 8008a86:	4603      	mov	r3, r0
 8008a88:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d007      	beq.n	8008aba <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	78fa      	ldrb	r2, [r7, #3]
 8008ab4:	4611      	mov	r1, r2
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	4798      	blx	r3
  }

  return USBD_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f000 ff90 	bl	80099fc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008aea:	461a      	mov	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008af8:	f003 031f 	and.w	r3, r3, #31
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d01a      	beq.n	8008b36 <USBD_LL_SetupStage+0x72>
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d822      	bhi.n	8008b4a <USBD_LL_SetupStage+0x86>
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d002      	beq.n	8008b0e <USBD_LL_SetupStage+0x4a>
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d00a      	beq.n	8008b22 <USBD_LL_SetupStage+0x5e>
 8008b0c:	e01d      	b.n	8008b4a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fa62 	bl	8008fe0 <USBD_StdDevReq>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b20:	e020      	b.n	8008b64 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fac6 	bl	80090bc <USBD_StdItfReq>
 8008b30:	4603      	mov	r3, r0
 8008b32:	73fb      	strb	r3, [r7, #15]
      break;
 8008b34:	e016      	b.n	8008b64 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 fb05 	bl	800914e <USBD_StdEPReq>
 8008b44:	4603      	mov	r3, r0
 8008b46:	73fb      	strb	r3, [r7, #15]
      break;
 8008b48:	e00c      	b.n	8008b64 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	4619      	mov	r1, r3
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f001 fc7f 	bl	800a45c <USBD_LL_StallEP>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	73fb      	strb	r3, [r7, #15]
      break;
 8008b62:	bf00      	nop
  }

  return ret;
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b086      	sub	sp, #24
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	60f8      	str	r0, [r7, #12]
 8008b76:	460b      	mov	r3, r1
 8008b78:	607a      	str	r2, [r7, #4]
 8008b7a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008b7c:	7afb      	ldrb	r3, [r7, #11]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d138      	bne.n	8008bf4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008b88:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b90:	2b03      	cmp	r3, #3
 8008b92:	d14a      	bne.n	8008c2a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	689a      	ldr	r2, [r3, #8]
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d913      	bls.n	8008bc8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	689a      	ldr	r2, [r3, #8]
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	1ad2      	subs	r2, r2, r3
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	68da      	ldr	r2, [r3, #12]
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	bf28      	it	cs
 8008bba:	4613      	movcs	r3, r2
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	6879      	ldr	r1, [r7, #4]
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f001 f80f 	bl	8009be4 <USBD_CtlContinueRx>
 8008bc6:	e030      	b.n	8008c2a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	2b03      	cmp	r3, #3
 8008bd2:	d10b      	bne.n	8008bec <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d005      	beq.n	8008bec <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f001 f80a 	bl	8009c06 <USBD_CtlSendStatus>
 8008bf2:	e01a      	b.n	8008c2a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	2b03      	cmp	r3, #3
 8008bfe:	d114      	bne.n	8008c2a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00e      	beq.n	8008c2a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	7afa      	ldrb	r2, [r7, #11]
 8008c16:	4611      	mov	r1, r2
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	4798      	blx	r3
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008c20:	7dfb      	ldrb	r3, [r7, #23]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008c26:	7dfb      	ldrb	r3, [r7, #23]
 8008c28:	e000      	b.n	8008c2c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3718      	adds	r7, #24
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	607a      	str	r2, [r7, #4]
 8008c40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008c42:	7afb      	ldrb	r3, [r7, #11]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d16b      	bne.n	8008d20 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	3314      	adds	r3, #20
 8008c4c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	d156      	bne.n	8008d06 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	689a      	ldr	r2, [r3, #8]
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d914      	bls.n	8008c8e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	689a      	ldr	r2, [r3, #8]
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	1ad2      	subs	r2, r2, r3
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	461a      	mov	r2, r3
 8008c78:	6879      	ldr	r1, [r7, #4]
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f000 ff84 	bl	8009b88 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c80:	2300      	movs	r3, #0
 8008c82:	2200      	movs	r2, #0
 8008c84:	2100      	movs	r1, #0
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f001 fc92 	bl	800a5b0 <USBD_LL_PrepareReceive>
 8008c8c:	e03b      	b.n	8008d06 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	68da      	ldr	r2, [r3, #12]
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d11c      	bne.n	8008cd4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	685a      	ldr	r2, [r3, #4]
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d316      	bcc.n	8008cd4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	685a      	ldr	r2, [r3, #4]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d20f      	bcs.n	8008cd4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f000 ff65 	bl	8009b88 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	2200      	movs	r2, #0
 8008cca:	2100      	movs	r1, #0
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f001 fc6f 	bl	800a5b0 <USBD_LL_PrepareReceive>
 8008cd2:	e018      	b.n	8008d06 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	2b03      	cmp	r3, #3
 8008cde:	d10b      	bne.n	8008cf8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d005      	beq.n	8008cf8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cf8:	2180      	movs	r1, #128	; 0x80
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f001 fbae 	bl	800a45c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f000 ff93 	bl	8009c2c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d122      	bne.n	8008d56 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f7ff fe98 	bl	8008a46 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008d1e:	e01a      	b.n	8008d56 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	2b03      	cmp	r3, #3
 8008d2a:	d114      	bne.n	8008d56 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d32:	695b      	ldr	r3, [r3, #20]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00e      	beq.n	8008d56 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d3e:	695b      	ldr	r3, [r3, #20]
 8008d40:	7afa      	ldrb	r2, [r7, #11]
 8008d42:	4611      	mov	r1, r2
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	4798      	blx	r3
 8008d48:	4603      	mov	r3, r0
 8008d4a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008d4c:	7dfb      	ldrb	r3, [r7, #23]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d001      	beq.n	8008d56 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008d52:	7dfb      	ldrb	r3, [r7, #23]
 8008d54:	e000      	b.n	8008d58 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3718      	adds	r7, #24
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d101      	bne.n	8008d94 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008d90:	2303      	movs	r3, #3
 8008d92:	e02f      	b.n	8008df4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00f      	beq.n	8008dbe <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d009      	beq.n	8008dbe <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	6852      	ldr	r2, [r2, #4]
 8008db6:	b2d2      	uxtb	r2, r2
 8008db8:	4611      	mov	r1, r2
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dbe:	2340      	movs	r3, #64	; 0x40
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f001 fb04 	bl	800a3d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2240      	movs	r2, #64	; 0x40
 8008dd6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dda:	2340      	movs	r3, #64	; 0x40
 8008ddc:	2200      	movs	r2, #0
 8008dde:	2180      	movs	r1, #128	; 0x80
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f001 faf6 	bl	800a3d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2240      	movs	r2, #64	; 0x40
 8008df0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	460b      	mov	r3, r1
 8008e06:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	78fa      	ldrb	r2, [r7, #3]
 8008e0c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e2a:	b2da      	uxtb	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2204      	movs	r2, #4
 8008e36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	2b04      	cmp	r3, #4
 8008e5a:	d106      	bne.n	8008e6a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008e62:	b2da      	uxtb	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d101      	bne.n	8008e8e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e012      	b.n	8008eb4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b03      	cmp	r3, #3
 8008e98:	d10b      	bne.n	8008eb2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ea0:	69db      	ldr	r3, [r3, #28]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d005      	beq.n	8008eb2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eac:	69db      	ldr	r3, [r3, #28]
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d101      	bne.n	8008ed6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	e014      	b.n	8008f00 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	2b03      	cmp	r3, #3
 8008ee0:	d10d      	bne.n	8008efe <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ee8:	6a1b      	ldr	r3, [r3, #32]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d007      	beq.n	8008efe <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	78fa      	ldrb	r2, [r7, #3]
 8008ef8:	4611      	mov	r1, r2
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	460b      	mov	r3, r1
 8008f12:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d101      	bne.n	8008f22 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	e014      	b.n	8008f4c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	2b03      	cmp	r3, #3
 8008f2c:	d10d      	bne.n	8008f4a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d007      	beq.n	8008f4a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f42:	78fa      	ldrb	r2, [r7, #3]
 8008f44:	4611      	mov	r1, r2
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3708      	adds	r7, #8
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	370c      	adds	r7, #12
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b082      	sub	sp, #8
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2201      	movs	r2, #1
 8008f76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d009      	beq.n	8008f98 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	6852      	ldr	r2, [r2, #4]
 8008f90:	b2d2      	uxtb	r2, r2
 8008f92:	4611      	mov	r1, r2
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	4798      	blx	r3
  }

  return USBD_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008fa2:	b480      	push	{r7}
 8008fa4:	b087      	sub	sp, #28
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008fc0:	8a3b      	ldrh	r3, [r7, #16]
 8008fc2:	021b      	lsls	r3, r3, #8
 8008fc4:	b21a      	sxth	r2, r3
 8008fc6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	b21b      	sxth	r3, r3
 8008fce:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008fd0:	89fb      	ldrh	r3, [r7, #14]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	371c      	adds	r7, #28
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
	...

08008fe0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fea:	2300      	movs	r3, #0
 8008fec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ff6:	2b40      	cmp	r3, #64	; 0x40
 8008ff8:	d005      	beq.n	8009006 <USBD_StdDevReq+0x26>
 8008ffa:	2b40      	cmp	r3, #64	; 0x40
 8008ffc:	d853      	bhi.n	80090a6 <USBD_StdDevReq+0xc6>
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00b      	beq.n	800901a <USBD_StdDevReq+0x3a>
 8009002:	2b20      	cmp	r3, #32
 8009004:	d14f      	bne.n	80090a6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	6839      	ldr	r1, [r7, #0]
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	4798      	blx	r3
 8009014:	4603      	mov	r3, r0
 8009016:	73fb      	strb	r3, [r7, #15]
      break;
 8009018:	e04a      	b.n	80090b0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	785b      	ldrb	r3, [r3, #1]
 800901e:	2b09      	cmp	r3, #9
 8009020:	d83b      	bhi.n	800909a <USBD_StdDevReq+0xba>
 8009022:	a201      	add	r2, pc, #4	; (adr r2, 8009028 <USBD_StdDevReq+0x48>)
 8009024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009028:	0800907d 	.word	0x0800907d
 800902c:	08009091 	.word	0x08009091
 8009030:	0800909b 	.word	0x0800909b
 8009034:	08009087 	.word	0x08009087
 8009038:	0800909b 	.word	0x0800909b
 800903c:	0800905b 	.word	0x0800905b
 8009040:	08009051 	.word	0x08009051
 8009044:	0800909b 	.word	0x0800909b
 8009048:	08009073 	.word	0x08009073
 800904c:	08009065 	.word	0x08009065
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f9de 	bl	8009414 <USBD_GetDescriptor>
          break;
 8009058:	e024      	b.n	80090a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800905a:	6839      	ldr	r1, [r7, #0]
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fb43 	bl	80096e8 <USBD_SetAddress>
          break;
 8009062:	e01f      	b.n	80090a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fb82 	bl	8009770 <USBD_SetConfig>
 800906c:	4603      	mov	r3, r0
 800906e:	73fb      	strb	r3, [r7, #15]
          break;
 8009070:	e018      	b.n	80090a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009072:	6839      	ldr	r1, [r7, #0]
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 fc21 	bl	80098bc <USBD_GetConfig>
          break;
 800907a:	e013      	b.n	80090a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800907c:	6839      	ldr	r1, [r7, #0]
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 fc52 	bl	8009928 <USBD_GetStatus>
          break;
 8009084:	e00e      	b.n	80090a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 fc81 	bl	8009990 <USBD_SetFeature>
          break;
 800908e:	e009      	b.n	80090a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009090:	6839      	ldr	r1, [r7, #0]
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fc90 	bl	80099b8 <USBD_ClrFeature>
          break;
 8009098:	e004      	b.n	80090a4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800909a:	6839      	ldr	r1, [r7, #0]
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 fce7 	bl	8009a70 <USBD_CtlError>
          break;
 80090a2:	bf00      	nop
      }
      break;
 80090a4:	e004      	b.n	80090b0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80090a6:	6839      	ldr	r1, [r7, #0]
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 fce1 	bl	8009a70 <USBD_CtlError>
      break;
 80090ae:	bf00      	nop
  }

  return ret;
 80090b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop

080090bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090c6:	2300      	movs	r3, #0
 80090c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090d2:	2b40      	cmp	r3, #64	; 0x40
 80090d4:	d005      	beq.n	80090e2 <USBD_StdItfReq+0x26>
 80090d6:	2b40      	cmp	r3, #64	; 0x40
 80090d8:	d82f      	bhi.n	800913a <USBD_StdItfReq+0x7e>
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <USBD_StdItfReq+0x26>
 80090de:	2b20      	cmp	r3, #32
 80090e0:	d12b      	bne.n	800913a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	3b01      	subs	r3, #1
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d81d      	bhi.n	800912c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	889b      	ldrh	r3, [r3, #4]
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d813      	bhi.n	8009122 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	6839      	ldr	r1, [r7, #0]
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	4798      	blx	r3
 8009108:	4603      	mov	r3, r0
 800910a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	88db      	ldrh	r3, [r3, #6]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d110      	bne.n	8009136 <USBD_StdItfReq+0x7a>
 8009114:	7bfb      	ldrb	r3, [r7, #15]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10d      	bne.n	8009136 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 fd73 	bl	8009c06 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009120:	e009      	b.n	8009136 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009122:	6839      	ldr	r1, [r7, #0]
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 fca3 	bl	8009a70 <USBD_CtlError>
          break;
 800912a:	e004      	b.n	8009136 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800912c:	6839      	ldr	r1, [r7, #0]
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fc9e 	bl	8009a70 <USBD_CtlError>
          break;
 8009134:	e000      	b.n	8009138 <USBD_StdItfReq+0x7c>
          break;
 8009136:	bf00      	nop
      }
      break;
 8009138:	e004      	b.n	8009144 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800913a:	6839      	ldr	r1, [r7, #0]
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 fc97 	bl	8009a70 <USBD_CtlError>
      break;
 8009142:	bf00      	nop
  }

  return ret;
 8009144:	7bfb      	ldrb	r3, [r7, #15]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b084      	sub	sp, #16
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
 8009156:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009158:	2300      	movs	r3, #0
 800915a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	889b      	ldrh	r3, [r3, #4]
 8009160:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800916a:	2b40      	cmp	r3, #64	; 0x40
 800916c:	d007      	beq.n	800917e <USBD_StdEPReq+0x30>
 800916e:	2b40      	cmp	r3, #64	; 0x40
 8009170:	f200 8145 	bhi.w	80093fe <USBD_StdEPReq+0x2b0>
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00c      	beq.n	8009192 <USBD_StdEPReq+0x44>
 8009178:	2b20      	cmp	r3, #32
 800917a:	f040 8140 	bne.w	80093fe <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	6839      	ldr	r1, [r7, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	4798      	blx	r3
 800918c:	4603      	mov	r3, r0
 800918e:	73fb      	strb	r3, [r7, #15]
      break;
 8009190:	e13a      	b.n	8009408 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	785b      	ldrb	r3, [r3, #1]
 8009196:	2b03      	cmp	r3, #3
 8009198:	d007      	beq.n	80091aa <USBD_StdEPReq+0x5c>
 800919a:	2b03      	cmp	r3, #3
 800919c:	f300 8129 	bgt.w	80093f2 <USBD_StdEPReq+0x2a4>
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d07f      	beq.n	80092a4 <USBD_StdEPReq+0x156>
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d03c      	beq.n	8009222 <USBD_StdEPReq+0xd4>
 80091a8:	e123      	b.n	80093f2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d002      	beq.n	80091bc <USBD_StdEPReq+0x6e>
 80091b6:	2b03      	cmp	r3, #3
 80091b8:	d016      	beq.n	80091e8 <USBD_StdEPReq+0x9a>
 80091ba:	e02c      	b.n	8009216 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091bc:	7bbb      	ldrb	r3, [r7, #14]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00d      	beq.n	80091de <USBD_StdEPReq+0x90>
 80091c2:	7bbb      	ldrb	r3, [r7, #14]
 80091c4:	2b80      	cmp	r3, #128	; 0x80
 80091c6:	d00a      	beq.n	80091de <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80091c8:	7bbb      	ldrb	r3, [r7, #14]
 80091ca:	4619      	mov	r1, r3
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f001 f945 	bl	800a45c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80091d2:	2180      	movs	r1, #128	; 0x80
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f001 f941 	bl	800a45c <USBD_LL_StallEP>
 80091da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80091dc:	e020      	b.n	8009220 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80091de:	6839      	ldr	r1, [r7, #0]
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fc45 	bl	8009a70 <USBD_CtlError>
              break;
 80091e6:	e01b      	b.n	8009220 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	885b      	ldrh	r3, [r3, #2]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d10e      	bne.n	800920e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80091f0:	7bbb      	ldrb	r3, [r7, #14]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00b      	beq.n	800920e <USBD_StdEPReq+0xc0>
 80091f6:	7bbb      	ldrb	r3, [r7, #14]
 80091f8:	2b80      	cmp	r3, #128	; 0x80
 80091fa:	d008      	beq.n	800920e <USBD_StdEPReq+0xc0>
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	88db      	ldrh	r3, [r3, #6]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d104      	bne.n	800920e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009204:	7bbb      	ldrb	r3, [r7, #14]
 8009206:	4619      	mov	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f001 f927 	bl	800a45c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fcf9 	bl	8009c06 <USBD_CtlSendStatus>

              break;
 8009214:	e004      	b.n	8009220 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 fc29 	bl	8009a70 <USBD_CtlError>
              break;
 800921e:	bf00      	nop
          }
          break;
 8009220:	e0ec      	b.n	80093fc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009228:	b2db      	uxtb	r3, r3
 800922a:	2b02      	cmp	r3, #2
 800922c:	d002      	beq.n	8009234 <USBD_StdEPReq+0xe6>
 800922e:	2b03      	cmp	r3, #3
 8009230:	d016      	beq.n	8009260 <USBD_StdEPReq+0x112>
 8009232:	e030      	b.n	8009296 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009234:	7bbb      	ldrb	r3, [r7, #14]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00d      	beq.n	8009256 <USBD_StdEPReq+0x108>
 800923a:	7bbb      	ldrb	r3, [r7, #14]
 800923c:	2b80      	cmp	r3, #128	; 0x80
 800923e:	d00a      	beq.n	8009256 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009240:	7bbb      	ldrb	r3, [r7, #14]
 8009242:	4619      	mov	r1, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f001 f909 	bl	800a45c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800924a:	2180      	movs	r1, #128	; 0x80
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f001 f905 	bl	800a45c <USBD_LL_StallEP>
 8009252:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009254:	e025      	b.n	80092a2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009256:	6839      	ldr	r1, [r7, #0]
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 fc09 	bl	8009a70 <USBD_CtlError>
              break;
 800925e:	e020      	b.n	80092a2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	885b      	ldrh	r3, [r3, #2]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d11b      	bne.n	80092a0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009268:	7bbb      	ldrb	r3, [r7, #14]
 800926a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800926e:	2b00      	cmp	r3, #0
 8009270:	d004      	beq.n	800927c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009272:	7bbb      	ldrb	r3, [r7, #14]
 8009274:	4619      	mov	r1, r3
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f001 f90f 	bl	800a49a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fcc2 	bl	8009c06 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	4798      	blx	r3
 8009290:	4603      	mov	r3, r0
 8009292:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009294:	e004      	b.n	80092a0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009296:	6839      	ldr	r1, [r7, #0]
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 fbe9 	bl	8009a70 <USBD_CtlError>
              break;
 800929e:	e000      	b.n	80092a2 <USBD_StdEPReq+0x154>
              break;
 80092a0:	bf00      	nop
          }
          break;
 80092a2:	e0ab      	b.n	80093fc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d002      	beq.n	80092b6 <USBD_StdEPReq+0x168>
 80092b0:	2b03      	cmp	r3, #3
 80092b2:	d032      	beq.n	800931a <USBD_StdEPReq+0x1cc>
 80092b4:	e097      	b.n	80093e6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092b6:	7bbb      	ldrb	r3, [r7, #14]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d007      	beq.n	80092cc <USBD_StdEPReq+0x17e>
 80092bc:	7bbb      	ldrb	r3, [r7, #14]
 80092be:	2b80      	cmp	r3, #128	; 0x80
 80092c0:	d004      	beq.n	80092cc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80092c2:	6839      	ldr	r1, [r7, #0]
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 fbd3 	bl	8009a70 <USBD_CtlError>
                break;
 80092ca:	e091      	b.n	80093f0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	da0b      	bge.n	80092ec <USBD_StdEPReq+0x19e>
 80092d4:	7bbb      	ldrb	r3, [r7, #14]
 80092d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092da:	4613      	mov	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	4413      	add	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	3310      	adds	r3, #16
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	4413      	add	r3, r2
 80092e8:	3304      	adds	r3, #4
 80092ea:	e00b      	b.n	8009304 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80092ec:	7bbb      	ldrb	r3, [r7, #14]
 80092ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092f2:	4613      	mov	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4413      	add	r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	4413      	add	r3, r2
 8009302:	3304      	adds	r3, #4
 8009304:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	2200      	movs	r2, #0
 800930a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	2202      	movs	r2, #2
 8009310:	4619      	mov	r1, r3
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fc1d 	bl	8009b52 <USBD_CtlSendData>
              break;
 8009318:	e06a      	b.n	80093f0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800931a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800931e:	2b00      	cmp	r3, #0
 8009320:	da11      	bge.n	8009346 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009322:	7bbb      	ldrb	r3, [r7, #14]
 8009324:	f003 020f 	and.w	r2, r3, #15
 8009328:	6879      	ldr	r1, [r7, #4]
 800932a:	4613      	mov	r3, r2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4413      	add	r3, r2
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	440b      	add	r3, r1
 8009334:	3324      	adds	r3, #36	; 0x24
 8009336:	881b      	ldrh	r3, [r3, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d117      	bne.n	800936c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 fb96 	bl	8009a70 <USBD_CtlError>
                  break;
 8009344:	e054      	b.n	80093f0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009346:	7bbb      	ldrb	r3, [r7, #14]
 8009348:	f003 020f 	and.w	r2, r3, #15
 800934c:	6879      	ldr	r1, [r7, #4]
 800934e:	4613      	mov	r3, r2
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	4413      	add	r3, r2
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	440b      	add	r3, r1
 8009358:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800935c:	881b      	ldrh	r3, [r3, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d104      	bne.n	800936c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009362:	6839      	ldr	r1, [r7, #0]
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 fb83 	bl	8009a70 <USBD_CtlError>
                  break;
 800936a:	e041      	b.n	80093f0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800936c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009370:	2b00      	cmp	r3, #0
 8009372:	da0b      	bge.n	800938c <USBD_StdEPReq+0x23e>
 8009374:	7bbb      	ldrb	r3, [r7, #14]
 8009376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800937a:	4613      	mov	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	4413      	add	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	3310      	adds	r3, #16
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	4413      	add	r3, r2
 8009388:	3304      	adds	r3, #4
 800938a:	e00b      	b.n	80093a4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800938c:	7bbb      	ldrb	r3, [r7, #14]
 800938e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009392:	4613      	mov	r3, r2
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	4413      	add	r3, r2
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	4413      	add	r3, r2
 80093a2:	3304      	adds	r3, #4
 80093a4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80093a6:	7bbb      	ldrb	r3, [r7, #14]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d002      	beq.n	80093b2 <USBD_StdEPReq+0x264>
 80093ac:	7bbb      	ldrb	r3, [r7, #14]
 80093ae:	2b80      	cmp	r3, #128	; 0x80
 80093b0:	d103      	bne.n	80093ba <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	2200      	movs	r2, #0
 80093b6:	601a      	str	r2, [r3, #0]
 80093b8:	e00e      	b.n	80093d8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80093ba:	7bbb      	ldrb	r3, [r7, #14]
 80093bc:	4619      	mov	r1, r3
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f001 f88a 	bl	800a4d8 <USBD_LL_IsStallEP>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d003      	beq.n	80093d2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	2201      	movs	r2, #1
 80093ce:	601a      	str	r2, [r3, #0]
 80093d0:	e002      	b.n	80093d8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	2200      	movs	r2, #0
 80093d6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	2202      	movs	r2, #2
 80093dc:	4619      	mov	r1, r3
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fbb7 	bl	8009b52 <USBD_CtlSendData>
              break;
 80093e4:	e004      	b.n	80093f0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80093e6:	6839      	ldr	r1, [r7, #0]
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fb41 	bl	8009a70 <USBD_CtlError>
              break;
 80093ee:	bf00      	nop
          }
          break;
 80093f0:	e004      	b.n	80093fc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80093f2:	6839      	ldr	r1, [r7, #0]
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fb3b 	bl	8009a70 <USBD_CtlError>
          break;
 80093fa:	bf00      	nop
      }
      break;
 80093fc:	e004      	b.n	8009408 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80093fe:	6839      	ldr	r1, [r7, #0]
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fb35 	bl	8009a70 <USBD_CtlError>
      break;
 8009406:	bf00      	nop
  }

  return ret;
 8009408:	7bfb      	ldrb	r3, [r7, #15]
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
	...

08009414 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800941e:	2300      	movs	r3, #0
 8009420:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009422:	2300      	movs	r3, #0
 8009424:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009426:	2300      	movs	r3, #0
 8009428:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	885b      	ldrh	r3, [r3, #2]
 800942e:	0a1b      	lsrs	r3, r3, #8
 8009430:	b29b      	uxth	r3, r3
 8009432:	3b01      	subs	r3, #1
 8009434:	2b06      	cmp	r3, #6
 8009436:	f200 8128 	bhi.w	800968a <USBD_GetDescriptor+0x276>
 800943a:	a201      	add	r2, pc, #4	; (adr r2, 8009440 <USBD_GetDescriptor+0x2c>)
 800943c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009440:	0800945d 	.word	0x0800945d
 8009444:	08009475 	.word	0x08009475
 8009448:	080094b5 	.word	0x080094b5
 800944c:	0800968b 	.word	0x0800968b
 8009450:	0800968b 	.word	0x0800968b
 8009454:	0800962b 	.word	0x0800962b
 8009458:	08009657 	.word	0x08009657
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	7c12      	ldrb	r2, [r2, #16]
 8009468:	f107 0108 	add.w	r1, r7, #8
 800946c:	4610      	mov	r0, r2
 800946e:	4798      	blx	r3
 8009470:	60f8      	str	r0, [r7, #12]
      break;
 8009472:	e112      	b.n	800969a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	7c1b      	ldrb	r3, [r3, #16]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d10d      	bne.n	8009498 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009484:	f107 0208 	add.w	r2, r7, #8
 8009488:	4610      	mov	r0, r2
 800948a:	4798      	blx	r3
 800948c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	3301      	adds	r3, #1
 8009492:	2202      	movs	r2, #2
 8009494:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009496:	e100      	b.n	800969a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800949e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a0:	f107 0208 	add.w	r2, r7, #8
 80094a4:	4610      	mov	r0, r2
 80094a6:	4798      	blx	r3
 80094a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	3301      	adds	r3, #1
 80094ae:	2202      	movs	r2, #2
 80094b0:	701a      	strb	r2, [r3, #0]
      break;
 80094b2:	e0f2      	b.n	800969a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	885b      	ldrh	r3, [r3, #2]
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	2b05      	cmp	r3, #5
 80094bc:	f200 80ac 	bhi.w	8009618 <USBD_GetDescriptor+0x204>
 80094c0:	a201      	add	r2, pc, #4	; (adr r2, 80094c8 <USBD_GetDescriptor+0xb4>)
 80094c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c6:	bf00      	nop
 80094c8:	080094e1 	.word	0x080094e1
 80094cc:	08009515 	.word	0x08009515
 80094d0:	08009549 	.word	0x08009549
 80094d4:	0800957d 	.word	0x0800957d
 80094d8:	080095b1 	.word	0x080095b1
 80094dc:	080095e5 	.word	0x080095e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00b      	beq.n	8009504 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	7c12      	ldrb	r2, [r2, #16]
 80094f8:	f107 0108 	add.w	r1, r7, #8
 80094fc:	4610      	mov	r0, r2
 80094fe:	4798      	blx	r3
 8009500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009502:	e091      	b.n	8009628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009504:	6839      	ldr	r1, [r7, #0]
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fab2 	bl	8009a70 <USBD_CtlError>
            err++;
 800950c:	7afb      	ldrb	r3, [r7, #11]
 800950e:	3301      	adds	r3, #1
 8009510:	72fb      	strb	r3, [r7, #11]
          break;
 8009512:	e089      	b.n	8009628 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d00b      	beq.n	8009538 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	7c12      	ldrb	r2, [r2, #16]
 800952c:	f107 0108 	add.w	r1, r7, #8
 8009530:	4610      	mov	r0, r2
 8009532:	4798      	blx	r3
 8009534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009536:	e077      	b.n	8009628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fa98 	bl	8009a70 <USBD_CtlError>
            err++;
 8009540:	7afb      	ldrb	r3, [r7, #11]
 8009542:	3301      	adds	r3, #1
 8009544:	72fb      	strb	r3, [r7, #11]
          break;
 8009546:	e06f      	b.n	8009628 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00b      	beq.n	800956c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	7c12      	ldrb	r2, [r2, #16]
 8009560:	f107 0108 	add.w	r1, r7, #8
 8009564:	4610      	mov	r0, r2
 8009566:	4798      	blx	r3
 8009568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800956a:	e05d      	b.n	8009628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800956c:	6839      	ldr	r1, [r7, #0]
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 fa7e 	bl	8009a70 <USBD_CtlError>
            err++;
 8009574:	7afb      	ldrb	r3, [r7, #11]
 8009576:	3301      	adds	r3, #1
 8009578:	72fb      	strb	r3, [r7, #11]
          break;
 800957a:	e055      	b.n	8009628 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00b      	beq.n	80095a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800958e:	691b      	ldr	r3, [r3, #16]
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	7c12      	ldrb	r2, [r2, #16]
 8009594:	f107 0108 	add.w	r1, r7, #8
 8009598:	4610      	mov	r0, r2
 800959a:	4798      	blx	r3
 800959c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800959e:	e043      	b.n	8009628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095a0:	6839      	ldr	r1, [r7, #0]
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fa64 	bl	8009a70 <USBD_CtlError>
            err++;
 80095a8:	7afb      	ldrb	r3, [r7, #11]
 80095aa:	3301      	adds	r3, #1
 80095ac:	72fb      	strb	r3, [r7, #11]
          break;
 80095ae:	e03b      	b.n	8009628 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095b6:	695b      	ldr	r3, [r3, #20]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00b      	beq.n	80095d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095c2:	695b      	ldr	r3, [r3, #20]
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	7c12      	ldrb	r2, [r2, #16]
 80095c8:	f107 0108 	add.w	r1, r7, #8
 80095cc:	4610      	mov	r0, r2
 80095ce:	4798      	blx	r3
 80095d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095d2:	e029      	b.n	8009628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095d4:	6839      	ldr	r1, [r7, #0]
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 fa4a 	bl	8009a70 <USBD_CtlError>
            err++;
 80095dc:	7afb      	ldrb	r3, [r7, #11]
 80095de:	3301      	adds	r3, #1
 80095e0:	72fb      	strb	r3, [r7, #11]
          break;
 80095e2:	e021      	b.n	8009628 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00b      	beq.n	8009608 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	7c12      	ldrb	r2, [r2, #16]
 80095fc:	f107 0108 	add.w	r1, r7, #8
 8009600:	4610      	mov	r0, r2
 8009602:	4798      	blx	r3
 8009604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009606:	e00f      	b.n	8009628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009608:	6839      	ldr	r1, [r7, #0]
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fa30 	bl	8009a70 <USBD_CtlError>
            err++;
 8009610:	7afb      	ldrb	r3, [r7, #11]
 8009612:	3301      	adds	r3, #1
 8009614:	72fb      	strb	r3, [r7, #11]
          break;
 8009616:	e007      	b.n	8009628 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009618:	6839      	ldr	r1, [r7, #0]
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 fa28 	bl	8009a70 <USBD_CtlError>
          err++;
 8009620:	7afb      	ldrb	r3, [r7, #11]
 8009622:	3301      	adds	r3, #1
 8009624:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009626:	bf00      	nop
      }
      break;
 8009628:	e037      	b.n	800969a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	7c1b      	ldrb	r3, [r3, #16]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d109      	bne.n	8009646 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800963a:	f107 0208 	add.w	r2, r7, #8
 800963e:	4610      	mov	r0, r2
 8009640:	4798      	blx	r3
 8009642:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009644:	e029      	b.n	800969a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009646:	6839      	ldr	r1, [r7, #0]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fa11 	bl	8009a70 <USBD_CtlError>
        err++;
 800964e:	7afb      	ldrb	r3, [r7, #11]
 8009650:	3301      	adds	r3, #1
 8009652:	72fb      	strb	r3, [r7, #11]
      break;
 8009654:	e021      	b.n	800969a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	7c1b      	ldrb	r3, [r3, #16]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10d      	bne.n	800967a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009666:	f107 0208 	add.w	r2, r7, #8
 800966a:	4610      	mov	r0, r2
 800966c:	4798      	blx	r3
 800966e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	3301      	adds	r3, #1
 8009674:	2207      	movs	r2, #7
 8009676:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009678:	e00f      	b.n	800969a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800967a:	6839      	ldr	r1, [r7, #0]
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 f9f7 	bl	8009a70 <USBD_CtlError>
        err++;
 8009682:	7afb      	ldrb	r3, [r7, #11]
 8009684:	3301      	adds	r3, #1
 8009686:	72fb      	strb	r3, [r7, #11]
      break;
 8009688:	e007      	b.n	800969a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800968a:	6839      	ldr	r1, [r7, #0]
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 f9ef 	bl	8009a70 <USBD_CtlError>
      err++;
 8009692:	7afb      	ldrb	r3, [r7, #11]
 8009694:	3301      	adds	r3, #1
 8009696:	72fb      	strb	r3, [r7, #11]
      break;
 8009698:	bf00      	nop
  }

  if (err != 0U)
 800969a:	7afb      	ldrb	r3, [r7, #11]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d11e      	bne.n	80096de <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	88db      	ldrh	r3, [r3, #6]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d016      	beq.n	80096d6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80096a8:	893b      	ldrh	r3, [r7, #8]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00e      	beq.n	80096cc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	88da      	ldrh	r2, [r3, #6]
 80096b2:	893b      	ldrh	r3, [r7, #8]
 80096b4:	4293      	cmp	r3, r2
 80096b6:	bf28      	it	cs
 80096b8:	4613      	movcs	r3, r2
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80096be:	893b      	ldrh	r3, [r7, #8]
 80096c0:	461a      	mov	r2, r3
 80096c2:	68f9      	ldr	r1, [r7, #12]
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 fa44 	bl	8009b52 <USBD_CtlSendData>
 80096ca:	e009      	b.n	80096e0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80096cc:	6839      	ldr	r1, [r7, #0]
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 f9ce 	bl	8009a70 <USBD_CtlError>
 80096d4:	e004      	b.n	80096e0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 fa95 	bl	8009c06 <USBD_CtlSendStatus>
 80096dc:	e000      	b.n	80096e0 <USBD_GetDescriptor+0x2cc>
    return;
 80096de:	bf00      	nop
  }
}
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop

080096e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	889b      	ldrh	r3, [r3, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d131      	bne.n	800975e <USBD_SetAddress+0x76>
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	88db      	ldrh	r3, [r3, #6]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d12d      	bne.n	800975e <USBD_SetAddress+0x76>
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	885b      	ldrh	r3, [r3, #2]
 8009706:	2b7f      	cmp	r3, #127	; 0x7f
 8009708:	d829      	bhi.n	800975e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	885b      	ldrh	r3, [r3, #2]
 800970e:	b2db      	uxtb	r3, r3
 8009710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009714:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800971c:	b2db      	uxtb	r3, r3
 800971e:	2b03      	cmp	r3, #3
 8009720:	d104      	bne.n	800972c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009722:	6839      	ldr	r1, [r7, #0]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 f9a3 	bl	8009a70 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800972a:	e01d      	b.n	8009768 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	7bfa      	ldrb	r2, [r7, #15]
 8009730:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009734:	7bfb      	ldrb	r3, [r7, #15]
 8009736:	4619      	mov	r1, r3
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fef9 	bl	800a530 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 fa61 	bl	8009c06 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009744:	7bfb      	ldrb	r3, [r7, #15]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d004      	beq.n	8009754 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2202      	movs	r2, #2
 800974e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009752:	e009      	b.n	8009768 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800975c:	e004      	b.n	8009768 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800975e:	6839      	ldr	r1, [r7, #0]
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 f985 	bl	8009a70 <USBD_CtlError>
  }
}
 8009766:	bf00      	nop
 8009768:	bf00      	nop
 800976a:	3710      	adds	r7, #16
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800977a:	2300      	movs	r3, #0
 800977c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	885b      	ldrh	r3, [r3, #2]
 8009782:	b2da      	uxtb	r2, r3
 8009784:	4b4c      	ldr	r3, [pc, #304]	; (80098b8 <USBD_SetConfig+0x148>)
 8009786:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009788:	4b4b      	ldr	r3, [pc, #300]	; (80098b8 <USBD_SetConfig+0x148>)
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d905      	bls.n	800979c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009790:	6839      	ldr	r1, [r7, #0]
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f96c 	bl	8009a70 <USBD_CtlError>
    return USBD_FAIL;
 8009798:	2303      	movs	r3, #3
 800979a:	e088      	b.n	80098ae <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	d002      	beq.n	80097ae <USBD_SetConfig+0x3e>
 80097a8:	2b03      	cmp	r3, #3
 80097aa:	d025      	beq.n	80097f8 <USBD_SetConfig+0x88>
 80097ac:	e071      	b.n	8009892 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80097ae:	4b42      	ldr	r3, [pc, #264]	; (80098b8 <USBD_SetConfig+0x148>)
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d01c      	beq.n	80097f0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80097b6:	4b40      	ldr	r3, [pc, #256]	; (80098b8 <USBD_SetConfig+0x148>)
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	461a      	mov	r2, r3
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80097c0:	4b3d      	ldr	r3, [pc, #244]	; (80098b8 <USBD_SetConfig+0x148>)
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	4619      	mov	r1, r3
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7ff f948 	bl	8008a5c <USBD_SetClassConfig>
 80097cc:	4603      	mov	r3, r0
 80097ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80097d0:	7bfb      	ldrb	r3, [r7, #15]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d004      	beq.n	80097e0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80097d6:	6839      	ldr	r1, [r7, #0]
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 f949 	bl	8009a70 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80097de:	e065      	b.n	80098ac <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 fa10 	bl	8009c06 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2203      	movs	r2, #3
 80097ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80097ee:	e05d      	b.n	80098ac <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 fa08 	bl	8009c06 <USBD_CtlSendStatus>
      break;
 80097f6:	e059      	b.n	80098ac <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80097f8:	4b2f      	ldr	r3, [pc, #188]	; (80098b8 <USBD_SetConfig+0x148>)
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d112      	bne.n	8009826 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2202      	movs	r2, #2
 8009804:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009808:	4b2b      	ldr	r3, [pc, #172]	; (80098b8 <USBD_SetConfig+0x148>)
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	461a      	mov	r2, r3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009812:	4b29      	ldr	r3, [pc, #164]	; (80098b8 <USBD_SetConfig+0x148>)
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	4619      	mov	r1, r3
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f7ff f93b 	bl	8008a94 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f9f1 	bl	8009c06 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009824:	e042      	b.n	80098ac <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009826:	4b24      	ldr	r3, [pc, #144]	; (80098b8 <USBD_SetConfig+0x148>)
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	461a      	mov	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	429a      	cmp	r2, r3
 8009832:	d02a      	beq.n	800988a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	b2db      	uxtb	r3, r3
 800983a:	4619      	mov	r1, r3
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f7ff f929 	bl	8008a94 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009842:	4b1d      	ldr	r3, [pc, #116]	; (80098b8 <USBD_SetConfig+0x148>)
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	461a      	mov	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800984c:	4b1a      	ldr	r3, [pc, #104]	; (80098b8 <USBD_SetConfig+0x148>)
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	4619      	mov	r1, r3
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f7ff f902 	bl	8008a5c <USBD_SetClassConfig>
 8009858:	4603      	mov	r3, r0
 800985a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800985c:	7bfb      	ldrb	r3, [r7, #15]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00f      	beq.n	8009882 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009862:	6839      	ldr	r1, [r7, #0]
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 f903 	bl	8009a70 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	b2db      	uxtb	r3, r3
 8009870:	4619      	mov	r1, r3
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f7ff f90e 	bl	8008a94 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2202      	movs	r2, #2
 800987c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009880:	e014      	b.n	80098ac <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 f9bf 	bl	8009c06 <USBD_CtlSendStatus>
      break;
 8009888:	e010      	b.n	80098ac <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f9bb 	bl	8009c06 <USBD_CtlSendStatus>
      break;
 8009890:	e00c      	b.n	80098ac <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009892:	6839      	ldr	r1, [r7, #0]
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 f8eb 	bl	8009a70 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800989a:	4b07      	ldr	r3, [pc, #28]	; (80098b8 <USBD_SetConfig+0x148>)
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	4619      	mov	r1, r3
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f7ff f8f7 	bl	8008a94 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80098a6:	2303      	movs	r3, #3
 80098a8:	73fb      	strb	r3, [r7, #15]
      break;
 80098aa:	bf00      	nop
  }

  return ret;
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	2000021a 	.word	0x2000021a

080098bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	88db      	ldrh	r3, [r3, #6]
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d004      	beq.n	80098d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80098ce:	6839      	ldr	r1, [r7, #0]
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 f8cd 	bl	8009a70 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80098d6:	e023      	b.n	8009920 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	2b02      	cmp	r3, #2
 80098e2:	dc02      	bgt.n	80098ea <USBD_GetConfig+0x2e>
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	dc03      	bgt.n	80098f0 <USBD_GetConfig+0x34>
 80098e8:	e015      	b.n	8009916 <USBD_GetConfig+0x5a>
 80098ea:	2b03      	cmp	r3, #3
 80098ec:	d00b      	beq.n	8009906 <USBD_GetConfig+0x4a>
 80098ee:	e012      	b.n	8009916 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	3308      	adds	r3, #8
 80098fa:	2201      	movs	r2, #1
 80098fc:	4619      	mov	r1, r3
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f927 	bl	8009b52 <USBD_CtlSendData>
        break;
 8009904:	e00c      	b.n	8009920 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	3304      	adds	r3, #4
 800990a:	2201      	movs	r2, #1
 800990c:	4619      	mov	r1, r3
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 f91f 	bl	8009b52 <USBD_CtlSendData>
        break;
 8009914:	e004      	b.n	8009920 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009916:	6839      	ldr	r1, [r7, #0]
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 f8a9 	bl	8009a70 <USBD_CtlError>
        break;
 800991e:	bf00      	nop
}
 8009920:	bf00      	nop
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009938:	b2db      	uxtb	r3, r3
 800993a:	3b01      	subs	r3, #1
 800993c:	2b02      	cmp	r3, #2
 800993e:	d81e      	bhi.n	800997e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	88db      	ldrh	r3, [r3, #6]
 8009944:	2b02      	cmp	r3, #2
 8009946:	d004      	beq.n	8009952 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009948:	6839      	ldr	r1, [r7, #0]
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f890 	bl	8009a70 <USBD_CtlError>
        break;
 8009950:	e01a      	b.n	8009988 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2201      	movs	r2, #1
 8009956:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800995e:	2b00      	cmp	r3, #0
 8009960:	d005      	beq.n	800996e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	f043 0202 	orr.w	r2, r3, #2
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	330c      	adds	r3, #12
 8009972:	2202      	movs	r2, #2
 8009974:	4619      	mov	r1, r3
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 f8eb 	bl	8009b52 <USBD_CtlSendData>
      break;
 800997c:	e004      	b.n	8009988 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f875 	bl	8009a70 <USBD_CtlError>
      break;
 8009986:	bf00      	nop
  }
}
 8009988:	bf00      	nop
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	885b      	ldrh	r3, [r3, #2]
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d106      	bne.n	80099b0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f92b 	bl	8009c06 <USBD_CtlSendStatus>
  }
}
 80099b0:	bf00      	nop
 80099b2:	3708      	adds	r7, #8
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	3b01      	subs	r3, #1
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d80b      	bhi.n	80099e8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	885b      	ldrh	r3, [r3, #2]
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d10c      	bne.n	80099f2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f910 	bl	8009c06 <USBD_CtlSendStatus>
      }
      break;
 80099e6:	e004      	b.n	80099f2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80099e8:	6839      	ldr	r1, [r7, #0]
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 f840 	bl	8009a70 <USBD_CtlError>
      break;
 80099f0:	e000      	b.n	80099f4 <USBD_ClrFeature+0x3c>
      break;
 80099f2:	bf00      	nop
  }
}
 80099f4:	bf00      	nop
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	781a      	ldrb	r2, [r3, #0]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	3301      	adds	r3, #1
 8009a16:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	781a      	ldrb	r2, [r3, #0]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	3301      	adds	r3, #1
 8009a24:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f7ff fabb 	bl	8008fa2 <SWAPBYTE>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	461a      	mov	r2, r3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	3301      	adds	r3, #1
 8009a38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f7ff faae 	bl	8008fa2 <SWAPBYTE>
 8009a46:	4603      	mov	r3, r0
 8009a48:	461a      	mov	r2, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	3301      	adds	r3, #1
 8009a52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	3301      	adds	r3, #1
 8009a58:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f7ff faa1 	bl	8008fa2 <SWAPBYTE>
 8009a60:	4603      	mov	r3, r0
 8009a62:	461a      	mov	r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	80da      	strh	r2, [r3, #6]
}
 8009a68:	bf00      	nop
 8009a6a:	3710      	adds	r7, #16
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a7a:	2180      	movs	r1, #128	; 0x80
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 fced 	bl	800a45c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009a82:	2100      	movs	r1, #0
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fce9 	bl	800a45c <USBD_LL_StallEP>
}
 8009a8a:	bf00      	nop
 8009a8c:	3708      	adds	r7, #8
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b086      	sub	sp, #24
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	60f8      	str	r0, [r7, #12]
 8009a9a:	60b9      	str	r1, [r7, #8]
 8009a9c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d036      	beq.n	8009b16 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009aac:	6938      	ldr	r0, [r7, #16]
 8009aae:	f000 f836 	bl	8009b1e <USBD_GetLen>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	005b      	lsls	r3, r3, #1
 8009aba:	b29a      	uxth	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009ac0:	7dfb      	ldrb	r3, [r7, #23]
 8009ac2:	68ba      	ldr	r2, [r7, #8]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	7812      	ldrb	r2, [r2, #0]
 8009aca:	701a      	strb	r2, [r3, #0]
  idx++;
 8009acc:	7dfb      	ldrb	r3, [r7, #23]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009ad2:	7dfb      	ldrb	r3, [r7, #23]
 8009ad4:	68ba      	ldr	r2, [r7, #8]
 8009ad6:	4413      	add	r3, r2
 8009ad8:	2203      	movs	r2, #3
 8009ada:	701a      	strb	r2, [r3, #0]
  idx++;
 8009adc:	7dfb      	ldrb	r3, [r7, #23]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009ae2:	e013      	b.n	8009b0c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009ae4:	7dfb      	ldrb	r3, [r7, #23]
 8009ae6:	68ba      	ldr	r2, [r7, #8]
 8009ae8:	4413      	add	r3, r2
 8009aea:	693a      	ldr	r2, [r7, #16]
 8009aec:	7812      	ldrb	r2, [r2, #0]
 8009aee:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	3301      	adds	r3, #1
 8009af4:	613b      	str	r3, [r7, #16]
    idx++;
 8009af6:	7dfb      	ldrb	r3, [r7, #23]
 8009af8:	3301      	adds	r3, #1
 8009afa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009afc:	7dfb      	ldrb	r3, [r7, #23]
 8009afe:	68ba      	ldr	r2, [r7, #8]
 8009b00:	4413      	add	r3, r2
 8009b02:	2200      	movs	r2, #0
 8009b04:	701a      	strb	r2, [r3, #0]
    idx++;
 8009b06:	7dfb      	ldrb	r3, [r7, #23]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d1e7      	bne.n	8009ae4 <USBD_GetString+0x52>
 8009b14:	e000      	b.n	8009b18 <USBD_GetString+0x86>
    return;
 8009b16:	bf00      	nop
  }
}
 8009b18:	3718      	adds	r7, #24
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009b1e:	b480      	push	{r7}
 8009b20:	b085      	sub	sp, #20
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009b26:	2300      	movs	r3, #0
 8009b28:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009b2e:	e005      	b.n	8009b3c <USBD_GetLen+0x1e>
  {
    len++;
 8009b30:	7bfb      	ldrb	r3, [r7, #15]
 8009b32:	3301      	adds	r3, #1
 8009b34:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1f5      	bne.n	8009b30 <USBD_GetLen+0x12>
  }

  return len;
 8009b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3714      	adds	r7, #20
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr

08009b52 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b084      	sub	sp, #16
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	60f8      	str	r0, [r7, #12]
 8009b5a:	60b9      	str	r1, [r7, #8]
 8009b5c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2202      	movs	r2, #2
 8009b62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	68ba      	ldr	r2, [r7, #8]
 8009b76:	2100      	movs	r1, #0
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f000 fcf8 	bl	800a56e <USBD_LL_Transmit>

  return USBD_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	68ba      	ldr	r2, [r7, #8]
 8009b98:	2100      	movs	r1, #0
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f000 fce7 	bl	800a56e <USBD_LL_Transmit>

  return USBD_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b084      	sub	sp, #16
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	60f8      	str	r0, [r7, #12]
 8009bb2:	60b9      	str	r1, [r7, #8]
 8009bb4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2203      	movs	r2, #3
 8009bba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	68ba      	ldr	r2, [r7, #8]
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	f000 fceb 	bl	800a5b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009bda:	2300      	movs	r3, #0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3710      	adds	r7, #16
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	60b9      	str	r1, [r7, #8]
 8009bee:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	68ba      	ldr	r2, [r7, #8]
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f000 fcda 	bl	800a5b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b082      	sub	sp, #8
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2204      	movs	r2, #4
 8009c12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009c16:	2300      	movs	r3, #0
 8009c18:	2200      	movs	r2, #0
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 fca6 	bl	800a56e <USBD_LL_Transmit>

  return USBD_OK;
 8009c22:	2300      	movs	r3, #0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2205      	movs	r2, #5
 8009c38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	2200      	movs	r2, #0
 8009c40:	2100      	movs	r1, #0
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 fcb4 	bl	800a5b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3708      	adds	r7, #8
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
	...

08009c54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009c58:	2200      	movs	r2, #0
 8009c5a:	4912      	ldr	r1, [pc, #72]	; (8009ca4 <MX_USB_DEVICE_Init+0x50>)
 8009c5c:	4812      	ldr	r0, [pc, #72]	; (8009ca8 <MX_USB_DEVICE_Init+0x54>)
 8009c5e:	f7fe fe8f 	bl	8008980 <USBD_Init>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d001      	beq.n	8009c6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009c68:	f7f6 ffa8 	bl	8000bbc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009c6c:	490f      	ldr	r1, [pc, #60]	; (8009cac <MX_USB_DEVICE_Init+0x58>)
 8009c6e:	480e      	ldr	r0, [pc, #56]	; (8009ca8 <MX_USB_DEVICE_Init+0x54>)
 8009c70:	f7fe feb6 	bl	80089e0 <USBD_RegisterClass>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009c7a:	f7f6 ff9f 	bl	8000bbc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009c7e:	490c      	ldr	r1, [pc, #48]	; (8009cb0 <MX_USB_DEVICE_Init+0x5c>)
 8009c80:	4809      	ldr	r0, [pc, #36]	; (8009ca8 <MX_USB_DEVICE_Init+0x54>)
 8009c82:	f7fe fdd7 	bl	8008834 <USBD_CDC_RegisterInterface>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d001      	beq.n	8009c90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009c8c:	f7f6 ff96 	bl	8000bbc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009c90:	4805      	ldr	r0, [pc, #20]	; (8009ca8 <MX_USB_DEVICE_Init+0x54>)
 8009c92:	f7fe fecc 	bl	8008a2e <USBD_Start>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d001      	beq.n	8009ca0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009c9c:	f7f6 ff8e 	bl	8000bbc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009ca0:	bf00      	nop
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	20000134 	.word	0x20000134
 8009ca8:	2000ff88 	.word	0x2000ff88
 8009cac:	2000001c 	.word	0x2000001c
 8009cb0:	20000120 	.word	0x20000120

08009cb4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009cb8:	2200      	movs	r2, #0
 8009cba:	4905      	ldr	r1, [pc, #20]	; (8009cd0 <CDC_Init_FS+0x1c>)
 8009cbc:	4805      	ldr	r0, [pc, #20]	; (8009cd4 <CDC_Init_FS+0x20>)
 8009cbe:	f7fe fdce 	bl	800885e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009cc2:	4905      	ldr	r1, [pc, #20]	; (8009cd8 <CDC_Init_FS+0x24>)
 8009cc4:	4803      	ldr	r0, [pc, #12]	; (8009cd4 <CDC_Init_FS+0x20>)
 8009cc6:	f7fe fde8 	bl	800889a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009cca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	20010a58 	.word	0x20010a58
 8009cd4:	2000ff88 	.word	0x2000ff88
 8009cd8:	20010258 	.word	0x20010258

08009cdc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009ce0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	6039      	str	r1, [r7, #0]
 8009cf6:	71fb      	strb	r3, [r7, #7]
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009cfc:	79fb      	ldrb	r3, [r7, #7]
 8009cfe:	2b23      	cmp	r3, #35	; 0x23
 8009d00:	d84a      	bhi.n	8009d98 <CDC_Control_FS+0xac>
 8009d02:	a201      	add	r2, pc, #4	; (adr r2, 8009d08 <CDC_Control_FS+0x1c>)
 8009d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d08:	08009d99 	.word	0x08009d99
 8009d0c:	08009d99 	.word	0x08009d99
 8009d10:	08009d99 	.word	0x08009d99
 8009d14:	08009d99 	.word	0x08009d99
 8009d18:	08009d99 	.word	0x08009d99
 8009d1c:	08009d99 	.word	0x08009d99
 8009d20:	08009d99 	.word	0x08009d99
 8009d24:	08009d99 	.word	0x08009d99
 8009d28:	08009d99 	.word	0x08009d99
 8009d2c:	08009d99 	.word	0x08009d99
 8009d30:	08009d99 	.word	0x08009d99
 8009d34:	08009d99 	.word	0x08009d99
 8009d38:	08009d99 	.word	0x08009d99
 8009d3c:	08009d99 	.word	0x08009d99
 8009d40:	08009d99 	.word	0x08009d99
 8009d44:	08009d99 	.word	0x08009d99
 8009d48:	08009d99 	.word	0x08009d99
 8009d4c:	08009d99 	.word	0x08009d99
 8009d50:	08009d99 	.word	0x08009d99
 8009d54:	08009d99 	.word	0x08009d99
 8009d58:	08009d99 	.word	0x08009d99
 8009d5c:	08009d99 	.word	0x08009d99
 8009d60:	08009d99 	.word	0x08009d99
 8009d64:	08009d99 	.word	0x08009d99
 8009d68:	08009d99 	.word	0x08009d99
 8009d6c:	08009d99 	.word	0x08009d99
 8009d70:	08009d99 	.word	0x08009d99
 8009d74:	08009d99 	.word	0x08009d99
 8009d78:	08009d99 	.word	0x08009d99
 8009d7c:	08009d99 	.word	0x08009d99
 8009d80:	08009d99 	.word	0x08009d99
 8009d84:	08009d99 	.word	0x08009d99
 8009d88:	08009d99 	.word	0x08009d99
 8009d8c:	08009d99 	.word	0x08009d99
 8009d90:	08009d99 	.word	0x08009d99
 8009d94:	08009d99 	.word	0x08009d99
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009d98:	bf00      	nop
  }

  return (USBD_OK);
 8009d9a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  extern uint8_t scmd;
	  if(Buf[0]==0x01) scmd=0x01;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d102      	bne.n	8009dc0 <CDC_Receive_FS+0x18>
 8009dba:	4b07      	ldr	r3, [pc, #28]	; (8009dd8 <CDC_Receive_FS+0x30>)
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	701a      	strb	r2, [r3, #0]

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009dc0:	6879      	ldr	r1, [r7, #4]
 8009dc2:	4806      	ldr	r0, [pc, #24]	; (8009ddc <CDC_Receive_FS+0x34>)
 8009dc4:	f7fe fd69 	bl	800889a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009dc8:	4804      	ldr	r0, [pc, #16]	; (8009ddc <CDC_Receive_FS+0x34>)
 8009dca:	f7fe fdaf 	bl	800892c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009dce:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3708      	adds	r7, #8
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	20000218 	.word	0x20000218
 8009ddc:	2000ff88 	.word	0x2000ff88

08009de0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	460b      	mov	r3, r1
 8009dea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009dec:	2300      	movs	r3, #0
 8009dee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009df0:	4b0d      	ldr	r3, [pc, #52]	; (8009e28 <CDC_Transmit_FS+0x48>)
 8009df2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009df6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d001      	beq.n	8009e06 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009e02:	2301      	movs	r3, #1
 8009e04:	e00b      	b.n	8009e1e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009e06:	887b      	ldrh	r3, [r7, #2]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	6879      	ldr	r1, [r7, #4]
 8009e0c:	4806      	ldr	r0, [pc, #24]	; (8009e28 <CDC_Transmit_FS+0x48>)
 8009e0e:	f7fe fd26 	bl	800885e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009e12:	4805      	ldr	r0, [pc, #20]	; (8009e28 <CDC_Transmit_FS+0x48>)
 8009e14:	f7fe fd5a 	bl	80088cc <USBD_CDC_TransmitPacket>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	2000ff88 	.word	0x2000ff88

08009e2c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b087      	sub	sp, #28
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	4613      	mov	r3, r2
 8009e38:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  extern uint8_t tx_busy ;
  tx_busy = 0;
 8009e3e:	4b05      	ldr	r3, [pc, #20]	; (8009e54 <CDC_TransmitCplt_FS+0x28>)
 8009e40:	2200      	movs	r2, #0
 8009e42:	701a      	strb	r2, [r3, #0]

  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009e44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	371c      	adds	r7, #28
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr
 8009e54:	20000219 	.word	0x20000219

08009e58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	4603      	mov	r3, r0
 8009e60:	6039      	str	r1, [r7, #0]
 8009e62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	2212      	movs	r2, #18
 8009e68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009e6a:	4b03      	ldr	r3, [pc, #12]	; (8009e78 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr
 8009e78:	20000150 	.word	0x20000150

08009e7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	4603      	mov	r3, r0
 8009e84:	6039      	str	r1, [r7, #0]
 8009e86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	2204      	movs	r2, #4
 8009e8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009e8e:	4b03      	ldr	r3, [pc, #12]	; (8009e9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr
 8009e9c:	20000164 	.word	0x20000164

08009ea0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	6039      	str	r1, [r7, #0]
 8009eaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009eac:	79fb      	ldrb	r3, [r7, #7]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d105      	bne.n	8009ebe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009eb2:	683a      	ldr	r2, [r7, #0]
 8009eb4:	4907      	ldr	r1, [pc, #28]	; (8009ed4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009eb6:	4808      	ldr	r0, [pc, #32]	; (8009ed8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009eb8:	f7ff fdeb 	bl	8009a92 <USBD_GetString>
 8009ebc:	e004      	b.n	8009ec8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	4904      	ldr	r1, [pc, #16]	; (8009ed4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ec2:	4805      	ldr	r0, [pc, #20]	; (8009ed8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009ec4:	f7ff fde5 	bl	8009a92 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ec8:	4b02      	ldr	r3, [pc, #8]	; (8009ed4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	20011258 	.word	0x20011258
 8009ed8:	0800a710 	.word	0x0800a710

08009edc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	6039      	str	r1, [r7, #0]
 8009ee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	4904      	ldr	r1, [pc, #16]	; (8009efc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009eec:	4804      	ldr	r0, [pc, #16]	; (8009f00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009eee:	f7ff fdd0 	bl	8009a92 <USBD_GetString>
  return USBD_StrDesc;
 8009ef2:	4b02      	ldr	r3, [pc, #8]	; (8009efc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	20011258 	.word	0x20011258
 8009f00:	0800a728 	.word	0x0800a728

08009f04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	6039      	str	r1, [r7, #0]
 8009f0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	221a      	movs	r2, #26
 8009f14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009f16:	f000 f843 	bl	8009fa0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009f1a:	4b02      	ldr	r3, [pc, #8]	; (8009f24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3708      	adds	r7, #8
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	20000168 	.word	0x20000168

08009f28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	4603      	mov	r3, r0
 8009f30:	6039      	str	r1, [r7, #0]
 8009f32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009f34:	79fb      	ldrb	r3, [r7, #7]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d105      	bne.n	8009f46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009f3a:	683a      	ldr	r2, [r7, #0]
 8009f3c:	4907      	ldr	r1, [pc, #28]	; (8009f5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009f3e:	4808      	ldr	r0, [pc, #32]	; (8009f60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009f40:	f7ff fda7 	bl	8009a92 <USBD_GetString>
 8009f44:	e004      	b.n	8009f50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009f46:	683a      	ldr	r2, [r7, #0]
 8009f48:	4904      	ldr	r1, [pc, #16]	; (8009f5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009f4a:	4805      	ldr	r0, [pc, #20]	; (8009f60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009f4c:	f7ff fda1 	bl	8009a92 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f50:	4b02      	ldr	r3, [pc, #8]	; (8009f5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3708      	adds	r7, #8
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	20011258 	.word	0x20011258
 8009f60:	0800a73c 	.word	0x0800a73c

08009f64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	6039      	str	r1, [r7, #0]
 8009f6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f70:	79fb      	ldrb	r3, [r7, #7]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d105      	bne.n	8009f82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f76:	683a      	ldr	r2, [r7, #0]
 8009f78:	4907      	ldr	r1, [pc, #28]	; (8009f98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f7a:	4808      	ldr	r0, [pc, #32]	; (8009f9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f7c:	f7ff fd89 	bl	8009a92 <USBD_GetString>
 8009f80:	e004      	b.n	8009f8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f82:	683a      	ldr	r2, [r7, #0]
 8009f84:	4904      	ldr	r1, [pc, #16]	; (8009f98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f86:	4805      	ldr	r0, [pc, #20]	; (8009f9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f88:	f7ff fd83 	bl	8009a92 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f8c:	4b02      	ldr	r3, [pc, #8]	; (8009f98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3708      	adds	r7, #8
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	20011258 	.word	0x20011258
 8009f9c:	0800a748 	.word	0x0800a748

08009fa0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009fa6:	4b0f      	ldr	r3, [pc, #60]	; (8009fe4 <Get_SerialNum+0x44>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009fac:	4b0e      	ldr	r3, [pc, #56]	; (8009fe8 <Get_SerialNum+0x48>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009fb2:	4b0e      	ldr	r3, [pc, #56]	; (8009fec <Get_SerialNum+0x4c>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d009      	beq.n	8009fda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009fc6:	2208      	movs	r2, #8
 8009fc8:	4909      	ldr	r1, [pc, #36]	; (8009ff0 <Get_SerialNum+0x50>)
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	f000 f814 	bl	8009ff8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009fd0:	2204      	movs	r2, #4
 8009fd2:	4908      	ldr	r1, [pc, #32]	; (8009ff4 <Get_SerialNum+0x54>)
 8009fd4:	68b8      	ldr	r0, [r7, #8]
 8009fd6:	f000 f80f 	bl	8009ff8 <IntToUnicode>
  }
}
 8009fda:	bf00      	nop
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	1fff7a10 	.word	0x1fff7a10
 8009fe8:	1fff7a14 	.word	0x1fff7a14
 8009fec:	1fff7a18 	.word	0x1fff7a18
 8009ff0:	2000016a 	.word	0x2000016a
 8009ff4:	2000017a 	.word	0x2000017a

08009ff8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b087      	sub	sp, #28
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	4613      	mov	r3, r2
 800a004:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a006:	2300      	movs	r3, #0
 800a008:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a00a:	2300      	movs	r3, #0
 800a00c:	75fb      	strb	r3, [r7, #23]
 800a00e:	e027      	b.n	800a060 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	0f1b      	lsrs	r3, r3, #28
 800a014:	2b09      	cmp	r3, #9
 800a016:	d80b      	bhi.n	800a030 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	0f1b      	lsrs	r3, r3, #28
 800a01c:	b2da      	uxtb	r2, r3
 800a01e:	7dfb      	ldrb	r3, [r7, #23]
 800a020:	005b      	lsls	r3, r3, #1
 800a022:	4619      	mov	r1, r3
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	440b      	add	r3, r1
 800a028:	3230      	adds	r2, #48	; 0x30
 800a02a:	b2d2      	uxtb	r2, r2
 800a02c:	701a      	strb	r2, [r3, #0]
 800a02e:	e00a      	b.n	800a046 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	0f1b      	lsrs	r3, r3, #28
 800a034:	b2da      	uxtb	r2, r3
 800a036:	7dfb      	ldrb	r3, [r7, #23]
 800a038:	005b      	lsls	r3, r3, #1
 800a03a:	4619      	mov	r1, r3
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	440b      	add	r3, r1
 800a040:	3237      	adds	r2, #55	; 0x37
 800a042:	b2d2      	uxtb	r2, r2
 800a044:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	011b      	lsls	r3, r3, #4
 800a04a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a04c:	7dfb      	ldrb	r3, [r7, #23]
 800a04e:	005b      	lsls	r3, r3, #1
 800a050:	3301      	adds	r3, #1
 800a052:	68ba      	ldr	r2, [r7, #8]
 800a054:	4413      	add	r3, r2
 800a056:	2200      	movs	r2, #0
 800a058:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a05a:	7dfb      	ldrb	r3, [r7, #23]
 800a05c:	3301      	adds	r3, #1
 800a05e:	75fb      	strb	r3, [r7, #23]
 800a060:	7dfa      	ldrb	r2, [r7, #23]
 800a062:	79fb      	ldrb	r3, [r7, #7]
 800a064:	429a      	cmp	r2, r3
 800a066:	d3d3      	bcc.n	800a010 <IntToUnicode+0x18>
  }
}
 800a068:	bf00      	nop
 800a06a:	bf00      	nop
 800a06c:	371c      	adds	r7, #28
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
	...

0800a078 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b08a      	sub	sp, #40	; 0x28
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a080:	f107 0314 	add.w	r3, r7, #20
 800a084:	2200      	movs	r2, #0
 800a086:	601a      	str	r2, [r3, #0]
 800a088:	605a      	str	r2, [r3, #4]
 800a08a:	609a      	str	r2, [r3, #8]
 800a08c:	60da      	str	r2, [r3, #12]
 800a08e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a098:	d13a      	bne.n	800a110 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a09a:	2300      	movs	r3, #0
 800a09c:	613b      	str	r3, [r7, #16]
 800a09e:	4b1e      	ldr	r3, [pc, #120]	; (800a118 <HAL_PCD_MspInit+0xa0>)
 800a0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0a2:	4a1d      	ldr	r2, [pc, #116]	; (800a118 <HAL_PCD_MspInit+0xa0>)
 800a0a4:	f043 0301 	orr.w	r3, r3, #1
 800a0a8:	6313      	str	r3, [r2, #48]	; 0x30
 800a0aa:	4b1b      	ldr	r3, [pc, #108]	; (800a118 <HAL_PCD_MspInit+0xa0>)
 800a0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ae:	f003 0301 	and.w	r3, r3, #1
 800a0b2:	613b      	str	r3, [r7, #16]
 800a0b4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a0b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a0ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0bc:	2302      	movs	r3, #2
 800a0be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a0c8:	230a      	movs	r3, #10
 800a0ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0cc:	f107 0314 	add.w	r3, r7, #20
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	4812      	ldr	r0, [pc, #72]	; (800a11c <HAL_PCD_MspInit+0xa4>)
 800a0d4:	f7f9 fe9c 	bl	8003e10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a0d8:	4b0f      	ldr	r3, [pc, #60]	; (800a118 <HAL_PCD_MspInit+0xa0>)
 800a0da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0dc:	4a0e      	ldr	r2, [pc, #56]	; (800a118 <HAL_PCD_MspInit+0xa0>)
 800a0de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0e2:	6353      	str	r3, [r2, #52]	; 0x34
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	60fb      	str	r3, [r7, #12]
 800a0e8:	4b0b      	ldr	r3, [pc, #44]	; (800a118 <HAL_PCD_MspInit+0xa0>)
 800a0ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0ec:	4a0a      	ldr	r2, [pc, #40]	; (800a118 <HAL_PCD_MspInit+0xa0>)
 800a0ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a0f2:	6453      	str	r3, [r2, #68]	; 0x44
 800a0f4:	4b08      	ldr	r3, [pc, #32]	; (800a118 <HAL_PCD_MspInit+0xa0>)
 800a0f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0fc:	60fb      	str	r3, [r7, #12]
 800a0fe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a100:	2200      	movs	r2, #0
 800a102:	2100      	movs	r1, #0
 800a104:	2043      	movs	r0, #67	; 0x43
 800a106:	f7f7 fd14 	bl	8001b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a10a:	2043      	movs	r0, #67	; 0x43
 800a10c:	f7f7 fd2d 	bl	8001b6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a110:	bf00      	nop
 800a112:	3728      	adds	r7, #40	; 0x28
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	40023800 	.word	0x40023800
 800a11c:	40020000 	.word	0x40020000

0800a120 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a134:	4619      	mov	r1, r3
 800a136:	4610      	mov	r0, r2
 800a138:	f7fe fcc4 	bl	8008ac4 <USBD_LL_SetupStage>
}
 800a13c:	bf00      	nop
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	460b      	mov	r3, r1
 800a14e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a156:	78fa      	ldrb	r2, [r7, #3]
 800a158:	6879      	ldr	r1, [r7, #4]
 800a15a:	4613      	mov	r3, r2
 800a15c:	00db      	lsls	r3, r3, #3
 800a15e:	1a9b      	subs	r3, r3, r2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	440b      	add	r3, r1
 800a164:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	78fb      	ldrb	r3, [r7, #3]
 800a16c:	4619      	mov	r1, r3
 800a16e:	f7fe fcfe 	bl	8008b6e <USBD_LL_DataOutStage>
}
 800a172:	bf00      	nop
 800a174:	3708      	adds	r7, #8
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b082      	sub	sp, #8
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
 800a182:	460b      	mov	r3, r1
 800a184:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a18c:	78fa      	ldrb	r2, [r7, #3]
 800a18e:	6879      	ldr	r1, [r7, #4]
 800a190:	4613      	mov	r3, r2
 800a192:	00db      	lsls	r3, r3, #3
 800a194:	1a9b      	subs	r3, r3, r2
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	440b      	add	r3, r1
 800a19a:	3348      	adds	r3, #72	; 0x48
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	78fb      	ldrb	r3, [r7, #3]
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	f7fe fd47 	bl	8008c34 <USBD_LL_DataInStage>
}
 800a1a6:	bf00      	nop
 800a1a8:	3708      	adds	r7, #8
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b082      	sub	sp, #8
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f7fe fe5b 	bl	8008e78 <USBD_LL_SOF>
}
 800a1c2:	bf00      	nop
 800a1c4:	3708      	adds	r7, #8
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b084      	sub	sp, #16
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d102      	bne.n	800a1e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	73fb      	strb	r3, [r7, #15]
 800a1e2:	e008      	b.n	800a1f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	d102      	bne.n	800a1f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	73fb      	strb	r3, [r7, #15]
 800a1f0:	e001      	b.n	800a1f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a1f2:	f7f6 fce3 	bl	8000bbc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a1fc:	7bfa      	ldrb	r2, [r7, #15]
 800a1fe:	4611      	mov	r1, r2
 800a200:	4618      	mov	r0, r3
 800a202:	f7fe fdfb 	bl	8008dfc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7fe fda7 	bl	8008d60 <USBD_LL_Reset>
}
 800a212:	bf00      	nop
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
	...

0800a21c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7fe fdf6 	bl	8008e1c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	6812      	ldr	r2, [r2, #0]
 800a23e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a242:	f043 0301 	orr.w	r3, r3, #1
 800a246:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6a1b      	ldr	r3, [r3, #32]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d005      	beq.n	800a25c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a250:	4b04      	ldr	r3, [pc, #16]	; (800a264 <HAL_PCD_SuspendCallback+0x48>)
 800a252:	691b      	ldr	r3, [r3, #16]
 800a254:	4a03      	ldr	r2, [pc, #12]	; (800a264 <HAL_PCD_SuspendCallback+0x48>)
 800a256:	f043 0306 	orr.w	r3, r3, #6
 800a25a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a25c:	bf00      	nop
 800a25e:	3708      	adds	r7, #8
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	e000ed00 	.word	0xe000ed00

0800a268 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a276:	4618      	mov	r0, r3
 800a278:	f7fe fde6 	bl	8008e48 <USBD_LL_Resume>
}
 800a27c:	bf00      	nop
 800a27e:	3708      	adds	r7, #8
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	460b      	mov	r3, r1
 800a28e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a296:	78fa      	ldrb	r2, [r7, #3]
 800a298:	4611      	mov	r1, r2
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7fe fe34 	bl	8008f08 <USBD_LL_IsoOUTIncomplete>
}
 800a2a0:	bf00      	nop
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a2ba:	78fa      	ldrb	r2, [r7, #3]
 800a2bc:	4611      	mov	r1, r2
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7fe fdfc 	bl	8008ebc <USBD_LL_IsoINIncomplete>
}
 800a2c4:	bf00      	nop
 800a2c6:	3708      	adds	r7, #8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fe fe3a 	bl	8008f54 <USBD_LL_DevConnected>
}
 800a2e0:	bf00      	nop
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7fe fe37 	bl	8008f6a <USBD_LL_DevDisconnected>
}
 800a2fc:	bf00      	nop
 800a2fe:	3708      	adds	r7, #8
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d13c      	bne.n	800a38e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a314:	4a20      	ldr	r2, [pc, #128]	; (800a398 <USBD_LL_Init+0x94>)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4a1e      	ldr	r2, [pc, #120]	; (800a398 <USBD_LL_Init+0x94>)
 800a320:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a324:	4b1c      	ldr	r3, [pc, #112]	; (800a398 <USBD_LL_Init+0x94>)
 800a326:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a32a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a32c:	4b1a      	ldr	r3, [pc, #104]	; (800a398 <USBD_LL_Init+0x94>)
 800a32e:	2204      	movs	r2, #4
 800a330:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a332:	4b19      	ldr	r3, [pc, #100]	; (800a398 <USBD_LL_Init+0x94>)
 800a334:	2202      	movs	r2, #2
 800a336:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a338:	4b17      	ldr	r3, [pc, #92]	; (800a398 <USBD_LL_Init+0x94>)
 800a33a:	2200      	movs	r2, #0
 800a33c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a33e:	4b16      	ldr	r3, [pc, #88]	; (800a398 <USBD_LL_Init+0x94>)
 800a340:	2202      	movs	r2, #2
 800a342:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a344:	4b14      	ldr	r3, [pc, #80]	; (800a398 <USBD_LL_Init+0x94>)
 800a346:	2200      	movs	r2, #0
 800a348:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a34a:	4b13      	ldr	r3, [pc, #76]	; (800a398 <USBD_LL_Init+0x94>)
 800a34c:	2200      	movs	r2, #0
 800a34e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a350:	4b11      	ldr	r3, [pc, #68]	; (800a398 <USBD_LL_Init+0x94>)
 800a352:	2200      	movs	r2, #0
 800a354:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a356:	4b10      	ldr	r3, [pc, #64]	; (800a398 <USBD_LL_Init+0x94>)
 800a358:	2200      	movs	r2, #0
 800a35a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a35c:	4b0e      	ldr	r3, [pc, #56]	; (800a398 <USBD_LL_Init+0x94>)
 800a35e:	2200      	movs	r2, #0
 800a360:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a362:	480d      	ldr	r0, [pc, #52]	; (800a398 <USBD_LL_Init+0x94>)
 800a364:	f7f9 ff21 	bl	80041aa <HAL_PCD_Init>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d001      	beq.n	800a372 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a36e:	f7f6 fc25 	bl	8000bbc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a372:	2180      	movs	r1, #128	; 0x80
 800a374:	4808      	ldr	r0, [pc, #32]	; (800a398 <USBD_LL_Init+0x94>)
 800a376:	f7fb f87e 	bl	8005476 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a37a:	2240      	movs	r2, #64	; 0x40
 800a37c:	2100      	movs	r1, #0
 800a37e:	4806      	ldr	r0, [pc, #24]	; (800a398 <USBD_LL_Init+0x94>)
 800a380:	f7fb f832 	bl	80053e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a384:	2280      	movs	r2, #128	; 0x80
 800a386:	2101      	movs	r1, #1
 800a388:	4803      	ldr	r0, [pc, #12]	; (800a398 <USBD_LL_Init+0x94>)
 800a38a:	f7fb f82d 	bl	80053e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a38e:	2300      	movs	r3, #0
}
 800a390:	4618      	mov	r0, r3
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	20011458 	.word	0x20011458

0800a39c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7fa f816 	bl	80043e4 <HAL_PCD_Start>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3bc:	7bfb      	ldrb	r3, [r7, #15]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f000 f942 	bl	800a648 <USBD_Get_USB_Status>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3710      	adds	r7, #16
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b084      	sub	sp, #16
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
 800a3da:	4608      	mov	r0, r1
 800a3dc:	4611      	mov	r1, r2
 800a3de:	461a      	mov	r2, r3
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	70fb      	strb	r3, [r7, #3]
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	70bb      	strb	r3, [r7, #2]
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a3fa:	78bb      	ldrb	r3, [r7, #2]
 800a3fc:	883a      	ldrh	r2, [r7, #0]
 800a3fe:	78f9      	ldrb	r1, [r7, #3]
 800a400:	f7fa fbfa 	bl	8004bf8 <HAL_PCD_EP_Open>
 800a404:	4603      	mov	r3, r0
 800a406:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a408:	7bfb      	ldrb	r3, [r7, #15]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f000 f91c 	bl	800a648 <USBD_Get_USB_Status>
 800a410:	4603      	mov	r3, r0
 800a412:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a414:	7bbb      	ldrb	r3, [r7, #14]
}
 800a416:	4618      	mov	r0, r3
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b084      	sub	sp, #16
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
 800a426:	460b      	mov	r3, r1
 800a428:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a42a:	2300      	movs	r3, #0
 800a42c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a42e:	2300      	movs	r3, #0
 800a430:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a438:	78fa      	ldrb	r2, [r7, #3]
 800a43a:	4611      	mov	r1, r2
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7fa fc43 	bl	8004cc8 <HAL_PCD_EP_Close>
 800a442:	4603      	mov	r3, r0
 800a444:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a446:	7bfb      	ldrb	r3, [r7, #15]
 800a448:	4618      	mov	r0, r3
 800a44a:	f000 f8fd 	bl	800a648 <USBD_Get_USB_Status>
 800a44e:	4603      	mov	r3, r0
 800a450:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a452:	7bbb      	ldrb	r3, [r7, #14]
}
 800a454:	4618      	mov	r0, r3
 800a456:	3710      	adds	r7, #16
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	460b      	mov	r3, r1
 800a466:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a468:	2300      	movs	r3, #0
 800a46a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a46c:	2300      	movs	r3, #0
 800a46e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a476:	78fa      	ldrb	r2, [r7, #3]
 800a478:	4611      	mov	r1, r2
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7fa fd1b 	bl	8004eb6 <HAL_PCD_EP_SetStall>
 800a480:	4603      	mov	r3, r0
 800a482:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a484:	7bfb      	ldrb	r3, [r7, #15]
 800a486:	4618      	mov	r0, r3
 800a488:	f000 f8de 	bl	800a648 <USBD_Get_USB_Status>
 800a48c:	4603      	mov	r3, r0
 800a48e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a490:	7bbb      	ldrb	r3, [r7, #14]
}
 800a492:	4618      	mov	r0, r3
 800a494:	3710      	adds	r7, #16
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b084      	sub	sp, #16
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a4b4:	78fa      	ldrb	r2, [r7, #3]
 800a4b6:	4611      	mov	r1, r2
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7fa fd60 	bl	8004f7e <HAL_PCD_EP_ClrStall>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4c2:	7bfb      	ldrb	r3, [r7, #15]
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f000 f8bf 	bl	800a648 <USBD_Get_USB_Status>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a4ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a4ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	da0b      	bge.n	800a50c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a4f4:	78fb      	ldrb	r3, [r7, #3]
 800a4f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4fa:	68f9      	ldr	r1, [r7, #12]
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	00db      	lsls	r3, r3, #3
 800a500:	1a9b      	subs	r3, r3, r2
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	440b      	add	r3, r1
 800a506:	333e      	adds	r3, #62	; 0x3e
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	e00b      	b.n	800a524 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a50c:	78fb      	ldrb	r3, [r7, #3]
 800a50e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a512:	68f9      	ldr	r1, [r7, #12]
 800a514:	4613      	mov	r3, r2
 800a516:	00db      	lsls	r3, r3, #3
 800a518:	1a9b      	subs	r3, r3, r2
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	440b      	add	r3, r1
 800a51e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a522:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a524:	4618      	mov	r0, r3
 800a526:	3714      	adds	r7, #20
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	460b      	mov	r3, r1
 800a53a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a53c:	2300      	movs	r3, #0
 800a53e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a540:	2300      	movs	r3, #0
 800a542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a54a:	78fa      	ldrb	r2, [r7, #3]
 800a54c:	4611      	mov	r1, r2
 800a54e:	4618      	mov	r0, r3
 800a550:	f7fa fb2d 	bl	8004bae <HAL_PCD_SetAddress>
 800a554:	4603      	mov	r3, r0
 800a556:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a558:	7bfb      	ldrb	r3, [r7, #15]
 800a55a:	4618      	mov	r0, r3
 800a55c:	f000 f874 	bl	800a648 <USBD_Get_USB_Status>
 800a560:	4603      	mov	r3, r0
 800a562:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a564:	7bbb      	ldrb	r3, [r7, #14]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b086      	sub	sp, #24
 800a572:	af00      	add	r7, sp, #0
 800a574:	60f8      	str	r0, [r7, #12]
 800a576:	607a      	str	r2, [r7, #4]
 800a578:	603b      	str	r3, [r7, #0]
 800a57a:	460b      	mov	r3, r1
 800a57c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a57e:	2300      	movs	r3, #0
 800a580:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a582:	2300      	movs	r3, #0
 800a584:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a58c:	7af9      	ldrb	r1, [r7, #11]
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	f7fa fc46 	bl	8004e22 <HAL_PCD_EP_Transmit>
 800a596:	4603      	mov	r3, r0
 800a598:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a59a:	7dfb      	ldrb	r3, [r7, #23]
 800a59c:	4618      	mov	r0, r3
 800a59e:	f000 f853 	bl	800a648 <USBD_Get_USB_Status>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a5a6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3718      	adds	r7, #24
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	607a      	str	r2, [r7, #4]
 800a5ba:	603b      	str	r3, [r7, #0]
 800a5bc:	460b      	mov	r3, r1
 800a5be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a5ce:	7af9      	ldrb	r1, [r7, #11]
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	f7fa fbc2 	bl	8004d5c <HAL_PCD_EP_Receive>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5dc:	7dfb      	ldrb	r3, [r7, #23]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f000 f832 	bl	800a648 <USBD_Get_USB_Status>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a5e8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3718      	adds	r7, #24
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b082      	sub	sp, #8
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a604:	78fa      	ldrb	r2, [r7, #3]
 800a606:	4611      	mov	r1, r2
 800a608:	4618      	mov	r0, r3
 800a60a:	f7fa fbf2 	bl	8004df2 <HAL_PCD_EP_GetRxCount>
 800a60e:	4603      	mov	r3, r0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3708      	adds	r7, #8
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a620:	4b03      	ldr	r3, [pc, #12]	; (800a630 <USBD_static_malloc+0x18>)
}
 800a622:	4618      	mov	r0, r3
 800a624:	370c      	adds	r7, #12
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr
 800a62e:	bf00      	nop
 800a630:	2000021c 	.word	0x2000021c

0800a634 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]

}
 800a63c:	bf00      	nop
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	4603      	mov	r3, r0
 800a650:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a652:	2300      	movs	r3, #0
 800a654:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a656:	79fb      	ldrb	r3, [r7, #7]
 800a658:	2b03      	cmp	r3, #3
 800a65a:	d817      	bhi.n	800a68c <USBD_Get_USB_Status+0x44>
 800a65c:	a201      	add	r2, pc, #4	; (adr r2, 800a664 <USBD_Get_USB_Status+0x1c>)
 800a65e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a662:	bf00      	nop
 800a664:	0800a675 	.word	0x0800a675
 800a668:	0800a67b 	.word	0x0800a67b
 800a66c:	0800a681 	.word	0x0800a681
 800a670:	0800a687 	.word	0x0800a687
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a674:	2300      	movs	r3, #0
 800a676:	73fb      	strb	r3, [r7, #15]
    break;
 800a678:	e00b      	b.n	800a692 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a67a:	2303      	movs	r3, #3
 800a67c:	73fb      	strb	r3, [r7, #15]
    break;
 800a67e:	e008      	b.n	800a692 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a680:	2301      	movs	r3, #1
 800a682:	73fb      	strb	r3, [r7, #15]
    break;
 800a684:	e005      	b.n	800a692 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a686:	2303      	movs	r3, #3
 800a688:	73fb      	strb	r3, [r7, #15]
    break;
 800a68a:	e002      	b.n	800a692 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a68c:	2303      	movs	r3, #3
 800a68e:	73fb      	strb	r3, [r7, #15]
    break;
 800a690:	bf00      	nop
  }
  return usb_status;
 800a692:	7bfb      	ldrb	r3, [r7, #15]
}
 800a694:	4618      	mov	r0, r3
 800a696:	3714      	adds	r7, #20
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr

0800a6a0 <__libc_init_array>:
 800a6a0:	b570      	push	{r4, r5, r6, lr}
 800a6a2:	4d0d      	ldr	r5, [pc, #52]	; (800a6d8 <__libc_init_array+0x38>)
 800a6a4:	4c0d      	ldr	r4, [pc, #52]	; (800a6dc <__libc_init_array+0x3c>)
 800a6a6:	1b64      	subs	r4, r4, r5
 800a6a8:	10a4      	asrs	r4, r4, #2
 800a6aa:	2600      	movs	r6, #0
 800a6ac:	42a6      	cmp	r6, r4
 800a6ae:	d109      	bne.n	800a6c4 <__libc_init_array+0x24>
 800a6b0:	4d0b      	ldr	r5, [pc, #44]	; (800a6e0 <__libc_init_array+0x40>)
 800a6b2:	4c0c      	ldr	r4, [pc, #48]	; (800a6e4 <__libc_init_array+0x44>)
 800a6b4:	f000 f820 	bl	800a6f8 <_init>
 800a6b8:	1b64      	subs	r4, r4, r5
 800a6ba:	10a4      	asrs	r4, r4, #2
 800a6bc:	2600      	movs	r6, #0
 800a6be:	42a6      	cmp	r6, r4
 800a6c0:	d105      	bne.n	800a6ce <__libc_init_array+0x2e>
 800a6c2:	bd70      	pop	{r4, r5, r6, pc}
 800a6c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6c8:	4798      	blx	r3
 800a6ca:	3601      	adds	r6, #1
 800a6cc:	e7ee      	b.n	800a6ac <__libc_init_array+0xc>
 800a6ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6d2:	4798      	blx	r3
 800a6d4:	3601      	adds	r6, #1
 800a6d6:	e7f2      	b.n	800a6be <__libc_init_array+0x1e>
 800a6d8:	0800bb60 	.word	0x0800bb60
 800a6dc:	0800bb60 	.word	0x0800bb60
 800a6e0:	0800bb60 	.word	0x0800bb60
 800a6e4:	0800bb64 	.word	0x0800bb64

0800a6e8 <memset>:
 800a6e8:	4402      	add	r2, r0
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d100      	bne.n	800a6f2 <memset+0xa>
 800a6f0:	4770      	bx	lr
 800a6f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a6f6:	e7f9      	b.n	800a6ec <memset+0x4>

0800a6f8 <_init>:
 800a6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6fa:	bf00      	nop
 800a6fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6fe:	bc08      	pop	{r3}
 800a700:	469e      	mov	lr, r3
 800a702:	4770      	bx	lr

0800a704 <_fini>:
 800a704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a706:	bf00      	nop
 800a708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a70a:	bc08      	pop	{r3}
 800a70c:	469e      	mov	lr, r3
 800a70e:	4770      	bx	lr
